
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800a300  0800a300  0000b300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b010  0800b010  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b010  0800b010  0000c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b018  0800b018  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b018  0800b018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b01c  0800b01c  0000c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b020  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  200001f0  0800b210  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800b210  0000d8e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a8e  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7e  00000000  00000000  0001eca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00021928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8f  00000000  00000000  00022a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c9c  00000000  00000000  00023817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017637  00000000  00000000  0003d4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb60  00000000  00000000  00054aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e464a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  000e4690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ea6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2e8 	.word	0x0800a2e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a2e8 	.word	0x0800a2e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_d2lz>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	2200      	movs	r2, #0
 80010b4:	2300      	movs	r3, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	f7ff fc7f 	bl	80009bc <__aeabi_dcmplt>
 80010be:	b928      	cbnz	r0, 80010cc <__aeabi_d2lz+0x1c>
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c8:	f000 b80a 	b.w	80010e0 <__aeabi_d2ulz>
 80010cc:	4620      	mov	r0, r4
 80010ce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010d2:	f000 f805 	bl	80010e0 <__aeabi_d2ulz>
 80010d6:	4240      	negs	r0, r0
 80010d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010dc:	bd38      	pop	{r3, r4, r5, pc}
 80010de:	bf00      	nop

080010e0 <__aeabi_d2ulz>:
 80010e0:	b5d0      	push	{r4, r6, r7, lr}
 80010e2:	2200      	movs	r2, #0
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <__aeabi_d2ulz+0x34>)
 80010e6:	4606      	mov	r6, r0
 80010e8:	460f      	mov	r7, r1
 80010ea:	f7ff f9f5 	bl	80004d8 <__aeabi_dmul>
 80010ee:	f7ff fccb 	bl	8000a88 <__aeabi_d2uiz>
 80010f2:	4604      	mov	r4, r0
 80010f4:	f7ff f976 	bl	80003e4 <__aeabi_ui2d>
 80010f8:	2200      	movs	r2, #0
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <__aeabi_d2ulz+0x38>)
 80010fc:	f7ff f9ec 	bl	80004d8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4630      	mov	r0, r6
 8001106:	4639      	mov	r1, r7
 8001108:	f7ff f82e 	bl	8000168 <__aeabi_dsub>
 800110c:	f7ff fcbc 	bl	8000a88 <__aeabi_d2uiz>
 8001110:	4621      	mov	r1, r4
 8001112:	bdd0      	pop	{r4, r6, r7, pc}
 8001114:	3df00000 	.word	0x3df00000
 8001118:	41f00000 	.word	0x41f00000

0800111c <__io_putchar>:
 */
#include "HAL_Add.h"

///////////////////////USART////////////////////////////
#ifdef HAL_UART_MODULE_ENABLED
	int __io_putchar(int ch){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1,100);
 8001124:	1d39      	adds	r1, r7, #4
 8001126:	2364      	movs	r3, #100	@ 0x64
 8001128:	2201      	movs	r2, #1
 800112a:	4804      	ldr	r0, [pc, #16]	@ (800113c <__io_putchar+0x20>)
 800112c:	f004 f814 	bl	8005158 <HAL_UART_Transmit>
		return ch;
 8001130:	687b      	ldr	r3, [r7, #4]
	}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000748 	.word	0x20000748

08001140 <TIM_Speed_Check_Start>:
	HAL_TIM_Base_Init(Timer);
	HAL_TIM_Base_Start_IT(Timer);
}

uint32_t timer_over_float = 0;
void TIM_Speed_Check_Start(TIM_HandleTypeDef* Timer){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	static uint8_t once_gate = 1;
	if(once_gate){	//让定时器程序只初始化一次
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <TIM_Speed_Check_Start+0x54>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d019      	beq.n	8001184 <TIM_Speed_Check_Start+0x44>
		Timer->Init.Period = 65535;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001156:	60da      	str	r2, [r3, #12]
		Timer->Init.Prescaler = 72 -1;//TIM1 APB1 is 84M 84/84 = 1M speed to counter 1us
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2247      	movs	r2, #71	@ 0x47
 800115c:	605a      	str	r2, [r3, #4]
		Timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
		Timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
		Timer->Init.RepetitionCounter = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
		HAL_TIM_Base_Init(Timer);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f003 fb81 	bl	8004878 <HAL_TIM_Base_Init>
		__HAL_TIM_SET_COUNTER(Timer, 0);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
		once_gate=0;
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <TIM_Speed_Check_Start+0x54>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(Timer);//锟斤拷始锟斤拷锟斤拷
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f003 fbc7 	bl	8004918 <HAL_TIM_Base_Start_IT>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000

08001198 <TIM_Speed_Check_Stop>:
void TIM_Speed_Check_Stop(TIM_HandleTypeDef* Timer,uint32_t* MCU_Speed){//单位ms
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(Timer);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f003 fc0a 	bl	80049bc <HAL_TIM_Base_Stop_IT>
	*MCU_Speed = timer_over_float*65535 + __HAL_TIM_GET_COUNTER(Timer);//unit us
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <TIM_Speed_Check_Stop+0x58>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	1a9a      	subs	r2, r3, r2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	441a      	add	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	601a      	str	r2, [r3, #0]
	if(*MCU_Speed>=1000)*MCU_Speed/=1000;	//us转为ms
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c6:	d307      	bcc.n	80011d8 <TIM_Speed_Check_Stop+0x40>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a09      	ldr	r2, [pc, #36]	@ (80011f4 <TIM_Speed_Check_Stop+0x5c>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	099a      	lsrs	r2, r3, #6
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
	timer_over_float = 0;					//清除溢出值
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <TIM_Speed_Check_Stop+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(Timer, 0);		//清0计数器
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	10624dd3 	.word	0x10624dd3

080011f8 <MPU6050_Write_REG>:
#ifdef HAL_I2C_MODULE_ENABLED
	#include "i2c.h"
	I2C_HandleTypeDef *MPU6050_I2C=NULL;
#endif

void MPU6050_Write_REG(uint8_t reg, uint8_t data){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpdata = data;
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	73fb      	strb	r3, [r7, #15]
	//HAL_I2C_Master_Transmit(&hi2c1,reg,&tmpdata,1,1000);
	HAL_I2C_Mem_Write(MPU6050_I2C,0x68 << 1, reg, I2C_MEMADD_SIZE_8BIT, &tmpdata, 1, 500);
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MPU6050_Write_REG+0x3c>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	b29a      	uxth	r2, r3
 8001214:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	21d0      	movs	r1, #208	@ 0xd0
 8001228:	f001 fff4 	bl	8003214 <HAL_I2C_Mem_Write>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000210 	.word	0x20000210

08001238 <MPU6050_Read_REG>:

uint8_t MPU6050_Read_REG(uint8_t reg){
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af04      	add	r7, sp, #16
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpdata;
	//HAL_I2C_Master_Receive(&hi2c1,reg,&tmpdata,1,1000);
	HAL_I2C_Mem_Read(MPU6050_I2C,0x68<<1,reg,I2C_MEMADD_SIZE_8BIT,&tmpdata,1,500);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MPU6050_Read_REG+0x34>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	b29a      	uxth	r2, r3
 800124a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 030f 	add.w	r3, r7, #15
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	21d0      	movs	r1, #208	@ 0xd0
 800125e:	f002 f8d3 	bl	8003408 <HAL_I2C_Mem_Read>
	return tmpdata;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000210 	.word	0x20000210

08001270 <MPU6050_Register_init>:
    ACCEL_CONFIG_Typedef acc_range;    //加速度计测量范围
    FIFO_EN_Typedef FIFO_EN;           //FIFO缓冲区使能
    INT_EN_Typedef INT;                //中断使能
}MPU6050_InitTypeDef;
///////////////////////////////////////////////////////////////////////////////////////////////////
static void MPU6050_Register_init(MPU6050_InitTypeDef* this){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    MPU6050Wirte_Reg(MPU6050_PWR_MGMT_1,0x80);//复位
 8001278:	2180      	movs	r1, #128	@ 0x80
 800127a:	206b      	movs	r0, #107	@ 0x6b
 800127c:	f7ff ffbc 	bl	80011f8 <MPU6050_Write_REG>
    HAL_Delay(100);
 8001280:	2064      	movs	r0, #100	@ 0x64
 8001282:	f001 fbb5 	bl	80029f0 <HAL_Delay>
    MPU6050Wirte_Reg(MPU6050_PWR_MGMT_1,0x00);//唤醒
 8001286:	2100      	movs	r1, #0
 8001288:	206b      	movs	r0, #107	@ 0x6b
 800128a:	f7ff ffb5 	bl	80011f8 <MPU6050_Write_REG>
   	uint8_t SMPLRT_DIV;
	if(this->SMPLRT_Rate>=1000)this->SMPLRT_Rate=1000;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001296:	d304      	bcc.n	80012a2 <MPU6050_Register_init+0x32>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	e006      	b.n	80012b0 <MPU6050_Register_init+0x40>
	else if(this->SMPLRT_Rate<4)this->SMPLRT_Rate=4;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d802      	bhi.n	80012b0 <MPU6050_Register_init+0x40>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2204      	movs	r2, #4
 80012ae:	801a      	strh	r2, [r3, #0]
	SMPLRT_DIV=1000.0f/this->SMPLRT_Rate-1;//由计算公式得
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fd11 	bl	8000cdc <__aeabi_i2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	4828      	ldr	r0, [pc, #160]	@ (8001360 <MPU6050_Register_init+0xf0>)
 80012c0:	f7ff fe14 	bl	8000eec <__aeabi_fdiv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fc50 	bl	8000b70 <__aeabi_fsub>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fecc 	bl	8001070 <__aeabi_f2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	73bb      	strb	r3, [r7, #14]
    MPU6050Wirte_Reg(MPU6050_SMPLRT_DIV,SMPLRT_DIV);
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	4619      	mov	r1, r3
 80012e0:	2019      	movs	r0, #25
 80012e2:	f7ff ff89 	bl	80011f8 <MPU6050_Write_REG>

    MPU6050Wirte_Reg(MPU6050_INT_ENABLE,this->INT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2038      	movs	r0, #56	@ 0x38
 80012ee:	f7ff ff83 	bl	80011f8 <MPU6050_Write_REG>
    MPU6050Wirte_Reg(MPU6050_CONFIG,this->Filter);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	4619      	mov	r1, r3
 80012f8:	201a      	movs	r0, #26
 80012fa:	f7ff ff7d 	bl	80011f8 <MPU6050_Write_REG>
    MPU6050Wirte_Reg(MPU6050_GYRO_CONFIG,this->gyro_range);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	78db      	ldrb	r3, [r3, #3]
 8001302:	4619      	mov	r1, r3
 8001304:	201b      	movs	r0, #27
 8001306:	f7ff ff77 	bl	80011f8 <MPU6050_Write_REG>
    MPU6050Wirte_Reg(MPU6050_ACCEL_CONFIG,this->acc_range);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	4619      	mov	r1, r3
 8001310:	201c      	movs	r0, #28
 8001312:	f7ff ff71 	bl	80011f8 <MPU6050_Write_REG>
    MPU6050Wirte_Reg(MPU6050_FIFO_EN,this->FIFO_EN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	795b      	ldrb	r3, [r3, #5]
 800131a:	4619      	mov	r1, r3
 800131c:	2023      	movs	r0, #35	@ 0x23
 800131e:	f7ff ff6b 	bl	80011f8 <MPU6050_Write_REG>
    uint8_t temp = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
    if(this->FIFO_EN!=0x00)//如果打开了FIFO
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MPU6050_Register_init+0xc2>
        temp = 0x40;
 800132e:	2340      	movs	r3, #64	@ 0x40
 8001330:	73fb      	strb	r3, [r7, #15]
    if((this->INT & 0x01)==0)//如果打开了中断
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	799b      	ldrb	r3, [r3, #6]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <MPU6050_Register_init+0xd6>
        temp |= 0x08;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	73fb      	strb	r3, [r7, #15]
    MPU6050Wirte_Reg(MPU6050_USER_CTRL,temp);
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	4619      	mov	r1, r3
 800134a:	206a      	movs	r0, #106	@ 0x6a
 800134c:	f7ff ff54 	bl	80011f8 <MPU6050_Write_REG>
    MPU6050Wirte_Reg(MPU6050_PWR_MGMT_1,0x01);//X轴为参考
 8001350:	2101      	movs	r1, #1
 8001352:	206b      	movs	r0, #107	@ 0x6b
 8001354:	f7ff ff50 	bl	80011f8 <MPU6050_Write_REG>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	447a0000 	.word	0x447a0000

08001364 <MPU6050_SoftCalibrate_Z>:

// 传感器校准函数,减小零点漂移
static float gyro_zero_z = 0.0f;
static void MPU6050_SoftCalibrate_Z() {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
    uint16_t calibration_samples = 500;
 800136a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800136e:	813b      	strh	r3, [r7, #8]
    float gz_sum = 0.0f;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
    int16_t GyroZ;

    for (uint16_t i = 0; i < calibration_samples; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	817b      	strh	r3, [r7, #10]
 800137a:	e01e      	b.n	80013ba <MPU6050_SoftCalibrate_Z+0x56>
        ///////////根据Z轴的变换规律进行修正/////////
        // 读取Z轴数据
        GyroZ = ((int16_t)(MPU6050Read_Reg(MPU6050_GYRO_ZOUT_H))<<8) | MPU6050Read_Reg(MPU6050_GYRO_ZOUT_L);
 800137c:	2047      	movs	r0, #71	@ 0x47
 800137e:	f7ff ff5b 	bl	8001238 <MPU6050_Read_REG>
 8001382:	4603      	mov	r3, r0
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21c      	sxth	r4, r3
 8001388:	2048      	movs	r0, #72	@ 0x48
 800138a:	f7ff ff55 	bl	8001238 <MPU6050_Read_REG>
 800138e:	4603      	mov	r3, r0
 8001390:	b21b      	sxth	r3, r3
 8001392:	4323      	orrs	r3, r4
 8001394:	80fb      	strh	r3, [r7, #6]
        gz_sum += (float)GyroZ;
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fc9e 	bl	8000cdc <__aeabi_i2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fbe5 	bl	8000b74 <__addsf3>
 80013aa:	4603      	mov	r3, r0
 80013ac:	60fb      	str	r3, [r7, #12]
        HAL_Delay(10);//要和dt同步
 80013ae:	200a      	movs	r0, #10
 80013b0:	f001 fb1e 	bl	80029f0 <HAL_Delay>
    for (uint16_t i = 0; i < calibration_samples; i++) {
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	3301      	adds	r3, #1
 80013b8:	817b      	strh	r3, [r7, #10]
 80013ba:	897a      	ldrh	r2, [r7, #10]
 80013bc:	893b      	ldrh	r3, [r7, #8]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3dc      	bcc.n	800137c <MPU6050_SoftCalibrate_Z+0x18>
    }
    gyro_zero_z = gz_sum / calibration_samples;
 80013c2:	893b      	ldrh	r3, [r7, #8]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc89 	bl	8000cdc <__aeabi_i2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4619      	mov	r1, r3
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff fd8c 	bl	8000eec <__aeabi_fdiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <MPU6050_SoftCalibrate_Z+0x80>)
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000214 	.word	0x20000214

080013e8 <KalmanFilter_Update>:
    float x; // 状态估计值
    float p; // 估计误差协方差
    float k; // 卡尔曼增益
} MPU6050_KalmanFilter;
// 卡尔曼滤波更新函数
static float KalmanFilter_Update(MPU6050_KalmanFilter *kf, float measurement) {
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    // 预测步骤
    kf->p = kf->p + kf->q;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff fbb9 	bl	8000b74 <__addsf3>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60da      	str	r2, [r3, #12]
    // 计算卡尔曼增益
    kf->k = kf->p / (kf->p + kf->r);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68dc      	ldr	r4, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff fbab 	bl	8000b74 <__addsf3>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fd62 	bl	8000eec <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
    // 更新估计值
    kf->x = kf->x + kf->k * (measurement - kf->x);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689c      	ldr	r4, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691d      	ldr	r5, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4619      	mov	r1, r3
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f7ff fb96 	bl	8000b70 <__aeabi_fsub>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4628      	mov	r0, r5
 800144a:	f7ff fc9b 	bl	8000d84 <__aeabi_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fb8e 	bl	8000b74 <__addsf3>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
    // 更新估计误差协方差
    kf->p = (1 - kf->k) * kf->p;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800146a:	f7ff fb81 	bl	8000b70 <__aeabi_fsub>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff fc83 	bl	8000d84 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60da      	str	r2, [r3, #12]
    return kf->x;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001494 <MPU6050_init>:
/*例子:MPU6050_init(GPIOA,GPIO_PIN_1,GPIO_PIN_2);
GPIOx:选择你的GPIO
SCl:选择你的GPIO(choose your GPIO)
SDA:选择你的GPIO(choose your GPIO)
注意:SCL和SDA来自同一组GPIO口(notice:SCL and SDA come from a same GPIO port)*/
void MPU6050_init(I2C_HandleTypeDef *hi2c){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	MPU6050_I2C = hi2c;
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <MPU6050_init+0x44>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
    MPU6050_InitTypeDef MPU6050_init_Struct;
    MPU6050_init_Struct.SMPLRT_Rate = 100;            //采样率Hz
 80014a2:	2364      	movs	r3, #100	@ 0x64
 80014a4:	813b      	strh	r3, [r7, #8]
    MPU6050_init_Struct.Filter = Band_5Hz;            //滤波器带宽
 80014a6:	2306      	movs	r3, #6
 80014a8:	72bb      	strb	r3, [r7, #10]
    MPU6050_init_Struct.gyro_range = gyro_250;       //陀螺仪测量范围
 80014aa:	2300      	movs	r3, #0
 80014ac:	72fb      	strb	r3, [r7, #11]
    MPU6050_init_Struct.acc_range = acc_2g;          //加速度计测量范围
 80014ae:	2300      	movs	r3, #0
 80014b0:	733b      	strb	r3, [r7, #12]
    MPU6050_init_Struct.FIFO_EN = FIFO_Disable;       //FIFO
 80014b2:	2300      	movs	r3, #0
 80014b4:	737b      	strb	r3, [r7, #13]
    MPU6050_init_Struct.INT = interrupt_Disable;      //中断配置
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
    MPU6050_Register_init(&MPU6050_init_Struct);      //初始化寄存器
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fed6 	bl	8001270 <MPU6050_Register_init>
    HAL_Delay(50);
 80014c4:	2032      	movs	r0, #50	@ 0x32
 80014c6:	f001 fa93 	bl	80029f0 <HAL_Delay>
    MPU6050_SoftCalibrate_Z();//软件校准,减少yaw的零点漂移
 80014ca:	f7ff ff4b 	bl	8001364 <MPU6050_SoftCalibrate_Z>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000210 	.word	0x20000210
 80014dc:	00000000 	.word	0x00000000

080014e0 <MPU6050_Get_Angle>:
	float temperature = (float)temp/340 + 36.53;
	return temperature;
}

float ACC_abs = 0;
void MPU6050_Get_Angle(MPU6050* this){
 80014e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e4:	b08e      	sub	sp, #56	@ 0x38
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
    int16_t temp=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	867b      	strh	r3, [r7, #50]	@ 0x32
    const static float dt=0.01f;//积分时间10ms

    // 初始化卡尔曼滤波器
    static MPU6050_KalmanFilter kf_roll, kf_pitch;
    static int once_flag = 1;
    if (once_flag) {//只执行一次,修改卡尔曼滤波器:如果需要高速运动加大q，噪声大的时候增大r
 80014ee:	4b92      	ldr	r3, [pc, #584]	@ (8001738 <MPU6050_Get_Angle+0x258>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01e      	beq.n	8001534 <MPU6050_Get_Angle+0x54>
        //roll的初始化
        kf_roll.q = 0.001f;
 80014f6:	4b91      	ldr	r3, [pc, #580]	@ (800173c <MPU6050_Get_Angle+0x25c>)
 80014f8:	4a91      	ldr	r2, [pc, #580]	@ (8001740 <MPU6050_Get_Angle+0x260>)
 80014fa:	601a      	str	r2, [r3, #0]
        kf_roll.r = 0.1f;
 80014fc:	4b8f      	ldr	r3, [pc, #572]	@ (800173c <MPU6050_Get_Angle+0x25c>)
 80014fe:	4a91      	ldr	r2, [pc, #580]	@ (8001744 <MPU6050_Get_Angle+0x264>)
 8001500:	605a      	str	r2, [r3, #4]
        kf_roll.x = 0;
 8001502:	4b8e      	ldr	r3, [pc, #568]	@ (800173c <MPU6050_Get_Angle+0x25c>)
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
        kf_roll.p = 1;
 800150a:	4b8c      	ldr	r3, [pc, #560]	@ (800173c <MPU6050_Get_Angle+0x25c>)
 800150c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001510:	60da      	str	r2, [r3, #12]
        //Pitch的初始化
        kf_pitch.q = 0.001f;
 8001512:	4b8d      	ldr	r3, [pc, #564]	@ (8001748 <MPU6050_Get_Angle+0x268>)
 8001514:	4a8a      	ldr	r2, [pc, #552]	@ (8001740 <MPU6050_Get_Angle+0x260>)
 8001516:	601a      	str	r2, [r3, #0]
        kf_pitch.r = 0.1f;
 8001518:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <MPU6050_Get_Angle+0x268>)
 800151a:	4a8a      	ldr	r2, [pc, #552]	@ (8001744 <MPU6050_Get_Angle+0x264>)
 800151c:	605a      	str	r2, [r3, #4]
        kf_pitch.x = 0;
 800151e:	4b8a      	ldr	r3, [pc, #552]	@ (8001748 <MPU6050_Get_Angle+0x268>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
        kf_pitch.p = 1;
 8001526:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <MPU6050_Get_Angle+0x268>)
 8001528:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800152c:	60da      	str	r2, [r3, #12]
        once_flag = 0;
 800152e:	4b82      	ldr	r3, [pc, #520]	@ (8001738 <MPU6050_Get_Angle+0x258>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
    }
    
    /////////////////////////////Ax = temp * 加速度计量程/32768;//////////////////////////////////
	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_ACCEL_XOUT_H) << 8)+MPU6050Read_Reg(MPU6050_ACCEL_XOUT_L);
 8001534:	203b      	movs	r0, #59	@ 0x3b
 8001536:	f7ff fe7f 	bl	8001238 <MPU6050_Read_REG>
 800153a:	4603      	mov	r3, r0
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29c      	uxth	r4, r3
 8001540:	203c      	movs	r0, #60	@ 0x3c
 8001542:	f7ff fe79 	bl	8001238 <MPU6050_Read_REG>
 8001546:	4603      	mov	r3, r0
 8001548:	4423      	add	r3, r4
 800154a:	b29b      	uxth	r3, r3
 800154c:	867b      	strh	r3, [r7, #50]	@ 0x32
	Ax = temp * 2.0f/32768;
 800154e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fbc2 	bl	8000cdc <__aeabi_i2f>
 8001558:	4603      	mov	r3, r0
 800155a:	4619      	mov	r1, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb09 	bl	8000b74 <__addsf3>
 8001562:	4603      	mov	r3, r0
 8001564:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fcbf 	bl	8000eec <__aeabi_fdiv>
 800156e:	4603      	mov	r3, r0
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c

	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_ACCEL_YOUT_H) << 8)+MPU6050Read_Reg(MPU6050_ACCEL_YOUT_L);
 8001572:	203d      	movs	r0, #61	@ 0x3d
 8001574:	f7ff fe60 	bl	8001238 <MPU6050_Read_REG>
 8001578:	4603      	mov	r3, r0
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b29c      	uxth	r4, r3
 800157e:	203e      	movs	r0, #62	@ 0x3e
 8001580:	f7ff fe5a 	bl	8001238 <MPU6050_Read_REG>
 8001584:	4603      	mov	r3, r0
 8001586:	4423      	add	r3, r4
 8001588:	b29b      	uxth	r3, r3
 800158a:	867b      	strh	r3, [r7, #50]	@ 0x32
	Ay = temp * 2.0f/32768;
 800158c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fba3 	bl	8000cdc <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff faea 	bl	8000b74 <__addsf3>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fca0 	bl	8000eec <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_ACCEL_ZOUT_H) << 8)+MPU6050Read_Reg(MPU6050_ACCEL_ZOUT_L);
 80015b0:	203f      	movs	r0, #63	@ 0x3f
 80015b2:	f7ff fe41 	bl	8001238 <MPU6050_Read_REG>
 80015b6:	4603      	mov	r3, r0
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29c      	uxth	r4, r3
 80015bc:	2040      	movs	r0, #64	@ 0x40
 80015be:	f7ff fe3b 	bl	8001238 <MPU6050_Read_REG>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4423      	add	r3, r4
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	867b      	strh	r3, [r7, #50]	@ 0x32
	Az = temp * 2.0f/32768;
 80015ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb84 	bl	8000cdc <__aeabi_i2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff facb 	bl	8000b74 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fc81 	bl	8000eec <__aeabi_fdiv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24

	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_GYRO_XOUT_H) << 8)+MPU6050Read_Reg(MPU6050_GYRO_XOUT_L);
 80015ee:	2043      	movs	r0, #67	@ 0x43
 80015f0:	f7ff fe22 	bl	8001238 <MPU6050_Read_REG>
 80015f4:	4603      	mov	r3, r0
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29c      	uxth	r4, r3
 80015fa:	2044      	movs	r0, #68	@ 0x44
 80015fc:	f7ff fe1c 	bl	8001238 <MPU6050_Read_REG>
 8001600:	4603      	mov	r3, r0
 8001602:	4423      	add	r3, r4
 8001604:	b29b      	uxth	r3, r3
 8001606:	867b      	strh	r3, [r7, #50]	@ 0x32
	Gx = temp *dt*0.0174532f;
 8001608:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb65 	bl	8000cdc <__aeabi_i2f>
 8001612:	4602      	mov	r2, r0
 8001614:	4b4d      	ldr	r3, [pc, #308]	@ (800174c <MPU6050_Get_Angle+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	494b      	ldr	r1, [pc, #300]	@ (8001750 <MPU6050_Get_Angle+0x270>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fbad 	bl	8000d84 <__aeabi_fmul>
 800162a:	4603      	mov	r3, r0
 800162c:	623b      	str	r3, [r7, #32]

	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_GYRO_YOUT_H) << 8)+MPU6050Read_Reg(MPU6050_GYRO_YOUT_L);
 800162e:	2045      	movs	r0, #69	@ 0x45
 8001630:	f7ff fe02 	bl	8001238 <MPU6050_Read_REG>
 8001634:	4603      	mov	r3, r0
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b29c      	uxth	r4, r3
 800163a:	2046      	movs	r0, #70	@ 0x46
 800163c:	f7ff fdfc 	bl	8001238 <MPU6050_Read_REG>
 8001640:	4603      	mov	r3, r0
 8001642:	4423      	add	r3, r4
 8001644:	b29b      	uxth	r3, r3
 8001646:	867b      	strh	r3, [r7, #50]	@ 0x32
	Gy = temp *dt*0.0174532f;
 8001648:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb45 	bl	8000cdc <__aeabi_i2f>
 8001652:	4602      	mov	r2, r0
 8001654:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <MPU6050_Get_Angle+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fb92 	bl	8000d84 <__aeabi_fmul>
 8001660:	4603      	mov	r3, r0
 8001662:	493b      	ldr	r1, [pc, #236]	@ (8001750 <MPU6050_Get_Angle+0x270>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb8d 	bl	8000d84 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	61fb      	str	r3, [r7, #28]

	temp = ((uint16_t)MPU6050Read_Reg(MPU6050_GYRO_ZOUT_H) << 8) + MPU6050Read_Reg(MPU6050_GYRO_ZOUT_L) - (int16_t)gyro_zero_z;//软件校准减掉漂移值
 800166e:	2047      	movs	r0, #71	@ 0x47
 8001670:	f7ff fde2 	bl	8001238 <MPU6050_Read_REG>
 8001674:	4603      	mov	r3, r0
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b29c      	uxth	r4, r3
 800167a:	2048      	movs	r0, #72	@ 0x48
 800167c:	f7ff fddc 	bl	8001238 <MPU6050_Read_REG>
 8001680:	4603      	mov	r3, r0
 8001682:	4423      	add	r3, r4
 8001684:	b29c      	uxth	r4, r3
 8001686:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <MPU6050_Get_Angle+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fcca 	bl	8001024 <__aeabi_f2iz>
 8001690:	4603      	mov	r3, r0
 8001692:	b21b      	sxth	r3, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	1ae3      	subs	r3, r4, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	867b      	strh	r3, [r7, #50]	@ 0x32
	Gz = temp *dt*0.0174532f;
 800169c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fb1b 	bl	8000cdc <__aeabi_i2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b28      	ldr	r3, [pc, #160]	@ (800174c <MPU6050_Get_Angle+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff fb68 	bl	8000d84 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4926      	ldr	r1, [pc, #152]	@ (8001750 <MPU6050_Get_Angle+0x270>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb63 	bl	8000d84 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]

    // 计算加速度的绝对值
    float absAcc = sqrt(Ax * Ax + Ay * Ay + Az * Az);
 80016c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80016c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016c6:	f7ff fb5d 	bl	8000d84 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461c      	mov	r4, r3
 80016ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016d2:	f7ff fb57 	bl	8000d84 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fa4a 	bl	8000b74 <__addsf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461c      	mov	r4, r3
 80016e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016e8:	f7ff fb4c 	bl	8000d84 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff fa3f 	bl	8000b74 <__addsf3>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fe95 	bl	8000428 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f008 fa8d 	bl	8009c24 <sqrt>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f9d9 	bl	8000ac8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	617b      	str	r3, [r7, #20]
    //ACC_abs = absAcc;
    // 动态调整权重
    float weight;
    if (absAcc > 1.2) {
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7fe fe84 	bl	8000428 <__aeabi_f2d>
 8001720:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MPU6050_Get_Angle+0x278>)
 8001726:	f7ff f967 	bl	80009f8 <__aeabi_dcmpgt>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d017      	beq.n	8001760 <MPU6050_Get_Angle+0x280>
        // 快速运动或剧烈振动状态，减小加速度计权重
        weight = 0.8f;
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <MPU6050_Get_Angle+0x27c>)
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
 8001734:	e017      	b.n	8001766 <MPU6050_Get_Angle+0x286>
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	20000218 	.word	0x20000218
 8001740:	3a83126f 	.word	0x3a83126f
 8001744:	3dcccccd 	.word	0x3dcccccd
 8001748:	2000022c 	.word	0x2000022c
 800174c:	0800a314 	.word	0x0800a314
 8001750:	3c8efa03 	.word	0x3c8efa03
 8001754:	20000214 	.word	0x20000214
 8001758:	3ff33333 	.word	0x3ff33333
 800175c:	3f4ccccd 	.word	0x3f4ccccd
    } else {
        // 正常运动状态，强烈信任加速度计
        weight = 1.0f;
 8001760:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001764:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    static float Gyroscope_roll=0.0f;
	static float Gyroscope_pitch=0.0f;
	Gyroscope_roll+=Gy;
 8001766:	4b6c      	ldr	r3, [pc, #432]	@ (8001918 <MPU6050_Get_Angle+0x438>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa01 	bl	8000b74 <__addsf3>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b68      	ldr	r3, [pc, #416]	@ (8001918 <MPU6050_Get_Angle+0x438>)
 8001778:	601a      	str	r2, [r3, #0]
	Gyroscope_pitch+=Gx;
 800177a:	4b68      	ldr	r3, [pc, #416]	@ (800191c <MPU6050_Get_Angle+0x43c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff f9f7 	bl	8000b74 <__addsf3>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b64      	ldr	r3, [pc, #400]	@ (800191c <MPU6050_Get_Angle+0x43c>)
 800178c:	601a      	str	r2, [r3, #0]
	float raw_roll=weight * atan2(Ay,Az)/3.1415926f * 180.f + (1-weight) * Gyroscope_roll;
 800178e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001790:	f7fe fe4a 	bl	8000428 <__aeabi_f2d>
 8001794:	4604      	mov	r4, r0
 8001796:	460d      	mov	r5, r1
 8001798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800179a:	f7fe fe45 	bl	8000428 <__aeabi_f2d>
 800179e:	4680      	mov	r8, r0
 80017a0:	4689      	mov	r9, r1
 80017a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017a4:	f7fe fe40 	bl	8000428 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4640      	mov	r0, r8
 80017ae:	4649      	mov	r1, r9
 80017b0:	f008 fa36 	bl	8009c20 <atan2>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fe8c 	bl	80004d8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a351      	add	r3, pc, #324	@ (adr r3, 8001910 <MPU6050_Get_Angle+0x430>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ffad 	bl	800072c <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <MPU6050_Get_Angle+0x440>)
 80017e0:	f7fe fe7a 	bl	80004d8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017f2:	f7ff f9bd 	bl	8000b70 <__aeabi_fsub>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <MPU6050_Get_Angle+0x438>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff fabf 	bl	8000d84 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe0d 	bl	8000428 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fca9 	bl	800016c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f951 	bl	8000ac8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	613b      	str	r3, [r7, #16]
	float raw_pitch=-(weight * atan2(Ax,Az)/3.1415926f * 180.f + (1-weight) * Gyroscope_pitch);
 800182a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800182c:	f7fe fdfc 	bl	8000428 <__aeabi_f2d>
 8001830:	4604      	mov	r4, r0
 8001832:	460d      	mov	r5, r1
 8001834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001836:	f7fe fdf7 	bl	8000428 <__aeabi_f2d>
 800183a:	4680      	mov	r8, r0
 800183c:	4689      	mov	r9, r1
 800183e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001840:	f7fe fdf2 	bl	8000428 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4640      	mov	r0, r8
 800184a:	4649      	mov	r1, r9
 800184c:	f008 f9e8 	bl	8009c20 <atan2>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fe3e 	bl	80004d8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	a32a      	add	r3, pc, #168	@ (adr r3, 8001910 <MPU6050_Get_Angle+0x430>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe ff5f 	bl	800072c <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <MPU6050_Get_Angle+0x440>)
 800187c:	f7fe fe2c 	bl	80004d8 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800188a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800188e:	f7ff f96f 	bl	8000b70 <__aeabi_fsub>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MPU6050_Get_Angle+0x43c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f7ff fa71 	bl	8000d84 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdbf 	bl	8000428 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fc5b 	bl	800016c <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f903 	bl	8000ac8 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018c8:	60fb      	str	r3, [r7, #12]
    // 应用卡尔曼滤波
    this->roll = KalmanFilter_Update(&kf_roll, raw_roll);
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	4815      	ldr	r0, [pc, #84]	@ (8001924 <MPU6050_Get_Angle+0x444>)
 80018ce:	f7ff fd8b 	bl	80013e8 <KalmanFilter_Update>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	605a      	str	r2, [r3, #4]
    this->pitch = KalmanFilter_Update(&kf_pitch, raw_pitch);
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	4813      	ldr	r0, [pc, #76]	@ (8001928 <MPU6050_Get_Angle+0x448>)
 80018dc:	f7ff fd84 	bl	80013e8 <KalmanFilter_Update>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	609a      	str	r2, [r3, #8]
	this->yaw += Gz/2;//减小零飘(如果零票严重，可以通过加减一个小数来解决,这是二次手动校准,值得注意的是，每次上电的时候gyro_zero_z的值都会不同，并且VCC也会变换所以这个不是很好的解决办法，不想漂就加磁力计)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681c      	ldr	r4, [r3, #0]
 80018ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018ee:	69b8      	ldr	r0, [r7, #24]
 80018f0:	f7ff fafc 	bl	8000eec <__aeabi_fdiv>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff f93b 	bl	8000b74 <__addsf3>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3738      	adds	r7, #56	@ 0x38
 800190a:	46bd      	mov	sp, r7
 800190c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001910:	40000000 	.word	0x40000000
 8001914:	400921fb 	.word	0x400921fb
 8001918:	20000240 	.word	0x20000240
 800191c:	20000244 	.word	0x20000244
 8001920:	40668000 	.word	0x40668000
 8001924:	20000218 	.word	0x20000218
 8001928:	2000022c 	.word	0x2000022c

0800192c <OLED_W_SCL>:
	uint16_t SDA;
	uint16_t SCl;
	uint8_t ScreenSize__96;
}OLED_Pin;

void OLED_W_SCL(uint8_t BitValue){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
    if (BitValue) {
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <OLED_W_SCL+0x1c>
        OLED_Pin.GPIOx->BSRR = OLED_Pin.SCl;  // 置位
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <OLED_W_SCL+0x30>)
 800193e:	88da      	ldrh	r2, [r3, #6]
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <OLED_W_SCL+0x30>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	611a      	str	r2, [r3, #16]
    } else {
        OLED_Pin.GPIOx->BRR = OLED_Pin.SCl;   // 复位
    }
}
 8001946:	e004      	b.n	8001952 <OLED_W_SCL+0x26>
        OLED_Pin.GPIOx->BRR = OLED_Pin.SCl;   // 复位
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <OLED_W_SCL+0x30>)
 800194a:	88da      	ldrh	r2, [r3, #6]
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <OLED_W_SCL+0x30>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	615a      	str	r2, [r3, #20]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000648 	.word	0x20000648

08001960 <OLED_W_SDA>:
void OLED_W_SDA(uint8_t BitValue){
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    if (BitValue) {
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <OLED_W_SDA+0x1c>
        OLED_Pin.GPIOx->BSRR = OLED_Pin.SDA;  // 置位
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <OLED_W_SDA+0x30>)
 8001972:	889a      	ldrh	r2, [r3, #4]
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <OLED_W_SDA+0x30>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	611a      	str	r2, [r3, #16]
    } else {
        OLED_Pin.GPIOx->BRR = OLED_Pin.SDA;   // 复位
    }
}
 800197a:	e004      	b.n	8001986 <OLED_W_SDA+0x26>
        OLED_Pin.GPIOx->BRR = OLED_Pin.SDA;   // 复位
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <OLED_W_SDA+0x30>)
 800197e:	889a      	ldrh	r2, [r3, #4]
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <OLED_W_SDA+0x30>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	615a      	str	r2, [r3, #20]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000648 	.word	0x20000648

08001994 <OLED_GPIO_Init>:

void OLED_GPIO_Init(void){//set your SCL and SDA pin
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	uint32_t i, j;
	for (i = 0; i < 1000; i ++)
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	e00c      	b.n	80019ba <OLED_GPIO_Init+0x26>
	{
		for (j = 0; j < 1000; j ++);
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	e002      	b.n	80019ac <OLED_GPIO_Init+0x18>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019b2:	d3f8      	bcc.n	80019a6 <OLED_GPIO_Init+0x12>
	for (i = 0; i < 1000; i ++)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019c0:	d3ee      	bcc.n	80019a0 <OLED_GPIO_Init+0xc>
	}

	OLED_W_SCL(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff ffb2 	bl	800192c <OLED_W_SCL>
	OLED_W_SDA(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff ffc9 	bl	8001960 <OLED_W_SDA>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <OLED_I2C_Start>:

void OLED_I2C_Start(void){
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);		//éćžSDAďźçĄŽäżSDAä¸şéŤçľĺšł
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff ffc0 	bl	8001960 <OLED_W_SDA>
	OLED_W_SCL(1);		//éćžSCLďźçĄŽäżSCLä¸şéŤçľĺšł
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff ffa3 	bl	800192c <OLED_W_SCL>
	OLED_W_SDA(0);		//ĺ¨SCLéŤçľĺšłćé´ďźćä˝SDAďźäş§çčľˇĺ§äżĄĺ?
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff ffba 	bl	8001960 <OLED_W_SDA>
	OLED_W_SCL(0);		//čľˇĺ?ĺćSCLäšćä˝ďźĺłä¸şäşĺ ç¨ćťçşżďźäšä¸şäşćšäžżćťçşżćśĺşçćźć?
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff ff9d 	bl	800192c <OLED_W_SCL>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <OLED_I2C_Stop>:

void OLED_I2C_Stop(void){
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);		//ćä˝SDAďźçĄŽäżSDAä¸şä˝çľĺšł
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff ffb0 	bl	8001960 <OLED_W_SDA>
	OLED_W_SCL(1);		//éćžSCLďźä˝żSCLĺç°éŤçľĺš?
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff ff93 	bl	800192c <OLED_W_SCL>
	OLED_W_SDA(1);		//ĺ¨SCLéŤçľĺšłćé´ďźéćžSDAďźäş§ççťć­?äżĄĺˇ
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff ffaa 	bl	8001960 <OLED_W_SDA>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <OLED_I2C_SendByte>:

void OLED_I2C_SendByte(uint8_t Byte){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e016      	b.n	8001a4e <OLED_I2C_SendByte+0x3e>
	{
		OLED_W_SDA(!!(Byte & (0x80 >> i)));
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	fa41 f303 	asr.w	r3, r1, r3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff92 	bl	8001960 <OLED_W_SDA>
		//delay_us(2);
		OLED_W_SCL(1);	//éćžSCLďźäťćşĺ¨SCLéŤçľĺšłćé´č?ťĺSDA
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff ff75 	bl	800192c <OLED_W_SCL>
		//delay_us(2);
		OLED_W_SCL(0);	//ćä˝SCLďźä¸ťćşĺźĺ§ĺéä¸ä¸ä˝ć°ć?
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff ff72 	bl	800192c <OLED_W_SCL>
	for (i = 0; i < 8; i++)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d9e5      	bls.n	8001a20 <OLED_I2C_SendByte+0x10>
		//delay_us(2);

	}
	OLED_W_SCL(1);		//é˘ĺ?çä¸ä¸?ćśéďźä¸ĺ¤çĺşç­äżĄĺˇ
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff ff69 	bl	800192c <OLED_W_SCL>
	OLED_W_SCL(0);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff ff66 	bl	800192c <OLED_W_SCL>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <OLED_WriteCommand>:

void OLED_WriteCommand(uint8_t Command)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();				//I2Cčľˇĺ??
 8001a72:	f7ff ffb0 	bl	80019d6 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//ĺéOLEDçI2Cäťćşĺ°ĺ
 8001a76:	2078      	movs	r0, #120	@ 0x78
 8001a78:	f7ff ffca 	bl	8001a10 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//ć§ĺśĺ­čďźçť0x00ďźčĄ¨ç¤şĺłĺ°ĺĺ˝äť¤
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffc7 	bl	8001a10 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);		//ĺĺĽćĺŽçĺ˝äť?
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffc3 	bl	8001a10 <OLED_I2C_SendByte>
	OLED_I2C_Stop();				//I2Cçťć??
 8001a8a:	f7ff ffb4 	bl	80019f6 <OLED_I2C_Stop>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <OLED_WriteData>:

void OLED_WriteData(uint8_t *Data, uint8_t Count)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	OLED_I2C_Start();				//I2Cčľˇĺ??
 8001aa2:	f7ff ff98 	bl	80019d6 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//ĺéOLEDçI2Cäťćşĺ°ĺ
 8001aa6:	2078      	movs	r0, #120	@ 0x78
 8001aa8:	f7ff ffb2 	bl	8001a10 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//ć§ĺśĺ­čďźçť0x40ďźčĄ¨ç¤şĺłĺ°ĺć°ćŽ
 8001aac:	2040      	movs	r0, #64	@ 0x40
 8001aae:	f7ff ffaf 	bl	8001a10 <OLED_I2C_SendByte>
	/*ĺž?çŻCountćŹĄďźčżč?čżçť?çć°ć?ĺĺĽ*/
	for (i = 0; i < Count; i ++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e009      	b.n	8001acc <OLED_WriteData+0x36>
	{
		OLED_I2C_SendByte(Data[i]);	//äžć?ĄĺéDataçćŻä¸ä¸?ć°ćŽ
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ffa5 	bl	8001a10 <OLED_I2C_SendByte>
	for (i = 0; i < Count; i ++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3f1      	bcc.n	8001ab8 <OLED_WriteData+0x22>

	}
	OLED_I2C_Stop();				//I2Cçťć??
 8001ad4:	f7ff ff8f 	bl	80019f6 <OLED_I2C_Stop>
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <OLED_Init>:

void OLED_Init(GPIO_TypeDef* GPIOx,uint16_t SDA,uint16_t SCl,uint8_t IF_0_96)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
	OLED_Pin.GPIOx =GPIOx;
 8001afa:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <OLED_Init+0xd0>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6013      	str	r3, [r2, #0]
	OLED_Pin.SCl = SCl;
 8001b00:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <OLED_Init+0xd0>)
 8001b02:	893b      	ldrh	r3, [r7, #8]
 8001b04:	80d3      	strh	r3, [r2, #6]
	OLED_Pin.SDA = SDA;
 8001b06:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <OLED_Init+0xd0>)
 8001b08:	897b      	ldrh	r3, [r7, #10]
 8001b0a:	8093      	strh	r3, [r2, #4]
	OLED_Pin.ScreenSize__96 = IF_0_96;
 8001b0c:	4a28      	ldr	r2, [pc, #160]	@ (8001bb0 <OLED_Init+0xd0>)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	7213      	strb	r3, [r2, #8]

	OLED_GPIO_Init();			//ĺč°ç¨ĺşĺąççŤ?ĺŁĺĺ§ĺ
 8001b12:	f7ff ff3f 	bl	8001994 <OLED_GPIO_Init>

	OLED_WriteCommand(0xAE);	//čŽžç˝Žćžç¤şĺźĺ?/ĺłé­ďź?0xAEĺłé­ďź?0xAFĺźĺ?
 8001b16:	20ae      	movs	r0, #174	@ 0xae
 8001b18:	f7ff ffa6 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xD5);	//čŽžç˝Žćžç¤şćśéĺé?ćŻ/ć?čĄĺ¨é˘ç
 8001b1c:	20d5      	movs	r0, #213	@ 0xd5
 8001b1e:	f7ff ffa3 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 8001b22:	2080      	movs	r0, #128	@ 0x80
 8001b24:	f7ff ffa0 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);	//čŽžç˝Žĺ¤čˇŻĺ¤ç¨ç?
 8001b28:	20a8      	movs	r0, #168	@ 0xa8
 8001b2a:	f7ff ff9d 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 8001b2e:	203f      	movs	r0, #63	@ 0x3f
 8001b30:	f7ff ff9a 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xD3);	//čŽžç˝Žćžç¤şĺç§ť
 8001b34:	20d3      	movs	r0, #211	@ 0xd3
 8001b36:	f7ff ff97 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff ff94 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x40);	//čŽžç˝Žćžç¤şĺźĺ§č?ďź0x40~0x7F
 8001b40:	2040      	movs	r0, #64	@ 0x40
 8001b42:	f7ff ff91 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);	//čŽžç˝ŽĺˇŚĺłćšĺďź?0xA1ć­Łĺ¸¸ďź?0xA0ĺˇŚĺłĺç˝Ž
 8001b46:	20a1      	movs	r0, #161	@ 0xa1
 8001b48:	f7ff ff8e 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xC8);	//čŽžç˝Žä¸ä¸ćšĺďź?0xC8ć­Łĺ¸¸ďź?0xC0ä¸ä¸ĺç˝Ž
 8001b4c:	20c8      	movs	r0, #200	@ 0xc8
 8001b4e:	f7ff ff8b 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xDA);	//čŽžç˝ŽCOMĺźčçĄ?äťśéç˝?
 8001b52:	20da      	movs	r0, #218	@ 0xda
 8001b54:	f7ff ff88 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8001b58:	2012      	movs	r0, #18
 8001b5a:	f7ff ff85 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x81);	//čŽžç˝ŽĺŻšćŻĺş?
 8001b5e:	2081      	movs	r0, #129	@ 0x81
 8001b60:	f7ff ff82 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8001b64:	20cf      	movs	r0, #207	@ 0xcf
 8001b66:	f7ff ff7f 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xD9);	//čŽžç˝Žé˘ĺçľĺ¨ć?
 8001b6a:	20d9      	movs	r0, #217	@ 0xd9
 8001b6c:	f7ff ff7c 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8001b70:	20f1      	movs	r0, #241	@ 0xf1
 8001b72:	f7ff ff79 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xDB);	//čŽžç˝ŽVCOMHĺćśéćŠçş§ĺŤ
 8001b76:	20db      	movs	r0, #219	@ 0xdb
 8001b78:	f7ff ff76 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8001b7c:	2030      	movs	r0, #48	@ 0x30
 8001b7e:	f7ff ff73 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);	//čŽžç˝Žć´ä¸Şćžç¤şćĺź/ĺłé­
 8001b82:	20a4      	movs	r0, #164	@ 0xa4
 8001b84:	f7ff ff70 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xA6);	//čŽžç˝Žć­Łĺ¸¸/ĺč˛ćžç¤şďź?0xA6ć­Łĺ¸¸ďź?0xA7ĺč˛
 8001b88:	20a6      	movs	r0, #166	@ 0xa6
 8001b8a:	f7ff ff6d 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x8D);	//čŽžç˝Žĺçľćł?
 8001b8e:	208d      	movs	r0, #141	@ 0x8d
 8001b90:	f7ff ff6a 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8001b94:	2014      	movs	r0, #20
 8001b96:	f7ff ff67 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0xAF);	//ĺźĺ?ćžç¤ş
 8001b9a:	20af      	movs	r0, #175	@ 0xaf
 8001b9c:	f7ff ff64 	bl	8001a68 <OLED_WriteCommand>

	OLED_Clear();				//ć¸çŠşćžĺ­ć°çť
 8001ba0:	f000 f854 	bl	8001c4c <OLED_Clear>
	OLED_Update();				//ć´ć°ćžç¤şďźć¸ĺąďźé˛ć?˘ĺĺ§ĺĺćŞćžç¤şĺĺ?šćśčąĺą
 8001ba4:	f000 f832 	bl	8001c0c <OLED_Update>
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000648 	.word	0x20000648

08001bb4 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t Page, uint8_t X)//(0~7,0~127)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71bb      	strb	r3, [r7, #6]
	if(OLED_Pin.ScreenSize__96 == 0){
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <OLED_SetCursor+0x54>)
 8001bc6:	7a1b      	ldrb	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <OLED_SetCursor+0x1e>
		X += 2;//1.3 inch OLED screen
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	71bb      	strb	r3, [r7, #6]
	}
	OLED_WriteCommand(0xB0 | Page);					//čŽžç˝ŽéĄľä˝ç˝?
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff44 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//čŽžç˝ŽXä˝ç˝ŽéŤ?4ä˝?
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3b 	bl	8001a68 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//čŽžç˝ŽXä˝ç˝Žä˝?4ä˝?
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff34 	bl	8001a68 <OLED_WriteCommand>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000648 	.word	0x20000648

08001c0c <OLED_Update>:
	}
	return 0;		//ä¸ćťĄčśłäťĽä¸ćĄäťśďźĺĺ¤ć?ĺ¤ĺŽćĺŽçšä¸ĺ¨ćĺŽč?ĺşŚ
}

void OLED_Update(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t j;
	/*éĺćŻä¸éĄ?*/
	for (j = 0; j < 8; j ++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e00f      	b.n	8001c38 <OLED_Update+0x2c>
	{
		/*čŽžç˝Žĺć ä˝ç˝Žä¸şćŻä¸éĄľççŹ?ä¸ĺ?*/
		OLED_SetCursor(j, 0);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ffc9 	bl	8001bb4 <OLED_SetCursor>
		/*čżçť­ĺĺĽ128ä¸?ć°ćŽďźĺ°ćžĺ­ć°çťçć°ć?ĺĺĽĺ°OLEDçĄ?äť?*/
		OLED_WriteData(OLED_DisplayBuf[j], 128);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <OLED_Update+0x3c>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff32 	bl	8001a96 <OLED_WriteData>
	for (j = 0; j < 8; j ++)
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	3301      	adds	r3, #1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b07      	cmp	r3, #7
 8001c3c:	d9ec      	bls.n	8001c18 <OLED_Update+0xc>
	}
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000248 	.word	0x20000248

08001c4c <OLED_Clear>:
  * ĺ?    ć°ďźć?
  * čż? ĺ? ĺźďźć?
  * čŻ?    ćďźč°ç¨ć­¤ĺ˝ć°ĺďźč?ćłçć?Łĺ°ĺç°ĺ¨ĺąĺšä¸ďźčżéč°ç¨ć´ć°ĺ˝ć°
  */
void OLED_Clear(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j ++)				//éĺ8éĄ?
 8001c52:	2300      	movs	r3, #0
 8001c54:	71bb      	strb	r3, [r7, #6]
 8001c56:	e014      	b.n	8001c82 <OLED_Clear+0x36>
	{
		for (i = 0; i < 128; i ++)			//éĺ128ĺ?
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	e00a      	b.n	8001c74 <OLED_Clear+0x28>
		{
			OLED_DisplayBuf[j][i] = 0x00;	//ĺ°ćžĺ­ć°çťć°ć?ĺ¨é¨ć¸éś
 8001c5e:	79ba      	ldrb	r2, [r7, #6]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <OLED_Clear+0x48>)
 8001c64:	01d2      	lsls	r2, r2, #7
 8001c66:	440a      	add	r2, r1
 8001c68:	4413      	add	r3, r2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 128; i ++)			//éĺ128ĺ?
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	3301      	adds	r3, #1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	daf0      	bge.n	8001c5e <OLED_Clear+0x12>
	for (j = 0; j < 8; j ++)				//éĺ8éĄ?
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	71bb      	strb	r3, [r7, #6]
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d9e7      	bls.n	8001c58 <OLED_Clear+0xc>
		}
	}
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000248 	.word	0x20000248

08001c98 <OLED_ClearArea>:
  * ĺ?    ć°ďźHeight ćĺŽĺşĺçéŤĺşŚďźčĺ´ďź?0~64
  * čż? ĺ? ĺźďźć?
  * čŻ?    ćďźč°ç¨ć­¤ĺ˝ć°ĺďźč?ćłçć?Łĺ°ĺç°ĺ¨ĺąĺšä¸ďźčżéč°ç¨ć´ć°ĺ˝ć°
  */
void OLED_ClearArea(int16_t X, int16_t Y, uint8_t Width, uint8_t Height)
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	80fb      	strh	r3, [r7, #6]
 8001caa:	4603      	mov	r3, r0
 8001cac:	80bb      	strh	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	70bb      	strb	r3, [r7, #2]
	int16_t i, j;

	for (j = Y; j < Y + Height; j ++)		//éĺćĺŽéĄ?
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	81bb      	strh	r3, [r7, #12]
 8001cba:	e052      	b.n	8001d62 <OLED_ClearArea+0xca>
	{
		for (i = X; i < X + Width; i ++)	//éĺćĺŽĺ?
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	81fb      	strh	r3, [r7, #14]
 8001cc0:	e041      	b.n	8001d46 <OLED_ClearArea+0xae>
		{
			if (i >= 0 && i <= 127 && j >=0 && j <= 63)				//čśĺşĺąĺšçĺĺŽšä¸ćžç¤ş
 8001cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db37      	blt.n	8001d3a <OLED_ClearArea+0xa2>
 8001cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cce:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cd0:	dc33      	bgt.n	8001d3a <OLED_ClearArea+0xa2>
 8001cd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db2f      	blt.n	8001d3a <OLED_ClearArea+0xa2>
 8001cda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ce0:	dc2b      	bgt.n	8001d3a <OLED_ClearArea+0xa2>
			{
				OLED_DisplayBuf[j / 8][i] &= ~(0x01 << (j % 8));	//ĺ°ćžĺ­ć°çťćĺŽć°ć?ć¸éś
 8001ce2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da00      	bge.n	8001cec <OLED_ClearArea+0x54>
 8001cea:	3307      	adds	r3, #7
 8001cec:	10db      	asrs	r3, r3, #3
 8001cee:	b218      	sxth	r0, r3
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cf6:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <OLED_ClearArea+0xe8>)
 8001cf8:	01d2      	lsls	r2, r2, #7
 8001cfa:	440a      	add	r2, r1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d06:	4259      	negs	r1, r3
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	f001 0107 	and.w	r1, r1, #7
 8001d10:	bf58      	it	pl
 8001d12:	424b      	negpl	r3, r1
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	2301      	movs	r3, #1
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	4013      	ands	r3, r2
 8001d24:	b259      	sxtb	r1, r3
 8001d26:	4602      	mov	r2, r0
 8001d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d2c:	b2c8      	uxtb	r0, r1
 8001d2e:	4914      	ldr	r1, [pc, #80]	@ (8001d80 <OLED_ClearArea+0xe8>)
 8001d30:	01d2      	lsls	r2, r2, #7
 8001d32:	440a      	add	r2, r1
 8001d34:	4413      	add	r3, r2
 8001d36:	4602      	mov	r2, r0
 8001d38:	701a      	strb	r2, [r3, #0]
		for (i = X; i < X + Width; i ++)	//éĺćĺŽĺ?
 8001d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d4a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	440b      	add	r3, r1
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbb5      	blt.n	8001cc2 <OLED_ClearArea+0x2a>
	for (j = Y; j < Y + Height; j ++)		//éĺćĺŽéĄ?
 8001d56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	81bb      	strh	r3, [r7, #12]
 8001d62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d66:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d6a:	78bb      	ldrb	r3, [r7, #2]
 8001d6c:	440b      	add	r3, r1
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dba4      	blt.n	8001cbc <OLED_ClearArea+0x24>
			}
		}
	}
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc90      	pop	{r4, r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000248 	.word	0x20000248

08001d84 <OLED_ShowChar>:
  *                 OLED_6X8		ĺŽ?6ĺç´ ďźéŤ8ĺç´ 
  * čż? ĺ? ĺźďźć?
  * čŻ?    ćďźč°ç¨ć­¤ĺ˝ć°ĺďźč?ćłçć?Łĺ°ĺç°ĺ¨ĺąĺšä¸ďźčżéč°ç¨ć´ć°ĺ˝ć°
  */
void OLED_ShowChar(int16_t X, int16_t Y, char Char, uint8_t FontSize)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	80fb      	strh	r3, [r7, #6]
 8001d96:	4603      	mov	r3, r0
 8001d98:	80bb      	strh	r3, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	70bb      	strb	r3, [r7, #2]
	if (FontSize == OLED_8X16)		//ĺ­ä˝ä¸şĺ??8ĺç´ ďźéŤ16ĺç´ 
 8001da2:	78bb      	ldrb	r3, [r7, #2]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d10e      	bne.n	8001dc6 <OLED_ShowChar+0x42>
	{
		/*ĺ°ASCIIĺ­ć¨ĄĺşOLED_F8x16çćĺŽć°ć?äť?8*16çĺžĺć źĺźćžç¤?*/
		OLED_ShowImage(X, Y, 8, 16, OLED_F8x16[Char - ' ']);
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	3b20      	subs	r3, #32
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <OLED_ShowChar+0x74>)
 8001db0:	4413      	add	r3, r2
 8001db2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001db6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	f000 f84e 	bl	8001e60 <OLED_ShowImage>
	else if(FontSize == OLED_6X8)	//ĺ­ä˝ä¸şĺ??6ĺç´ ďźéŤ8ĺç´ 
	{
		/*ĺ°ASCIIĺ­ć¨ĄĺşOLED_F6x8çćĺŽć°ć?äť?6*8çĺžĺć źĺźćžç¤?*/
		OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
	}
}
 8001dc4:	e014      	b.n	8001df0 <OLED_ShowChar+0x6c>
	else if(FontSize == OLED_6X8)	//ĺ­ä˝ä¸şĺ??6ĺç´ ďźéŤ8ĺç´ 
 8001dc6:	78bb      	ldrb	r3, [r7, #2]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d111      	bne.n	8001df0 <OLED_ShowChar+0x6c>
		OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f1a3 0220 	sub.w	r2, r3, #32
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <OLED_ShowChar+0x78>)
 8001ddc:	4413      	add	r3, r2
 8001dde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001de2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2308      	movs	r3, #8
 8001dea:	2206      	movs	r2, #6
 8001dec:	f000 f838 	bl	8001e60 <OLED_ShowImage>
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	0800a318 	.word	0x0800a318
 8001dfc:	0800a908 	.word	0x0800a908

08001e00 <OLED_ShowString>:
  *                 OLED_6X8		ĺŽ?6ĺç´ ďźéŤ8ĺç´ 
  * čż? ĺ? ĺźďźć?
  * čŻ?    ćďźč°ç¨ć­¤ĺ˝ć°ĺďźč?ćłçć?Łĺ°ĺç°ĺ¨ĺąĺšä¸ďźčżéč°ç¨ć´ć°ĺ˝ć°
  */
void OLED_ShowString(int16_t X, int16_t Y, char *String, uint8_t FontSize)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	81fb      	strh	r3, [r7, #14]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	81bb      	strh	r3, [r7, #12]
 8001e12:	4613      	mov	r3, r2
 8001e14:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)		//éĺĺ­ç?Śä¸˛çćŻä¸?ĺ­ç??
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
 8001e1a:	e016      	b.n	8001e4a <OLED_ShowString+0x4a>
	{
		/*č°ç¨OLED_ShowCharĺ˝ć°ďźäžćŹĄćžç¤şćŻä¸?ĺ­ç??*/
		OLED_ShowChar(X + i * FontSize, Y, String[i], FontSize);
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	79fa      	ldrb	r2, [r7, #7]
 8001e22:	b292      	uxth	r2, r2
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b218      	sxth	r0, r3
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	4413      	add	r3, r2
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001e40:	f7ff ffa0 	bl	8001d84 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)		//éĺĺ­ç?Śä¸˛çćŻä¸?ĺ­ç??
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	3301      	adds	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e2      	bne.n	8001e1c <OLED_ShowString+0x1c>
	}
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <OLED_ShowImage>:
		}
	}
}
//(X_posotion , Y_position , image_Width , image_Height , Image_array[])
void OLED_ShowImage(int16_t X, int16_t Y, uint8_t Width, uint8_t Height, const uint8_t *Image)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4604      	mov	r4, r0
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	4603      	mov	r3, r0
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, j = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	2300      	movs	r3, #0
 8001e84:	73bb      	strb	r3, [r7, #14]
	int16_t Page, Shift;

	/*ĺ°ĺžĺćĺ¨ĺşĺć¸çŠ?*/
	OLED_ClearArea(X, Y, Width, Height);
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001e92:	f7ff ff01 	bl	8001c98 <OLED_ClearArea>

	/*éĺćĺŽĺžĺćśĺçç¸ĺłéĄľ*/
	/*(Height - 1) / 8 + 1ççŽçćŻHeight / 8ĺšśĺä¸ĺć?*/
	for (j = 0; j < (Height - 1) / 8 + 1; j ++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	73bb      	strb	r3, [r7, #14]
 8001e9a:	e0b3      	b.n	8002004 <OLED_ShowImage+0x1a4>
	{
		/*éĺćĺŽĺžĺćśĺçç¸ĺłĺ*/
		for (i = 0; i < Width; i ++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e0a8      	b.n	8001ff4 <OLED_ShowImage+0x194>
		{
			if (X + i >= 0 && X + i <= 127)		//čśĺşĺąĺšçĺĺŽšä¸ćžç¤ş
 8001ea2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f2c0 809f 	blt.w	8001fee <OLED_ShowImage+0x18e>
 8001eb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eba:	f300 8098 	bgt.w	8001fee <OLED_ShowImage+0x18e>
			{
				/*č´ć°ĺć ĺ¨č?ĄçŽéĄľĺ°ĺĺç§ťä˝ćśéčŚĺ ä¸ä¸?ĺç§ť*/
				Page = Y / 8;
 8001ebe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da00      	bge.n	8001ec8 <OLED_ShowImage+0x68>
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	10db      	asrs	r3, r3, #3
 8001eca:	81bb      	strh	r3, [r7, #12]
				Shift = Y % 8;
 8001ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ed0:	425a      	negs	r2, r3
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	f002 0207 	and.w	r2, r2, #7
 8001eda:	bf58      	it	pl
 8001edc:	4253      	negpl	r3, r2
 8001ede:	817b      	strh	r3, [r7, #10]
				if (Y < 0)
 8001ee0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da07      	bge.n	8001ef8 <OLED_ShowImage+0x98>
				{
					Page -= 1;
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	81bb      	strh	r3, [r7, #12]
					Shift += 8;
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	817b      	strh	r3, [r7, #10]
				}

				if (Page + j >= 0 && Page + j <= 7)		//čśĺşĺąĺšçĺĺŽšä¸ćžç¤ş
 8001ef8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001efc:	7bbb      	ldrb	r3, [r7, #14]
 8001efe:	4413      	add	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db34      	blt.n	8001f6e <OLED_ShowImage+0x10e>
 8001f04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	dc2e      	bgt.n	8001f6e <OLED_ShowImage+0x10e>
				{
					/*ćžç¤şĺžĺĺ¨ĺ˝ĺéĄľçĺĺŽ?*/
					OLED_DisplayBuf[Page + j][X + i] |= Image[j * Width + i] << (Shift);
 8001f10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	441a      	add	r2, r3
 8001f18:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	440b      	add	r3, r1
 8001f20:	4940      	ldr	r1, [pc, #256]	@ (8002024 <OLED_ShowImage+0x1c4>)
 8001f22:	01d2      	lsls	r2, r2, #7
 8001f24:	440a      	add	r2, r1
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	78f9      	ldrb	r1, [r7, #3]
 8001f30:	fb03 f101 	mul.w	r1, r3, r1
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	440b      	add	r3, r1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	440b      	add	r3, r1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b258      	sxtb	r0, r3
 8001f50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	441a      	add	r2, r3
 8001f58:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	440b      	add	r3, r1
 8001f60:	b2c0      	uxtb	r0, r0
 8001f62:	4930      	ldr	r1, [pc, #192]	@ (8002024 <OLED_ShowImage+0x1c4>)
 8001f64:	01d2      	lsls	r2, r2, #7
 8001f66:	440a      	add	r2, r1
 8001f68:	4413      	add	r3, r2
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	701a      	strb	r2, [r3, #0]
				}

				if (Page + j + 1 >= 0 && Page + j + 1 <= 7)		//čśĺşĺąĺšçĺĺŽšä¸ćžç¤ş
 8001f6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	4413      	add	r3, r2
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	db38      	blt.n	8001fee <OLED_ShowImage+0x18e>
 8001f7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	4413      	add	r3, r2
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	dc32      	bgt.n	8001fee <OLED_ShowImage+0x18e>
				{
					/*ćžç¤şĺžĺĺ¨ä¸ä¸éĄľçĺĺ??*/
					OLED_DisplayBuf[Page + j + 1][X + i] |= Image[j * Width + i] >> (8 - Shift);
 8001f88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	4413      	add	r3, r2
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	440b      	add	r3, r1
 8001f9a:	4922      	ldr	r1, [pc, #136]	@ (8002024 <OLED_ShowImage+0x1c4>)
 8001f9c:	01d2      	lsls	r2, r2, #7
 8001f9e:	440a      	add	r2, r1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b25a      	sxtb	r2, r3
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	78f9      	ldrb	r1, [r7, #3]
 8001faa:	fb03 f101 	mul.w	r1, r3, r1
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	440b      	add	r3, r1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fc0:	f1c3 0308 	rsb	r3, r3, #8
 8001fc4:	fa41 f303 	asr.w	r3, r1, r3
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b258      	sxtb	r0, r3
 8001fce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	440b      	add	r3, r1
 8001fe0:	b2c0      	uxtb	r0, r0
 8001fe2:	4910      	ldr	r1, [pc, #64]	@ (8002024 <OLED_ShowImage+0x1c4>)
 8001fe4:	01d2      	lsls	r2, r2, #7
 8001fe6:	440a      	add	r2, r1
 8001fe8:	4413      	add	r3, r2
 8001fea:	4602      	mov	r2, r0
 8001fec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < Width; i ++)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f4ff af52 	bcc.w	8001ea2 <OLED_ShowImage+0x42>
	for (j = 0; j < (Height - 1) / 8 + 1; j ++)
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	73bb      	strb	r3, [r7, #14]
 8002004:	78bb      	ldrb	r3, [r7, #2]
 8002006:	3b01      	subs	r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	da00      	bge.n	800200e <OLED_ShowImage+0x1ae>
 800200c:	3307      	adds	r3, #7
 800200e:	10db      	asrs	r3, r3, #3
 8002010:	461a      	mov	r2, r3
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	429a      	cmp	r2, r3
 8002016:	f6bf af41 	bge.w	8001e9c <OLED_ShowImage+0x3c>
				}
			}
		}
	}
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	20000248 	.word	0x20000248

08002028 <OLED_Printf>:
FontSize OLED6X8,OLED8X16
type{%d(integer),%s(String),%f(float),%c(char),%o(8),%x(10)}
depend on your type
*/
void OLED_Printf(int16_t X, int16_t Y, uint8_t FontSize, char *format, ...)
{
 8002028:	b408      	push	{r3}
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b0c4      	sub	sp, #272	@ 0x110
 800202e:	af00      	add	r7, sp, #0
 8002030:	4604      	mov	r4, r0
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800203e:	4622      	mov	r2, r4
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204a:	4602      	mov	r2, r0
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002052:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8002056:	460a      	mov	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
	char String[256];
	va_list arg;
	va_start(arg, format);
 800205a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800205e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002066:	601a      	str	r2, [r3, #0]
	vsprintf(String, format, arg);
 8002068:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800206c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002070:	f107 0010 	add.w	r0, r7, #16
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800207a:	f004 f9fb 	bl	8006474 <vsiprintf>
	va_end(arg);
	OLED_ShowString(X, Y, String, FontSize);
 800207e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002082:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8002086:	781c      	ldrb	r4, [r3, #0]
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002094:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800209c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80020a0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80020a4:	4623      	mov	r3, r4
 80020a6:	f7ff feab 	bl	8001e00 <OLED_ShowString>
}
 80020aa:	bf00      	nop
 80020ac:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020b6:	b001      	add	sp, #4
 80020b8:	4770      	bx	lr
	...

080020bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a20      	ldr	r2, [pc, #128]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <MX_GPIO_Init+0xb4>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <MX_GPIO_Init+0xb4>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <MX_GPIO_Init+0xb4>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_GPIO_Init+0xb4>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2103      	movs	r1, #3
 800211c:	4815      	ldr	r0, [pc, #84]	@ (8002174 <MX_GPIO_Init+0xb8>)
 800211e:	f000 ff1d 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002128:	4813      	ldr	r0, [pc, #76]	@ (8002178 <MX_GPIO_Init+0xbc>)
 800212a:	f000 ff17 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800212e:	2303      	movs	r3, #3
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002132:	2301      	movs	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	4619      	mov	r1, r3
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <MX_GPIO_Init+0xb8>)
 8002146:	f000 fd85 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800214a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800214e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_GPIO_Init+0xbc>)
 8002164:	f000 fd76 	bl	8002c54 <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00

0800217c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <MX_I2C1_Init+0x50>)
 8002182:	4a13      	ldr	r2, [pc, #76]	@ (80021d0 <MX_I2C1_Init+0x54>)
 8002184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_I2C1_Init+0x50>)
 8002188:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <MX_I2C1_Init+0x58>)
 800218a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_I2C1_Init+0x50>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_I2C1_Init+0x50>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_I2C1_Init+0x50>)
 800219a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800219e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <MX_I2C1_Init+0x50>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_I2C1_Init+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <MX_I2C1_Init+0x50>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_I2C1_Init+0x50>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_I2C1_Init+0x50>)
 80021ba:	f000 fee7 	bl	8002f8c <HAL_I2C_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021c4:	f000 f90d 	bl	80023e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000654 	.word	0x20000654
 80021d0:	40005400 	.word	0x40005400
 80021d4:	00061a80 	.word	0x00061a80

080021d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a15      	ldr	r2, [pc, #84]	@ (8002248 <HAL_I2C_MspInit+0x70>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d123      	bne.n	8002240 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <HAL_I2C_MspInit+0x74>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a13      	ldr	r2, [pc, #76]	@ (800224c <HAL_I2C_MspInit+0x74>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_I2C_MspInit+0x74>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002210:	23c0      	movs	r3, #192	@ 0xc0
 8002212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002214:	2312      	movs	r3, #18
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4619      	mov	r1, r3
 8002222:	480b      	ldr	r0, [pc, #44]	@ (8002250 <HAL_I2C_MspInit+0x78>)
 8002224:	f000 fd16 	bl	8002c54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_I2C_MspInit+0x74>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a07      	ldr	r2, [pc, #28]	@ (800224c <HAL_I2C_MspInit+0x74>)
 800222e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_I2C_MspInit+0x74>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40005400 	.word	0x40005400
 800224c:	40021000 	.word	0x40021000
 8002250:	40010c00 	.word	0x40010c00

08002254 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d102      	bne.n	800226c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  MPU6050_Get_Angle(&MM);
 8002266:	4803      	ldr	r0, [pc, #12]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002268:	f7ff f93a 	bl	80014e0 <MPU6050_Get_Angle>
	  //MPU6050_Get_Angle_Plus(&MM);
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200006a8 	.word	0x200006a8

08002278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002280:	f000 fb54 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002284:	f000 f868 	bl	8002358 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uint32_t speed = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228c:	f7ff ff16 	bl	80020bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002290:	f7ff ff74 	bl	800217c <MX_I2C1_Init>
  MX_TIM2_Init();
 8002294:	f000 f9dc 	bl	8002650 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002298:	f000 fa26 	bl	80026e8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800229c:	f000 faaa 	bl	80027f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(GPIOB,GPIO_PIN_11,GPIO_PIN_10,1);
 80022a0:	2301      	movs	r3, #1
 80022a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022aa:	4824      	ldr	r0, [pc, #144]	@ (800233c <main+0xc4>)
 80022ac:	f7ff fc18 	bl	8001ae0 <OLED_Init>
  MPU6050_init(&hi2c1);
 80022b0:	4823      	ldr	r0, [pc, #140]	@ (8002340 <main+0xc8>)
 80022b2:	f7ff f8ef 	bl	8001494 <MPU6050_init>
  HAL_TIM_Base_Start_IT(&htim2);
 80022b6:	4823      	ldr	r0, [pc, #140]	@ (8002344 <main+0xcc>)
 80022b8:	f002 fb2e 	bl	8004918 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OLED_Clear();
 80022bc:	f7ff fcc6 	bl	8001c4c <OLED_Clear>
	  TIM_Speed_Check_Start(&htim4);
 80022c0:	4821      	ldr	r0, [pc, #132]	@ (8002348 <main+0xd0>)
 80022c2:	f7fe ff3d 	bl	8001140 <TIM_Speed_Check_Start>
	  OLED_Printf(0,0,6,"pitch:%.2f",MM.pitch);
	  OLED_Printf(0,8,6,"roll:%.2f",MM.roll);
	  OLED_Printf(0,16,6,"yaw:%.2f",MM.yaw);
	  OLED_Printf(0,26,6,"%d",speed);
	  */
	  OLED_Printf(0,26,6,"%d",speed);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <main+0xd4>)
 80022cc:	2206      	movs	r2, #6
 80022ce:	211a      	movs	r1, #26
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff fea9 	bl	8002028 <OLED_Printf>
	  printf("%.3f,%.3f,%.3f\n",MM.roll-2,MM.pitch+2,MM.yaw);
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <main+0xd8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fc46 	bl	8000b70 <__aeabi_fsub>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f89e 	bl	8000428 <__aeabi_f2d>
 80022ec:	4680      	mov	r8, r0
 80022ee:	4689      	mov	r9, r1
 80022f0:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <main+0xd8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fc3b 	bl	8000b74 <__addsf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f891 	bl	8000428 <__aeabi_f2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <main+0xd8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f88a 	bl	8000428 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800231c:	e9cd 4500 	strd	r4, r5, [sp]
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	480b      	ldr	r0, [pc, #44]	@ (8002354 <main+0xdc>)
 8002326:	f004 f819 	bl	800635c <iprintf>

	  OLED_Update();
 800232a:	f7ff fc6f 	bl	8001c0c <OLED_Update>
	  //HAL_Delay(10);
	  TIM_Speed_Check_Stop(&htim4,&speed);
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4805      	ldr	r0, [pc, #20]	@ (8002348 <main+0xd0>)
 8002334:	f7fe ff30 	bl	8001198 <TIM_Speed_Check_Stop>
	  OLED_Clear();
 8002338:	bf00      	nop
 800233a:	e7bf      	b.n	80022bc <main+0x44>
 800233c:	40010c00 	.word	0x40010c00
 8002340:	20000654 	.word	0x20000654
 8002344:	200006b8 	.word	0x200006b8
 8002348:	20000700 	.word	0x20000700
 800234c:	0800a300 	.word	0x0800a300
 8002350:	200006a8 	.word	0x200006a8
 8002354:	0800a304 	.word	0x0800a304

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b090      	sub	sp, #64	@ 0x40
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0318 	add.w	r3, r7, #24
 8002362:	2228      	movs	r2, #40	@ 0x28
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f004 f88e 	bl	8006488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002388:	2301      	movs	r3, #1
 800238a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238c:	2302      	movs	r3, #2
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002396:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fe59 	bl	8004058 <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023ac:	f000 f819 	bl	80023e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b0:	230f      	movs	r3, #15
 80023b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b4:	2302      	movs	r3, #2
 80023b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 f8c6 	bl	800455c <HAL_RCC_ClockConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023d6:	f000 f804 	bl	80023e2 <Error_Handler>
  }
}
 80023da:	bf00      	nop
 80023dc:	3740      	adds	r7, #64	@ 0x40
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e6:	b672      	cpsid	i
}
 80023e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <Error_Handler+0x8>
	...

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a14      	ldr	r2, [pc, #80]	@ (800244c <HAL_MspInit+0x5c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0e      	ldr	r2, [pc, #56]	@ (800244c <HAL_MspInit+0x5c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_MspInit+0x60>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_MspInit+0x60>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <NMI_Handler+0x4>

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <MemManage_Handler+0x4>

0800246c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <UsageFault_Handler+0x4>

0800247c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 fa88 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <TIM2_IRQHandler+0x10>)
 80024b2:	f002 fab1 	bl	8004a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200006b8 	.word	0x200006b8

080024c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return 1;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <_kill>:

int _kill(int pid, int sig)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024d8:	f004 f828 	bl	800652c <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	2216      	movs	r2, #22
 80024e0:	601a      	str	r2, [r3, #0]
  return -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_exit>:

void _exit (int status)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024f6:	f04f 31ff 	mov.w	r1, #4294967295
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffe7 	bl	80024ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <_exit+0x12>

08002504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e00a      	b.n	800252c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002516:	f3af 8000 	nop.w
 800251a:	4601      	mov	r1, r0
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	b2ca      	uxtb	r2, r1
 8002524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	dbf0      	blt.n	8002516 <_read+0x12>
  }

  return len;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e009      	b.n	8002564 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fddf 	bl	800111c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3301      	adds	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	dbf1      	blt.n	8002550 <_write+0x12>
  }
  return len;
 800256c:	687b      	ldr	r3, [r7, #4]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_close>:

int _close(int file)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800259c:	605a      	str	r2, [r3, #4]
  return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <_isatty>:

int _isatty(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	@ (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	@ (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f003 ff90 	bl	800652c <__errno>
 800260c:	4603      	mov	r3, r0
 800260e:	220c      	movs	r2, #12
 8002610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	@ (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20005000 	.word	0x20005000
 8002638:	00000400 	.word	0x00000400
 800263c:	200006b4 	.word	0x200006b4
 8002640:	200008e0 	.word	0x200008e0

08002644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	463b      	mov	r3, r7
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800266e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002676:	2247      	movs	r2, #71	@ 0x47
 8002678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 8002680:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002682:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002690:	2280      	movs	r2, #128	@ 0x80
 8002692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002694:	4813      	ldr	r0, [pc, #76]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002696:	f002 f8ef 	bl	8004878 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026a0:	f7ff fe9f 	bl	80023e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4619      	mov	r1, r3
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <MX_TIM2_Init+0x94>)
 80026b2:	f002 faa1 	bl	8004bf8 <HAL_TIM_ConfigClockSource>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026bc:	f7ff fe91 	bl	80023e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <MX_TIM2_Init+0x94>)
 80026ce:	f002 fc83 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026d8:	f7ff fe83 	bl	80023e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200006b8 	.word	0x200006b8

080026e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fc:	463b      	mov	r3, r7
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002704:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <MX_TIM4_Init+0x94>)
 8002706:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <MX_TIM4_Init+0x98>)
 8002708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MX_TIM4_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <MX_TIM4_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <MX_TIM4_Init+0x94>)
 8002718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800271c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MX_TIM4_Init+0x94>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_TIM4_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800272a:	4814      	ldr	r0, [pc, #80]	@ (800277c <MX_TIM4_Init+0x94>)
 800272c:	f002 f8a4 	bl	8004878 <HAL_TIM_Base_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002736:	f7ff fe54 	bl	80023e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	4619      	mov	r1, r3
 8002746:	480d      	ldr	r0, [pc, #52]	@ (800277c <MX_TIM4_Init+0x94>)
 8002748:	f002 fa56 	bl	8004bf8 <HAL_TIM_ConfigClockSource>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002752:	f7ff fe46 	bl	80023e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	4806      	ldr	r0, [pc, #24]	@ (800277c <MX_TIM4_Init+0x94>)
 8002764:	f002 fc38 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800276e:	f7ff fe38 	bl	80023e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000700 	.word	0x20000700
 8002780:	40000800 	.word	0x40000800

08002784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002794:	d114      	bne.n	80027c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	201c      	movs	r0, #28
 80027b4:	f000 fa17 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027b8:	201c      	movs	r0, #28
 80027ba:	f000 fa30 	bl	8002c1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027be:	e010      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_TIM_Base_MspInit+0x6c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10b      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	61d3      	str	r3, [r2, #28]
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40000800 	.word	0x40000800

080027f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <MX_USART1_UART_Init+0x50>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 8002800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	@ (8002840 <MX_USART1_UART_Init+0x4c>)
 800282c:	f002 fc44 	bl	80050b8 <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002836:	f7ff fdd4 	bl	80023e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000748 	.word	0x20000748
 8002844:	40013800 	.word	0x40013800

08002848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_UART_MspInit+0x8c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d131      	bne.n	80028cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 800286e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a14      	ldr	r2, [pc, #80]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_UART_MspInit+0x90>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800289c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4619      	mov	r1, r3
 80028ac:	480b      	ldr	r0, [pc, #44]	@ (80028dc <HAL_UART_MspInit+0x94>)
 80028ae:	f000 f9d1 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <HAL_UART_MspInit+0x94>)
 80028c8:	f000 f9c4 	bl	8002c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010800 	.word	0x40010800

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e0:	f7ff feb0 	bl	8002644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480b      	ldr	r0, [pc, #44]	@ (8002914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e6:	490c      	ldr	r1, [pc, #48]	@ (8002918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028fc:	4c09      	ldr	r4, [pc, #36]	@ (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f003 fe15 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff fcb3 	bl	8002278 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800291c:	0800b020 	.word	0x0800b020
  ldr r2, =_sbss
 8002920:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002924:	200008e0 	.word	0x200008e0

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_Init+0x28>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <HAL_Init+0x28>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f947 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	200f      	movs	r0, #15
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fd52 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f95f 	bl	8002c3a <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 f927 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000008 	.word	0x20000008
 80029b0:	20000010 	.word	0x20000010
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_IncTick+0x1c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_IncTick+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <HAL_IncTick+0x20>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000010 	.word	0x20000010
 80029d8:	20000790 	.word	0x20000790

080029dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <HAL_GetTick+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000790 	.word	0x20000790

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff fff0 	bl	80029dc <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffe0 	bl	80029dc <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000010 	.word	0x20000010

08002a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <__NVIC_GetPriorityGrouping+0x18>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0307 	and.w	r3, r3, #7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db0b      	blt.n	8002ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4906      	ldr	r1, [pc, #24]	@ (8002ad0 <__NVIC_EnableIRQ+0x34>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	@ (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	@ (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	@ 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff90 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff2d 	bl	8002a38 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff42 	bl	8002a80 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff90 	bl	8002b28 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5f 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff35 	bl	8002a9c <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b08b      	sub	sp, #44	@ 0x2c
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	e169      	b.n	8002f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8158 	bne.w	8002f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ef4 <HAL_GPIO_Init+0x2a0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d05e      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002c90:	4a98      	ldr	r2, [pc, #608]	@ (8002ef4 <HAL_GPIO_Init+0x2a0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d875      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002c96:	4a98      	ldr	r2, [pc, #608]	@ (8002ef8 <HAL_GPIO_Init+0x2a4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d058      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002c9c:	4a96      	ldr	r2, [pc, #600]	@ (8002ef8 <HAL_GPIO_Init+0x2a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d86f      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002ca2:	4a96      	ldr	r2, [pc, #600]	@ (8002efc <HAL_GPIO_Init+0x2a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d052      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002ca8:	4a94      	ldr	r2, [pc, #592]	@ (8002efc <HAL_GPIO_Init+0x2a8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d869      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cae:	4a94      	ldr	r2, [pc, #592]	@ (8002f00 <HAL_GPIO_Init+0x2ac>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04c      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002cb4:	4a92      	ldr	r2, [pc, #584]	@ (8002f00 <HAL_GPIO_Init+0x2ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d863      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cba:	4a92      	ldr	r2, [pc, #584]	@ (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d046      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002cc0:	4a90      	ldr	r2, [pc, #576]	@ (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d85d      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d82a      	bhi.n	8002d20 <HAL_GPIO_Init+0xcc>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d859      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cce:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd4 <HAL_GPIO_Init+0x80>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002d4f 	.word	0x08002d4f
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002d3b 	.word	0x08002d3b
 8002ce0:	08002d7d 	.word	0x08002d7d
 8002ce4:	08002d83 	.word	0x08002d83
 8002ce8:	08002d83 	.word	0x08002d83
 8002cec:	08002d83 	.word	0x08002d83
 8002cf0:	08002d83 	.word	0x08002d83
 8002cf4:	08002d83 	.word	0x08002d83
 8002cf8:	08002d83 	.word	0x08002d83
 8002cfc:	08002d83 	.word	0x08002d83
 8002d00:	08002d83 	.word	0x08002d83
 8002d04:	08002d83 	.word	0x08002d83
 8002d08:	08002d83 	.word	0x08002d83
 8002d0c:	08002d83 	.word	0x08002d83
 8002d10:	08002d83 	.word	0x08002d83
 8002d14:	08002d83 	.word	0x08002d83
 8002d18:	08002d31 	.word	0x08002d31
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	4a79      	ldr	r2, [pc, #484]	@ (8002f08 <HAL_GPIO_Init+0x2b4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d26:	e02c      	b.n	8002d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e029      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	3304      	adds	r3, #4
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e024      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e01f      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e01a      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d56:	2304      	movs	r3, #4
 8002d58:	623b      	str	r3, [r7, #32]
          break;
 8002d5a:	e013      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d64:	2308      	movs	r3, #8
 8002d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	611a      	str	r2, [r3, #16]
          break;
 8002d6e:	e009      	b.n	8002d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d70:	2308      	movs	r3, #8
 8002d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	615a      	str	r2, [r3, #20]
          break;
 8002d7a:	e003      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
          break;
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          break;
 8002d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2bff      	cmp	r3, #255	@ 0xff
 8002d88:	d801      	bhi.n	8002d8e <HAL_GPIO_Init+0x13a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	e001      	b.n	8002d92 <HAL_GPIO_Init+0x13e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	@ 0xff
 8002d98:	d802      	bhi.n	8002da0 <HAL_GPIO_Init+0x14c>
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x152>
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	3b08      	subs	r3, #8
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	210f      	movs	r1, #15
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80b1 	beq.w	8002f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b4a      	ldr	r3, [pc, #296]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dec:	4a48      	ldr	r2, [pc, #288]	@ (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	220f      	movs	r2, #15
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a40      	ldr	r2, [pc, #256]	@ (8002f14 <HAL_GPIO_Init+0x2c0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_GPIO_Init+0x1ec>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f18 <HAL_GPIO_Init+0x2c4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_GPIO_Init+0x1e8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3e      	ldr	r2, [pc, #248]	@ (8002f1c <HAL_GPIO_Init+0x2c8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_GPIO_Init+0x1e4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_GPIO_Init+0x1e0>
 8002e30:	2303      	movs	r3, #3
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e004      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e40:	2300      	movs	r3, #0
 8002e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e52:	492f      	ldr	r1, [pc, #188]	@ (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	492c      	ldr	r1, [pc, #176]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4928      	ldr	r1, [pc, #160]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e94:	4b23      	ldr	r3, [pc, #140]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4922      	ldr	r1, [pc, #136]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	491e      	ldr	r1, [pc, #120]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4918      	ldr	r1, [pc, #96]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eca:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4914      	ldr	r1, [pc, #80]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d021      	beq.n	8002f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	490e      	ldr	r1, [pc, #56]	@ (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e021      	b.n	8002f36 <HAL_GPIO_Init+0x2e2>
 8002ef2:	bf00      	nop
 8002ef4:	10320000 	.word	0x10320000
 8002ef8:	10310000 	.word	0x10310000
 8002efc:	10220000 	.word	0x10220000
 8002f00:	10210000 	.word	0x10210000
 8002f04:	10120000 	.word	0x10120000
 8002f08:	10110000 	.word	0x10110000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010800 	.word	0x40010800
 8002f18:	40010c00 	.word	0x40010c00
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40011400 	.word	0x40011400
 8002f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	4909      	ldr	r1, [pc, #36]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	3301      	adds	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f ae8e 	bne.w	8002c68 <HAL_GPIO_Init+0x14>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	372c      	adds	r7, #44	@ 0x2c
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e12b      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff f910 	bl	80021d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f001 fbfc 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a81      	ldr	r2, [pc, #516]	@ (8003200 <HAL_I2C_Init+0x274>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d807      	bhi.n	8003010 <HAL_I2C_Init+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a80      	ldr	r2, [pc, #512]	@ (8003204 <HAL_I2C_Init+0x278>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e006      	b.n	800301e <HAL_I2C_Init+0x92>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a7d      	ldr	r2, [pc, #500]	@ (8003208 <HAL_I2C_Init+0x27c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0e7      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a78      	ldr	r2, [pc, #480]	@ (800320c <HAL_I2C_Init+0x280>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9b      	lsrs	r3, r3, #18
 8003030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a6a      	ldr	r2, [pc, #424]	@ (8003200 <HAL_I2C_Init+0x274>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d802      	bhi.n	8003060 <HAL_I2C_Init+0xd4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	e009      	b.n	8003074 <HAL_I2C_Init+0xe8>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a69      	ldr	r2, [pc, #420]	@ (8003210 <HAL_I2C_Init+0x284>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	3301      	adds	r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	495c      	ldr	r1, [pc, #368]	@ (8003200 <HAL_I2C_Init+0x274>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d819      	bhi.n	80030c8 <HAL_I2C_Init+0x13c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a2:	1c59      	adds	r1, r3, #1
 80030a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030a8:	400b      	ands	r3, r1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_I2C_Init+0x138>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e59      	subs	r1, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	e051      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e04f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <HAL_I2C_Init+0x168>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e012      	b.n	800311a <HAL_I2C_Init+0x18e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Init+0x196>
 800311e:	2301      	movs	r3, #1
 8003120:	e022      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <HAL_I2C_Init+0x1bc>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e58      	subs	r0, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	440b      	add	r3, r1
 8003138:	fbb0 f3f3 	udiv	r3, r0, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003146:	e00f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	0099      	lsls	r1, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	4313      	orrs	r3, r2
 800316e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6911      	ldr	r1, [r2, #16]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	000186a0 	.word	0x000186a0
 8003204:	001e847f 	.word	0x001e847f
 8003208:	003d08ff 	.word	0x003d08ff
 800320c:	431bde83 	.word	0x431bde83
 8003210:	10624dd3 	.word	0x10624dd3

08003214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff fbd5 	bl	80029dc <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80d9 	bne.w	80033f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	496d      	ldr	r1, [pc, #436]	@ (8003400 <HAL_I2C_Mem_Write+0x1ec>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fccd 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	e0cc      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Write+0x56>
 8003266:	2302      	movs	r3, #2
 8003268:	e0c5      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2221      	movs	r2, #33	@ 0x21
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	@ (8003404 <HAL_I2C_Mem_Write+0x1f0>)
 80032d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4603      	mov	r3, r0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fb04 	bl	80038f0 <I2C_RequestMemoryWrite>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d052      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fd92 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d11b      	bne.n	8003394 <HAL_I2C_Mem_Write+0x180>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1aa      	bne.n	80032f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fd85 	bl	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e016      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000

08003408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	@ 0x30
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003426:	f7ff fad9 	bl	80029dc <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	f040 8250 	bne.w	80038da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2319      	movs	r3, #25
 8003440:	2201      	movs	r2, #1
 8003442:	4982      	ldr	r1, [pc, #520]	@ (800364c <HAL_I2C_Mem_Read+0x244>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fbd1 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	e243      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Mem_Read+0x5a>
 800345e:	2302      	movs	r3, #2
 8003460:	e23c      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d007      	beq.n	8003488 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2222      	movs	r2, #34	@ 0x22
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2240      	movs	r2, #64	@ 0x40
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a62      	ldr	r2, [pc, #392]	@ (8003650 <HAL_I2C_Mem_Read+0x248>)
 80034c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ca:	88f8      	ldrh	r0, [r7, #6]
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	8979      	ldrh	r1, [r7, #10]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4603      	mov	r3, r0
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa9e 	bl	8003a1c <I2C_RequestMemoryRead>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1f8      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e1cc      	b.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	2b01      	cmp	r3, #1
 8003520:	d11e      	bne.n	8003560 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003530:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003532:	b672      	cpsid	i
}
 8003534:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800355c:	b662      	cpsie	i
}
 800355e:	e035      	b.n	80035cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	2b02      	cmp	r3, #2
 8003566:	d11e      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003576:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a2:	b662      	cpsie	i
}
 80035a4:	e012      	b.n	80035cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035cc:	e172      	b.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 811f 	bhi.w	8003816 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d123      	bne.n	8003628 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fcab 	bl	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e173      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003626:	e145      	b.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b02      	cmp	r3, #2
 800362e:	d152      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	4906      	ldr	r1, [pc, #24]	@ (8003654 <HAL_I2C_Mem_Read+0x24c>)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fad6 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e148      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000
 8003654:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003658:	b672      	cpsid	i
}
 800365a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800369e:	b662      	cpsie	i
}
 80036a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036d4:	e0ee      	b.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	2200      	movs	r2, #0
 80036de:	4981      	ldr	r1, [pc, #516]	@ (80038e4 <HAL_I2C_Mem_Read+0x4dc>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa83 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0f5      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003700:	b672      	cpsid	i
}
 8003702:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003736:	4b6c      	ldr	r3, [pc, #432]	@ (80038e8 <HAL_I2C_Mem_Read+0x4e0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	4a6b      	ldr	r2, [pc, #428]	@ (80038ec <HAL_I2C_Mem_Read+0x4e4>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a1a      	lsrs	r2, r3, #8
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00da      	lsls	r2, r3, #3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	3b01      	subs	r3, #1
 8003754:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d118      	bne.n	800378e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800377e:	b662      	cpsie	i
}
 8003780:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0a6      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d1d9      	bne.n	8003750 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037de:	b662      	cpsie	i
}
 80037e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003814:	e04e      	b.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fb90 	bl	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e058      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d124      	bne.n	80038b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003880:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f47f ae88 	bne.w	80035ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3728      	adds	r7, #40	@ 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00010004 	.word	0x00010004
 80038e8:	20000008 	.word	0x20000008
 80038ec:	14f8b589 	.word	0x14f8b589

080038f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2200      	movs	r2, #0
 8003922:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f960 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003940:	d103      	bne.n	800394a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e05f      	b.n	8003a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800395c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	492d      	ldr	r1, [pc, #180]	@ (8003a18 <I2C_RequestMemoryWrite+0x128>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f9bb 	bl	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04c      	b.n	8003a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fa46 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d107      	bne.n	80039b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e02b      	b.n	8003a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039bc:	893b      	ldrh	r3, [r7, #8]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	e021      	b.n	8003a0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fa20 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d107      	bne.n	80039fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e005      	b.n	8003a0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	00010002 	.word	0x00010002

08003a1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	4608      	mov	r0, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	813b      	strh	r3, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f8c2 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	d103      	bne.n	8003a86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0aa      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8a:	897b      	ldrh	r3, [r7, #10]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	4952      	ldr	r1, [pc, #328]	@ (8003be8 <I2C_RequestMemoryRead+0x1cc>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f91d 	bl	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e097      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	6a39      	ldr	r1, [r7, #32]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9a8 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d107      	bne.n	8003aee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e076      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	e021      	b.n	8003b48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	6a39      	ldr	r1, [r7, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f982 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d107      	bne.n	8003b3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e050      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4a:	6a39      	ldr	r1, [r7, #32]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f967 	bl	8003e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e035      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f82b 	bl	8003bec <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003baa:	d103      	bne.n	8003bb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e013      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bb8:	897b      	ldrh	r3, [r7, #10]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	6a3a      	ldr	r2, [r7, #32]
 8003bcc:	4906      	ldr	r1, [pc, #24]	@ (8003be8 <I2C_RequestMemoryRead+0x1cc>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f886 	bl	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	00010002 	.word	0x00010002

08003bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	e048      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d044      	beq.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fe fee9 	bl	80029dc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d139      	bne.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d10d      	bne.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	e00c      	b.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d116      	bne.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e023      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d10d      	bne.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	e00c      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d093      	beq.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cee:	e071      	b.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfe:	d123      	bne.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e067      	b.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d041      	beq.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7fe fe44 	bl	80029dc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d136      	bne.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e00b      	b.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e021      	b.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10c      	bne.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e00b      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f47f af6d 	bne.w	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e2c:	e034      	b.n	8003e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f8e3 	bl	8003ffa <I2C_IsAcknowledgeFailed>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e034      	b.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d028      	beq.n	8003e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe fdc9 	bl	80029dc <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11d      	bne.n	8003e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	d016      	beq.n	8003e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e007      	b.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea2:	2b80      	cmp	r3, #128	@ 0x80
 8003ea4:	d1c3      	bne.n	8003e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ebc:	e034      	b.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f89b 	bl	8003ffa <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e034      	b.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d028      	beq.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fd81 	bl	80029dc <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11d      	bne.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d016      	beq.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e007      	b.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d1c3      	bne.n	8003ebe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f4c:	e049      	b.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d119      	bne.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e030      	b.n	8003ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe fd24 	bl	80029dc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b40      	cmp	r3, #64	@ 0x40
 8003fb2:	d016      	beq.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d1ae      	bne.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004010:	d11b      	bne.n	800404a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800401a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
	...

08004058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e272      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8087 	beq.w	8004186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004078:	4b92      	ldr	r3, [pc, #584]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b04      	cmp	r3, #4
 8004082:	d00c      	beq.n	800409e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004084:	4b8f      	ldr	r3, [pc, #572]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d112      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
 8004090:	4b8c      	ldr	r3, [pc, #560]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d10b      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409e:	4b89      	ldr	r3, [pc, #548]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06c      	beq.n	8004184 <HAL_RCC_OscConfig+0x12c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d168      	bne.n	8004184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e24c      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x76>
 80040c0:	4b80      	ldr	r3, [pc, #512]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7f      	ldr	r2, [pc, #508]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e02e      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x98>
 80040d6:	4b7b      	ldr	r3, [pc, #492]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7a      	ldr	r2, [pc, #488]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a77      	ldr	r2, [pc, #476]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0xbc>
 80040fa:	4b72      	ldr	r3, [pc, #456]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a71      	ldr	r2, [pc, #452]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6e      	ldr	r2, [pc, #440]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 8004114:	4b6b      	ldr	r3, [pc, #428]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6a      	ldr	r2, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800412a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe fc52 	bl	80029dc <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fc4e 	bl	80029dc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e200      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xe4>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fc3e 	bl	80029dc <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fc3a 	bl	80029dc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1ec      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x10c>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004192:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800419e:	4b49      	ldr	r3, [pc, #292]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x18c>
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b43      	ldr	r3, [pc, #268]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x176>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c0      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4939      	ldr	r1, [pc, #228]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_RCC_OscConfig+0x270>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fbf3 	bl	80029dc <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe fbef 	bl	80029dc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1a1      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b2a      	ldr	r3, [pc, #168]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4927      	ldr	r1, [pc, #156]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b26      	ldr	r3, [pc, #152]	@ (80042c8 <HAL_RCC_OscConfig+0x270>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fe fbd2 	bl	80029dc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423c:	f7fe fbce 	bl	80029dc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e180      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03a      	beq.n	80042dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d019      	beq.n	80042a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b17      	ldr	r3, [pc, #92]	@ (80042cc <HAL_RCC_OscConfig+0x274>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004274:	f7fe fbb2 	bl	80029dc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427c:	f7fe fbae 	bl	80029dc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e160      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800429a:	2001      	movs	r0, #1
 800429c:	f000 face 	bl	800483c <RCC_Delay>
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_RCC_OscConfig+0x274>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fe fb98 	bl	80029dc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ae:	e00f      	b.n	80042d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fe fb94 	bl	80029dc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d908      	bls.n	80042d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e146      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	42420000 	.word	0x42420000
 80042cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b92      	ldr	r3, [pc, #584]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e9      	bne.n	80042b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a6 	beq.w	8004436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b8b      	ldr	r3, [pc, #556]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4a87      	ldr	r2, [pc, #540]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004304:	61d3      	str	r3, [r2, #28]
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b82      	ldr	r3, [pc, #520]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b7f      	ldr	r3, [pc, #508]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7e      	ldr	r2, [pc, #504]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fe fb55 	bl	80029dc <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fe fb51 	bl	80029dc <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	@ 0x64
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e103      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b75      	ldr	r3, [pc, #468]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x312>
 800435c:	4b6f      	ldr	r3, [pc, #444]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a6e      	ldr	r2, [pc, #440]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6213      	str	r3, [r2, #32]
 8004368:	e02d      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x334>
 8004372:	4b6a      	ldr	r3, [pc, #424]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a69      	ldr	r2, [pc, #420]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	4b67      	ldr	r3, [pc, #412]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a66      	ldr	r2, [pc, #408]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	e01c      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d10c      	bne.n	80043ae <HAL_RCC_OscConfig+0x356>
 8004394:	4b61      	ldr	r3, [pc, #388]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4a60      	ldr	r2, [pc, #384]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6213      	str	r3, [r2, #32]
 80043a0:	4b5e      	ldr	r3, [pc, #376]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a5d      	ldr	r2, [pc, #372]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 80043ae:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a5a      	ldr	r2, [pc, #360]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6213      	str	r3, [r2, #32]
 80043ba:	4b58      	ldr	r3, [pc, #352]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a57      	ldr	r2, [pc, #348]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d015      	beq.n	80043fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fe fb05 	bl	80029dc <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fe fb01 	bl	80029dc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0b1      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCC_OscConfig+0x37e>
 80043f8:	e014      	b.n	8004424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fa:	f7fe faef 	bl	80029dc <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fe faeb 	bl	80029dc <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e09b      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	4b40      	ldr	r3, [pc, #256]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b3c      	ldr	r3, [pc, #240]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4a3b      	ldr	r2, [pc, #236]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8087 	beq.w	800454e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004440:	4b36      	ldr	r3, [pc, #216]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d061      	beq.n	8004510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d146      	bne.n	80044e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b33      	ldr	r3, [pc, #204]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fe fabf 	bl	80029dc <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe fabb 	bl	80029dc <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e06d      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	4b29      	ldr	r3, [pc, #164]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004488:	d108      	bne.n	800449c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4921      	ldr	r1, [pc, #132]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a19      	ldr	r1, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	491b      	ldr	r1, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fe fa8f 	bl	80029dc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe fa8b 	bl	80029dc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e03d      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x46a>
 80044e0:	e035      	b.n	800454e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fe fa78 	bl	80029dc <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fe fa74 	bl	80029dc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e026      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x498>
 800450e:	e01e      	b.n	800454e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e019      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_OscConfig+0x500>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	429a      	cmp	r2, r3
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0d0      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b67      	ldr	r3, [pc, #412]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	4965      	ldr	r1, [pc, #404]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b63      	ldr	r3, [pc, #396]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b59      	ldr	r3, [pc, #356]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a58      	ldr	r2, [pc, #352]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a52      	ldr	r2, [pc, #328]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	494d      	ldr	r1, [pc, #308]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b41      	ldr	r3, [pc, #260]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e073      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3d      	ldr	r3, [pc, #244]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06b      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4936      	ldr	r1, [pc, #216]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fe f9c6 	bl	80029dc <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe f9c2 	bl	80029dc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e053      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b27      	ldr	r3, [pc, #156]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d210      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 0207 	bic.w	r2, r3, #7
 8004692:	4922      	ldr	r1, [pc, #136]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e032      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4916      	ldr	r1, [pc, #88]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	490e      	ldr	r1, [pc, #56]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ea:	f000 f821 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490a      	ldr	r1, [pc, #40]	@ (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <HAL_RCC_ClockConfig+0x1cc>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <HAL_RCC_ClockConfig+0x1d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe f924 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	0800ab44 	.word	0x0800ab44
 8004728:	20000008 	.word	0x20000008
 800472c:	2000000c 	.word	0x2000000c

08004730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800474a:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b04      	cmp	r3, #4
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x30>
 800475a:	2b08      	cmp	r3, #8
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x36>
 800475e:	e027      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004760:	4b19      	ldr	r3, [pc, #100]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004762:	613b      	str	r3, [r7, #16]
      break;
 8004764:	e027      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	0c9b      	lsrs	r3, r3, #18
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d010      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800477e:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	0c5b      	lsrs	r3, r3, #17
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	4a11      	ldr	r2, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004792:	fb03 f202 	mul.w	r2, r3, r2
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e004      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	613b      	str	r3, [r7, #16]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80047b2:	613b      	str	r3, [r7, #16]
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	693b      	ldr	r3, [r7, #16]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	0800ab5c 	.word	0x0800ab5c
 80047d0:	0800ab6c 	.word	0x0800ab6c
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b02      	ldr	r3, [pc, #8]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000008 	.word	0x20000008

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff2 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	@ (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	0800ab54 	.word	0x0800ab54

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffde 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	@ (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	0800ab54 	.word	0x0800ab54

0800483c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <RCC_Delay+0x34>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <RCC_Delay+0x38>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0a5b      	lsrs	r3, r3, #9
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004858:	bf00      	nop
  }
  while (Delay --);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	60fa      	str	r2, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f9      	bne.n	8004858 <RCC_Delay+0x1c>
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	20000008 	.word	0x20000008
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e041      	b.n	800490e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd ff70 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 fa8a 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e03a      	b.n	80049a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a18      	ldr	r2, [pc, #96]	@ (80049b0 <HAL_TIM_Base_Start_IT+0x98>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00e      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0x58>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d009      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0x58>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0x58>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d111      	bne.n	8004994 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b06      	cmp	r3, #6
 8004980:	d010      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	e007      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800

080049bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_TIM_Base_Stop_IT+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_Base_Stop_IT+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d020      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0202 	mvn.w	r2, #2
 8004a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f998 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f98b 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f99a 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0204 	mvn.w	r2, #4
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f972 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f965 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f974 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0208 	mvn.w	r2, #8
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f94c 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f93f 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f94e 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0210 	mvn.w	r2, #16
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2208      	movs	r2, #8
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f926 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f919 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f928 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0201 	mvn.w	r2, #1
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fb68 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa7f 	bl	80050a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8f8 	bl	8004dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0220 	mvn.w	r2, #32
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa52 	bl	8005094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_ConfigClockSource+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0b4      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x186>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4c:	d03e      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0xd4>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c52:	f200 8087 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5a:	f000 8086 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x172>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c62:	d87f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b70      	cmp	r3, #112	@ 0x70
 8004c66:	d01a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xa6>
 8004c68:	2b70      	cmp	r3, #112	@ 0x70
 8004c6a:	d87b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b60      	cmp	r3, #96	@ 0x60
 8004c6e:	d050      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x11a>
 8004c70:	2b60      	cmp	r3, #96	@ 0x60
 8004c72:	d877      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b50      	cmp	r3, #80	@ 0x50
 8004c76:	d03c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c78:	2b50      	cmp	r3, #80	@ 0x50
 8004c7a:	d873      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d058      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x13a>
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d86f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b30      	cmp	r3, #48	@ 0x30
 8004c86:	d064      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b30      	cmp	r3, #48	@ 0x30
 8004c8a:	d86b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d060      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d867      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d05a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	f000 f974 	bl	8004f9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
      break;
 8004cca:	e04f      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	f000 f95d 	bl	8004f9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e03c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 f8d4 	bl	8004eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2150      	movs	r1, #80	@ 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f92b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e02c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 f8f2 	bl	8004f08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2160      	movs	r1, #96	@ 0x60
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f91b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e01c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 f8b4 	bl	8004eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	@ 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f90b 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 f902 	bl	8004f66 <TIM_ITRx_SetConfig>
      break;
 8004d62:	e003      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e000      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
	...

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea0 <TIM_Base_SetConfig+0xd0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea4 <TIM_Base_SetConfig+0xd4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <TIM_Base_SetConfig+0xd8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a22      	ldr	r2, [pc, #136]	@ (8004ea0 <TIM_Base_SetConfig+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea4 <TIM_Base_SetConfig+0xd4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <TIM_Base_SetConfig+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea0 <TIM_Base_SetConfig+0xd0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]
  }
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800

08004eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 030a 	bic.w	r3, r3, #10
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0210 	bic.w	r2, r3, #16
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	031b      	lsls	r3, r3, #12
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f043 0307 	orr.w	r3, r3, #7
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	021a      	lsls	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e046      	b.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a16      	ldr	r2, [pc, #88]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d009      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a12      	ldr	r2, [pc, #72]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a10      	ldr	r2, [pc, #64]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10c      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4313      	orrs	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800

08005094 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e042      	b.n	8005150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd fbb2 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	@ 0x24
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f971 	bl	80053e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	@ 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d175      	bne.n	8005264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_UART_Transmit+0x2c>
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e06e      	b.n	8005266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2221      	movs	r2, #33	@ 0x21
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005196:	f7fd fc21 	bl	80029dc <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b0:	d108      	bne.n	80051c4 <HAL_UART_Transmit+0x6c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e003      	b.n	80051cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051cc:	e02e      	b.n	800522c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2180      	movs	r1, #128	@ 0x80
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f848 	bl	800526e <UART_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e03a      	b.n	8005266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	3302      	adds	r3, #2
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e007      	b.n	800521e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1cb      	bne.n	80051ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	2140      	movs	r1, #64	@ 0x40
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f814 	bl	800526e <UART_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e006      	b.n	8005266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527e:	e03b      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d037      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005288:	f7fd fba8 	bl	80029dc <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	429a      	cmp	r2, r3
 8005296:	d302      	bcc.n	800529e <UART_WaitOnFlagUntilTimeout+0x30>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e03a      	b.n	8005318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d020      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d01d      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d116      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f81d 	bl	8005320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e00f      	b.n	8005318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	d0b4      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005320:	b480      	push	{r7}
 8005322:	b095      	sub	sp, #84	@ 0x54
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800533e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005348:	643a      	str	r2, [r7, #64]	@ 0x40
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800534e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3314      	adds	r3, #20
 8005362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	61fb      	str	r3, [r7, #28]
   return(result);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800537c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800537e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	2b01      	cmp	r3, #1
 8005396:	d119      	bne.n	80053cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b8:	61ba      	str	r2, [r7, #24]
 80053ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	613b      	str	r3, [r7, #16]
   return(result);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e5      	bne.n	8005398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053da:	bf00      	nop
 80053dc:	3754      	adds	r7, #84	@ 0x54
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800541e:	f023 030c 	bic.w	r3, r3, #12
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	430b      	orrs	r3, r1
 800542a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <UART_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d103      	bne.n	8005454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7ff f9e2 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	e002      	b.n	800545a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7ff f9ca 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a22      	ldr	r2, [pc, #136]	@ (80054fc <UART_SetConfig+0x118>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	0119      	lsls	r1, r3, #4
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009a      	lsls	r2, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <UART_SetConfig+0x118>)
 8005492:	fba3 0302 	umull	r0, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2064      	movs	r0, #100	@ 0x64
 800549a:	fb00 f303 	mul.w	r3, r0, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	3332      	adds	r3, #50	@ 0x32
 80054a4:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <UART_SetConfig+0x118>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b0:	4419      	add	r1, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c8:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <UART_SetConfig+0x118>)
 80054ca:	fba3 0302 	umull	r0, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2064      	movs	r0, #100	@ 0x64
 80054d2:	fb00 f303 	mul.w	r3, r0, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	3332      	adds	r3, #50	@ 0x32
 80054dc:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <UART_SetConfig+0x118>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	440a      	add	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40013800 	.word	0x40013800
 80054fc:	51eb851f 	.word	0x51eb851f

08005500 <__cvt>:
 8005500:	2b00      	cmp	r3, #0
 8005502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005506:	461d      	mov	r5, r3
 8005508:	bfbb      	ittet	lt
 800550a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800550e:	461d      	movlt	r5, r3
 8005510:	2300      	movge	r3, #0
 8005512:	232d      	movlt	r3, #45	@ 0x2d
 8005514:	b088      	sub	sp, #32
 8005516:	4614      	mov	r4, r2
 8005518:	bfb8      	it	lt
 800551a:	4614      	movlt	r4, r2
 800551c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800551e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005520:	7013      	strb	r3, [r2, #0]
 8005522:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005524:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005528:	f023 0820 	bic.w	r8, r3, #32
 800552c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005530:	d005      	beq.n	800553e <__cvt+0x3e>
 8005532:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005536:	d100      	bne.n	800553a <__cvt+0x3a>
 8005538:	3601      	adds	r6, #1
 800553a:	2302      	movs	r3, #2
 800553c:	e000      	b.n	8005540 <__cvt+0x40>
 800553e:	2303      	movs	r3, #3
 8005540:	aa07      	add	r2, sp, #28
 8005542:	9204      	str	r2, [sp, #16]
 8005544:	aa06      	add	r2, sp, #24
 8005546:	e9cd a202 	strd	sl, r2, [sp, #8]
 800554a:	e9cd 3600 	strd	r3, r6, [sp]
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	f001 f8b5 	bl	80066c0 <_dtoa_r>
 8005556:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800555a:	4607      	mov	r7, r0
 800555c:	d119      	bne.n	8005592 <__cvt+0x92>
 800555e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005560:	07db      	lsls	r3, r3, #31
 8005562:	d50e      	bpl.n	8005582 <__cvt+0x82>
 8005564:	eb00 0906 	add.w	r9, r0, r6
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fb fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005574:	b108      	cbz	r0, 800557a <__cvt+0x7a>
 8005576:	f8cd 901c 	str.w	r9, [sp, #28]
 800557a:	2230      	movs	r2, #48	@ 0x30
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	454b      	cmp	r3, r9
 8005580:	d31e      	bcc.n	80055c0 <__cvt+0xc0>
 8005582:	4638      	mov	r0, r7
 8005584:	9b07      	ldr	r3, [sp, #28]
 8005586:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005588:	1bdb      	subs	r3, r3, r7
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	b008      	add	sp, #32
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005596:	eb00 0906 	add.w	r9, r0, r6
 800559a:	d1e5      	bne.n	8005568 <__cvt+0x68>
 800559c:	7803      	ldrb	r3, [r0, #0]
 800559e:	2b30      	cmp	r3, #48	@ 0x30
 80055a0:	d10a      	bne.n	80055b8 <__cvt+0xb8>
 80055a2:	2200      	movs	r2, #0
 80055a4:	2300      	movs	r3, #0
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fb f9fd 	bl	80009a8 <__aeabi_dcmpeq>
 80055ae:	b918      	cbnz	r0, 80055b8 <__cvt+0xb8>
 80055b0:	f1c6 0601 	rsb	r6, r6, #1
 80055b4:	f8ca 6000 	str.w	r6, [sl]
 80055b8:	f8da 3000 	ldr.w	r3, [sl]
 80055bc:	4499      	add	r9, r3
 80055be:	e7d3      	b.n	8005568 <__cvt+0x68>
 80055c0:	1c59      	adds	r1, r3, #1
 80055c2:	9107      	str	r1, [sp, #28]
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e7d9      	b.n	800557c <__cvt+0x7c>

080055c8 <__exponent>:
 80055c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	bfb6      	itet	lt
 80055ce:	232d      	movlt	r3, #45	@ 0x2d
 80055d0:	232b      	movge	r3, #43	@ 0x2b
 80055d2:	4249      	neglt	r1, r1
 80055d4:	2909      	cmp	r1, #9
 80055d6:	7002      	strb	r2, [r0, #0]
 80055d8:	7043      	strb	r3, [r0, #1]
 80055da:	dd29      	ble.n	8005630 <__exponent+0x68>
 80055dc:	f10d 0307 	add.w	r3, sp, #7
 80055e0:	461d      	mov	r5, r3
 80055e2:	270a      	movs	r7, #10
 80055e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80055e8:	461a      	mov	r2, r3
 80055ea:	fb07 1416 	mls	r4, r7, r6, r1
 80055ee:	3430      	adds	r4, #48	@ 0x30
 80055f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055f4:	460c      	mov	r4, r1
 80055f6:	2c63      	cmp	r4, #99	@ 0x63
 80055f8:	4631      	mov	r1, r6
 80055fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80055fe:	dcf1      	bgt.n	80055e4 <__exponent+0x1c>
 8005600:	3130      	adds	r1, #48	@ 0x30
 8005602:	1e94      	subs	r4, r2, #2
 8005604:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005608:	4623      	mov	r3, r4
 800560a:	1c41      	adds	r1, r0, #1
 800560c:	42ab      	cmp	r3, r5
 800560e:	d30a      	bcc.n	8005626 <__exponent+0x5e>
 8005610:	f10d 0309 	add.w	r3, sp, #9
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	42ac      	cmp	r4, r5
 8005618:	bf88      	it	hi
 800561a:	2300      	movhi	r3, #0
 800561c:	3302      	adds	r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	1a18      	subs	r0, r3, r0
 8005622:	b003      	add	sp, #12
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005626:	f813 6b01 	ldrb.w	r6, [r3], #1
 800562a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800562e:	e7ed      	b.n	800560c <__exponent+0x44>
 8005630:	2330      	movs	r3, #48	@ 0x30
 8005632:	3130      	adds	r1, #48	@ 0x30
 8005634:	7083      	strb	r3, [r0, #2]
 8005636:	70c1      	strb	r1, [r0, #3]
 8005638:	1d03      	adds	r3, r0, #4
 800563a:	e7f1      	b.n	8005620 <__exponent+0x58>

0800563c <_printf_float>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	b091      	sub	sp, #68	@ 0x44
 8005642:	460c      	mov	r4, r1
 8005644:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005648:	4616      	mov	r6, r2
 800564a:	461f      	mov	r7, r3
 800564c:	4605      	mov	r5, r0
 800564e:	f000 ff23 	bl	8006498 <_localeconv_r>
 8005652:	6803      	ldr	r3, [r0, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	9308      	str	r3, [sp, #32]
 8005658:	f7fa fd7a 	bl	8000150 <strlen>
 800565c:	2300      	movs	r3, #0
 800565e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005660:	f8d8 3000 	ldr.w	r3, [r8]
 8005664:	9009      	str	r0, [sp, #36]	@ 0x24
 8005666:	3307      	adds	r3, #7
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	f103 0208 	add.w	r2, r3, #8
 8005670:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005674:	f8d4 b000 	ldr.w	fp, [r4]
 8005678:	f8c8 2000 	str.w	r2, [r8]
 800567c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005680:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005686:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800568a:	f04f 32ff 	mov.w	r2, #4294967295
 800568e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005692:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005696:	4b9c      	ldr	r3, [pc, #624]	@ (8005908 <_printf_float+0x2cc>)
 8005698:	f7fb f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800569c:	bb70      	cbnz	r0, 80056fc <_printf_float+0xc0>
 800569e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056a2:	f04f 32ff 	mov.w	r2, #4294967295
 80056a6:	4b98      	ldr	r3, [pc, #608]	@ (8005908 <_printf_float+0x2cc>)
 80056a8:	f7fb f992 	bl	80009d0 <__aeabi_dcmple>
 80056ac:	bb30      	cbnz	r0, 80056fc <_printf_float+0xc0>
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4640      	mov	r0, r8
 80056b4:	4649      	mov	r1, r9
 80056b6:	f7fb f981 	bl	80009bc <__aeabi_dcmplt>
 80056ba:	b110      	cbz	r0, 80056c2 <_printf_float+0x86>
 80056bc:	232d      	movs	r3, #45	@ 0x2d
 80056be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c2:	4a92      	ldr	r2, [pc, #584]	@ (800590c <_printf_float+0x2d0>)
 80056c4:	4b92      	ldr	r3, [pc, #584]	@ (8005910 <_printf_float+0x2d4>)
 80056c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80056ca:	bf94      	ite	ls
 80056cc:	4690      	movls	r8, r2
 80056ce:	4698      	movhi	r8, r3
 80056d0:	2303      	movs	r3, #3
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	f02b 0304 	bic.w	r3, fp, #4
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	4633      	mov	r3, r6
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	9700      	str	r7, [sp, #0]
 80056e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80056e8:	f000 f9d4 	bl	8005a94 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	f040 8090 	bne.w	8005812 <_printf_float+0x1d6>
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	b011      	add	sp, #68	@ 0x44
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fb f982 	bl	8000a0c <__aeabi_dcmpun>
 8005708:	b148      	cbz	r0, 800571e <_printf_float+0xe2>
 800570a:	464b      	mov	r3, r9
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfb8      	it	lt
 8005710:	232d      	movlt	r3, #45	@ 0x2d
 8005712:	4a80      	ldr	r2, [pc, #512]	@ (8005914 <_printf_float+0x2d8>)
 8005714:	bfb8      	it	lt
 8005716:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800571a:	4b7f      	ldr	r3, [pc, #508]	@ (8005918 <_printf_float+0x2dc>)
 800571c:	e7d3      	b.n	80056c6 <_printf_float+0x8a>
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	d13f      	bne.n	80057a8 <_printf_float+0x16c>
 8005728:	2306      	movs	r3, #6
 800572a:	6063      	str	r3, [r4, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	9206      	str	r2, [sp, #24]
 8005736:	aa0e      	add	r2, sp, #56	@ 0x38
 8005738:	e9cd a204 	strd	sl, r2, [sp, #16]
 800573c:	aa0d      	add	r2, sp, #52	@ 0x34
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005744:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	4642      	mov	r2, r8
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	464b      	mov	r3, r9
 8005752:	910a      	str	r1, [sp, #40]	@ 0x28
 8005754:	f7ff fed4 	bl	8005500 <__cvt>
 8005758:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800575a:	4680      	mov	r8, r0
 800575c:	2947      	cmp	r1, #71	@ 0x47
 800575e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005760:	d128      	bne.n	80057b4 <_printf_float+0x178>
 8005762:	1cc8      	adds	r0, r1, #3
 8005764:	db02      	blt.n	800576c <_printf_float+0x130>
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	4299      	cmp	r1, r3
 800576a:	dd40      	ble.n	80057ee <_printf_float+0x1b2>
 800576c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005770:	fa5f fa8a 	uxtb.w	sl, sl
 8005774:	4652      	mov	r2, sl
 8005776:	3901      	subs	r1, #1
 8005778:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800577c:	910d      	str	r1, [sp, #52]	@ 0x34
 800577e:	f7ff ff23 	bl	80055c8 <__exponent>
 8005782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005784:	4681      	mov	r9, r0
 8005786:	1813      	adds	r3, r2, r0
 8005788:	2a01      	cmp	r2, #1
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	dc02      	bgt.n	8005794 <_printf_float+0x158>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	07d2      	lsls	r2, r2, #31
 8005792:	d501      	bpl.n	8005798 <_printf_float+0x15c>
 8005794:	3301      	adds	r3, #1
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800579c:	2b00      	cmp	r3, #0
 800579e:	d09e      	beq.n	80056de <_printf_float+0xa2>
 80057a0:	232d      	movs	r3, #45	@ 0x2d
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a6:	e79a      	b.n	80056de <_printf_float+0xa2>
 80057a8:	2947      	cmp	r1, #71	@ 0x47
 80057aa:	d1bf      	bne.n	800572c <_printf_float+0xf0>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1bd      	bne.n	800572c <_printf_float+0xf0>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e7ba      	b.n	800572a <_printf_float+0xee>
 80057b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057b8:	d9dc      	bls.n	8005774 <_printf_float+0x138>
 80057ba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80057be:	d118      	bne.n	80057f2 <_printf_float+0x1b6>
 80057c0:	2900      	cmp	r1, #0
 80057c2:	6863      	ldr	r3, [r4, #4]
 80057c4:	dd0b      	ble.n	80057de <_printf_float+0x1a2>
 80057c6:	6121      	str	r1, [r4, #16]
 80057c8:	b913      	cbnz	r3, 80057d0 <_printf_float+0x194>
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	07d0      	lsls	r0, r2, #31
 80057ce:	d502      	bpl.n	80057d6 <_printf_float+0x19a>
 80057d0:	3301      	adds	r3, #1
 80057d2:	440b      	add	r3, r1
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	f04f 0900 	mov.w	r9, #0
 80057da:	65a1      	str	r1, [r4, #88]	@ 0x58
 80057dc:	e7dc      	b.n	8005798 <_printf_float+0x15c>
 80057de:	b913      	cbnz	r3, 80057e6 <_printf_float+0x1aa>
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	07d2      	lsls	r2, r2, #31
 80057e4:	d501      	bpl.n	80057ea <_printf_float+0x1ae>
 80057e6:	3302      	adds	r3, #2
 80057e8:	e7f4      	b.n	80057d4 <_printf_float+0x198>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e7f2      	b.n	80057d4 <_printf_float+0x198>
 80057ee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057f4:	4299      	cmp	r1, r3
 80057f6:	db05      	blt.n	8005804 <_printf_float+0x1c8>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	6121      	str	r1, [r4, #16]
 80057fc:	07d8      	lsls	r0, r3, #31
 80057fe:	d5ea      	bpl.n	80057d6 <_printf_float+0x19a>
 8005800:	1c4b      	adds	r3, r1, #1
 8005802:	e7e7      	b.n	80057d4 <_printf_float+0x198>
 8005804:	2900      	cmp	r1, #0
 8005806:	bfcc      	ite	gt
 8005808:	2201      	movgt	r2, #1
 800580a:	f1c1 0202 	rsble	r2, r1, #2
 800580e:	4413      	add	r3, r2
 8005810:	e7e0      	b.n	80057d4 <_printf_float+0x198>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	055a      	lsls	r2, r3, #21
 8005816:	d407      	bmi.n	8005828 <_printf_float+0x1ec>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	4642      	mov	r2, r8
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	d12b      	bne.n	800587e <_printf_float+0x242>
 8005826:	e764      	b.n	80056f2 <_printf_float+0xb6>
 8005828:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800582c:	f240 80dc 	bls.w	80059e8 <_printf_float+0x3ac>
 8005830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005834:	2200      	movs	r2, #0
 8005836:	2300      	movs	r3, #0
 8005838:	f7fb f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800583c:	2800      	cmp	r0, #0
 800583e:	d033      	beq.n	80058a8 <_printf_float+0x26c>
 8005840:	2301      	movs	r3, #1
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	4a35      	ldr	r2, [pc, #212]	@ (800591c <_printf_float+0x2e0>)
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f af51 	beq.w	80056f2 <_printf_float+0xb6>
 8005850:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005854:	4543      	cmp	r3, r8
 8005856:	db02      	blt.n	800585e <_printf_float+0x222>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07d8      	lsls	r0, r3, #31
 800585c:	d50f      	bpl.n	800587e <_printf_float+0x242>
 800585e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f af42 	beq.w	80056f2 <_printf_float+0xb6>
 800586e:	f04f 0900 	mov.w	r9, #0
 8005872:	f108 38ff 	add.w	r8, r8, #4294967295
 8005876:	f104 0a1a 	add.w	sl, r4, #26
 800587a:	45c8      	cmp	r8, r9
 800587c:	dc09      	bgt.n	8005892 <_printf_float+0x256>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	079b      	lsls	r3, r3, #30
 8005882:	f100 8102 	bmi.w	8005a8a <_printf_float+0x44e>
 8005886:	68e0      	ldr	r0, [r4, #12]
 8005888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800588a:	4298      	cmp	r0, r3
 800588c:	bfb8      	it	lt
 800588e:	4618      	movlt	r0, r3
 8005890:	e731      	b.n	80056f6 <_printf_float+0xba>
 8005892:	2301      	movs	r3, #1
 8005894:	4652      	mov	r2, sl
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f af28 	beq.w	80056f2 <_printf_float+0xb6>
 80058a2:	f109 0901 	add.w	r9, r9, #1
 80058a6:	e7e8      	b.n	800587a <_printf_float+0x23e>
 80058a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dc38      	bgt.n	8005920 <_printf_float+0x2e4>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	4a19      	ldr	r2, [pc, #100]	@ (800591c <_printf_float+0x2e0>)
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	f43f af1a 	beq.w	80056f2 <_printf_float+0xb6>
 80058be:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80058c2:	ea59 0303 	orrs.w	r3, r9, r3
 80058c6:	d102      	bne.n	80058ce <_printf_float+0x292>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07d9      	lsls	r1, r3, #31
 80058cc:	d5d7      	bpl.n	800587e <_printf_float+0x242>
 80058ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f af0a 	beq.w	80056f2 <_printf_float+0xb6>
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	f104 0b1a 	add.w	fp, r4, #26
 80058e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058e8:	425b      	negs	r3, r3
 80058ea:	4553      	cmp	r3, sl
 80058ec:	dc01      	bgt.n	80058f2 <_printf_float+0x2b6>
 80058ee:	464b      	mov	r3, r9
 80058f0:	e793      	b.n	800581a <_printf_float+0x1de>
 80058f2:	2301      	movs	r3, #1
 80058f4:	465a      	mov	r2, fp
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aef8 	beq.w	80056f2 <_printf_float+0xb6>
 8005902:	f10a 0a01 	add.w	sl, sl, #1
 8005906:	e7ee      	b.n	80058e6 <_printf_float+0x2aa>
 8005908:	7fefffff 	.word	0x7fefffff
 800590c:	0800ab6e 	.word	0x0800ab6e
 8005910:	0800ab72 	.word	0x0800ab72
 8005914:	0800ab76 	.word	0x0800ab76
 8005918:	0800ab7a 	.word	0x0800ab7a
 800591c:	0800ab7e 	.word	0x0800ab7e
 8005920:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005922:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005926:	4553      	cmp	r3, sl
 8005928:	bfa8      	it	ge
 800592a:	4653      	movge	r3, sl
 800592c:	2b00      	cmp	r3, #0
 800592e:	4699      	mov	r9, r3
 8005930:	dc36      	bgt.n	80059a0 <_printf_float+0x364>
 8005932:	f04f 0b00 	mov.w	fp, #0
 8005936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800593a:	f104 021a 	add.w	r2, r4, #26
 800593e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005940:	930a      	str	r3, [sp, #40]	@ 0x28
 8005942:	eba3 0309 	sub.w	r3, r3, r9
 8005946:	455b      	cmp	r3, fp
 8005948:	dc31      	bgt.n	80059ae <_printf_float+0x372>
 800594a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800594c:	459a      	cmp	sl, r3
 800594e:	dc3a      	bgt.n	80059c6 <_printf_float+0x38a>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07da      	lsls	r2, r3, #31
 8005954:	d437      	bmi.n	80059c6 <_printf_float+0x38a>
 8005956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005958:	ebaa 0903 	sub.w	r9, sl, r3
 800595c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800595e:	ebaa 0303 	sub.w	r3, sl, r3
 8005962:	4599      	cmp	r9, r3
 8005964:	bfa8      	it	ge
 8005966:	4699      	movge	r9, r3
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	dc33      	bgt.n	80059d6 <_printf_float+0x39a>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005976:	f104 0b1a 	add.w	fp, r4, #26
 800597a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800597c:	ebaa 0303 	sub.w	r3, sl, r3
 8005980:	eba3 0309 	sub.w	r3, r3, r9
 8005984:	4543      	cmp	r3, r8
 8005986:	f77f af7a 	ble.w	800587e <_printf_float+0x242>
 800598a:	2301      	movs	r3, #1
 800598c:	465a      	mov	r2, fp
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f aeac 	beq.w	80056f2 <_printf_float+0xb6>
 800599a:	f108 0801 	add.w	r8, r8, #1
 800599e:	e7ec      	b.n	800597a <_printf_float+0x33e>
 80059a0:	4642      	mov	r2, r8
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	d1c2      	bne.n	8005932 <_printf_float+0x2f6>
 80059ac:	e6a1      	b.n	80056f2 <_printf_float+0xb6>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae9a 	beq.w	80056f2 <_printf_float+0xb6>
 80059be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059c0:	f10b 0b01 	add.w	fp, fp, #1
 80059c4:	e7bb      	b.n	800593e <_printf_float+0x302>
 80059c6:	4631      	mov	r1, r6
 80059c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b8      	blx	r7
 80059d0:	3001      	adds	r0, #1
 80059d2:	d1c0      	bne.n	8005956 <_printf_float+0x31a>
 80059d4:	e68d      	b.n	80056f2 <_printf_float+0xb6>
 80059d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059d8:	464b      	mov	r3, r9
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	4442      	add	r2, r8
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	d1c3      	bne.n	800596e <_printf_float+0x332>
 80059e6:	e684      	b.n	80056f2 <_printf_float+0xb6>
 80059e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80059ec:	f1ba 0f01 	cmp.w	sl, #1
 80059f0:	dc01      	bgt.n	80059f6 <_printf_float+0x3ba>
 80059f2:	07db      	lsls	r3, r3, #31
 80059f4:	d536      	bpl.n	8005a64 <_printf_float+0x428>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4642      	mov	r2, r8
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae76 	beq.w	80056f2 <_printf_float+0xb6>
 8005a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f ae6e 	beq.w	80056f2 <_printf_float+0xb6>
 8005a16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a22:	f7fa ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a26:	b9c0      	cbnz	r0, 8005a5a <_printf_float+0x41e>
 8005a28:	4653      	mov	r3, sl
 8005a2a:	f108 0201 	add.w	r2, r8, #1
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4628      	mov	r0, r5
 8005a32:	47b8      	blx	r7
 8005a34:	3001      	adds	r0, #1
 8005a36:	d10c      	bne.n	8005a52 <_printf_float+0x416>
 8005a38:	e65b      	b.n	80056f2 <_printf_float+0xb6>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	465a      	mov	r2, fp
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f ae54 	beq.w	80056f2 <_printf_float+0xb6>
 8005a4a:	f108 0801 	add.w	r8, r8, #1
 8005a4e:	45d0      	cmp	r8, sl
 8005a50:	dbf3      	blt.n	8005a3a <_printf_float+0x3fe>
 8005a52:	464b      	mov	r3, r9
 8005a54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a58:	e6e0      	b.n	800581c <_printf_float+0x1e0>
 8005a5a:	f04f 0800 	mov.w	r8, #0
 8005a5e:	f104 0b1a 	add.w	fp, r4, #26
 8005a62:	e7f4      	b.n	8005a4e <_printf_float+0x412>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4642      	mov	r2, r8
 8005a68:	e7e1      	b.n	8005a2e <_printf_float+0x3f2>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	464a      	mov	r2, r9
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	f43f ae3c 	beq.w	80056f2 <_printf_float+0xb6>
 8005a7a:	f108 0801 	add.w	r8, r8, #1
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a82:	1a5b      	subs	r3, r3, r1
 8005a84:	4543      	cmp	r3, r8
 8005a86:	dcf0      	bgt.n	8005a6a <_printf_float+0x42e>
 8005a88:	e6fd      	b.n	8005886 <_printf_float+0x24a>
 8005a8a:	f04f 0800 	mov.w	r8, #0
 8005a8e:	f104 0919 	add.w	r9, r4, #25
 8005a92:	e7f4      	b.n	8005a7e <_printf_float+0x442>

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfb8      	it	lt
 8005aa6:	4613      	movlt	r3, r2
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc2b      	bgt.n	8005b34 <_printf_common+0xa0>
 8005adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	3b00      	subs	r3, #0
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d430      	bmi.n	8005b4e <_printf_common+0xba>
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005af4:	47c8      	blx	r9
 8005af6:	3001      	adds	r0, #1
 8005af8:	d023      	beq.n	8005b42 <_printf_common+0xae>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	f003 0306 	and.w	r3, r3, #6
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf14      	ite	ne
 8005b06:	2500      	movne	r5, #0
 8005b08:	6833      	ldreq	r3, [r6, #0]
 8005b0a:	f04f 0600 	mov.w	r6, #0
 8005b0e:	bf08      	it	eq
 8005b10:	68e5      	ldreq	r5, [r4, #12]
 8005b12:	f104 041a 	add.w	r4, r4, #26
 8005b16:	bf08      	it	eq
 8005b18:	1aed      	subeq	r5, r5, r3
 8005b1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b1e:	bf08      	it	eq
 8005b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bfc4      	itt	gt
 8005b28:	1a9b      	subgt	r3, r3, r2
 8005b2a:	18ed      	addgt	r5, r5, r3
 8005b2c:	42b5      	cmp	r5, r6
 8005b2e:	d11a      	bne.n	8005b66 <_printf_common+0xd2>
 8005b30:	2000      	movs	r0, #0
 8005b32:	e008      	b.n	8005b46 <_printf_common+0xb2>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4652      	mov	r2, sl
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d103      	bne.n	8005b4a <_printf_common+0xb6>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	e7c1      	b.n	8005ad2 <_printf_common+0x3e>
 8005b4e:	2030      	movs	r0, #48	@ 0x30
 8005b50:	18e1      	adds	r1, r4, r3
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b5c:	4422      	add	r2, r4
 8005b5e:	3302      	adds	r3, #2
 8005b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b64:	e7c2      	b.n	8005aec <_printf_common+0x58>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	47c8      	blx	r9
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0e6      	beq.n	8005b42 <_printf_common+0xae>
 8005b74:	3601      	adds	r6, #1
 8005b76:	e7d9      	b.n	8005b2c <_printf_common+0x98>

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	4691      	mov	r9, r2
 8005b80:	2f78      	cmp	r7, #120	@ 0x78
 8005b82:	4680      	mov	r8, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	469a      	mov	sl, r3
 8005b88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	@ 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d3 	beq.w	8005d40 <_printf_i+0x1c8>
 8005b9a:	2f58      	cmp	r7, #88	@ 0x58
 8005b9c:	f000 80ba 	beq.w	8005d14 <_printf_i+0x19c>
 8005ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d27 	.word	0x08005d27
 8005be8:	08005c4f 	.word	0x08005c4f
 8005bec:	08005ce1 	.word	0x08005ce1
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d49 	.word	0x08005d49
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c4f 	.word	0x08005c4f
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005ce9 	.word	0x08005ce9
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6032      	str	r2, [r6, #0]
 8005c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e09e      	b.n	8005d62 <_printf_i+0x1ea>
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	6031      	str	r1, [r6, #0]
 8005c2c:	0606      	lsls	r6, r0, #24
 8005c2e:	d501      	bpl.n	8005c34 <_printf_i+0xbc>
 8005c30:	681d      	ldr	r5, [r3, #0]
 8005c32:	e003      	b.n	8005c3c <_printf_i+0xc4>
 8005c34:	0645      	lsls	r5, r0, #25
 8005c36:	d5fb      	bpl.n	8005c30 <_printf_i+0xb8>
 8005c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	da03      	bge.n	8005c48 <_printf_i+0xd0>
 8005c40:	232d      	movs	r3, #45	@ 0x2d
 8005c42:	426d      	negs	r5, r5
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c48:	230a      	movs	r3, #10
 8005c4a:	4859      	ldr	r0, [pc, #356]	@ (8005db0 <_printf_i+0x238>)
 8005c4c:	e011      	b.n	8005c72 <_printf_i+0xfa>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	0608      	lsls	r0, r1, #24
 8005c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c58:	d402      	bmi.n	8005c60 <_printf_i+0xe8>
 8005c5a:	0649      	lsls	r1, r1, #25
 8005c5c:	bf48      	it	mi
 8005c5e:	b2ad      	uxthmi	r5, r5
 8005c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	bf14      	ite	ne
 8005c66:	230a      	movne	r3, #10
 8005c68:	2308      	moveq	r3, #8
 8005c6a:	4851      	ldr	r0, [pc, #324]	@ (8005db0 <_printf_i+0x238>)
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c72:	6866      	ldr	r6, [r4, #4]
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	bfa8      	it	ge
 8005c78:	6821      	ldrge	r1, [r4, #0]
 8005c7a:	60a6      	str	r6, [r4, #8]
 8005c7c:	bfa4      	itt	ge
 8005c7e:	f021 0104 	bicge.w	r1, r1, #4
 8005c82:	6021      	strge	r1, [r4, #0]
 8005c84:	b90d      	cbnz	r5, 8005c8a <_printf_i+0x112>
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	d04b      	beq.n	8005d22 <_printf_i+0x1aa>
 8005c8a:	4616      	mov	r6, r2
 8005c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c90:	fb03 5711 	mls	r7, r3, r1, r5
 8005c94:	5dc7      	ldrb	r7, [r0, r7]
 8005c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c9a:	462f      	mov	r7, r5
 8005c9c:	42bb      	cmp	r3, r7
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	d9f4      	bls.n	8005c8c <_printf_i+0x114>
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d10b      	bne.n	8005cbe <_printf_i+0x146>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	07df      	lsls	r7, r3, #31
 8005caa:	d508      	bpl.n	8005cbe <_printf_i+0x146>
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	6861      	ldr	r1, [r4, #4]
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	bfde      	ittt	le
 8005cb4:	2330      	movle	r3, #48	@ 0x30
 8005cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cbe:	1b92      	subs	r2, r2, r6
 8005cc0:	6122      	str	r2, [r4, #16]
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	aa03      	add	r2, sp, #12
 8005cce:	f7ff fee1 	bl	8005a94 <_printf_common>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d14a      	bne.n	8005d6c <_printf_i+0x1f4>
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	b004      	add	sp, #16
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f043 0320 	orr.w	r3, r3, #32
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	2778      	movs	r7, #120	@ 0x78
 8005cea:	4832      	ldr	r0, [pc, #200]	@ (8005db4 <_printf_i+0x23c>)
 8005cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	061f      	lsls	r7, r3, #24
 8005cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cfa:	d402      	bmi.n	8005d02 <_printf_i+0x18a>
 8005cfc:	065f      	lsls	r7, r3, #25
 8005cfe:	bf48      	it	mi
 8005d00:	b2ad      	uxthmi	r5, r5
 8005d02:	6031      	str	r1, [r6, #0]
 8005d04:	07d9      	lsls	r1, r3, #31
 8005d06:	bf44      	itt	mi
 8005d08:	f043 0320 	orrmi.w	r3, r3, #32
 8005d0c:	6023      	strmi	r3, [r4, #0]
 8005d0e:	b11d      	cbz	r5, 8005d18 <_printf_i+0x1a0>
 8005d10:	2310      	movs	r3, #16
 8005d12:	e7ab      	b.n	8005c6c <_printf_i+0xf4>
 8005d14:	4826      	ldr	r0, [pc, #152]	@ (8005db0 <_printf_i+0x238>)
 8005d16:	e7e9      	b.n	8005cec <_printf_i+0x174>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	f023 0320 	bic.w	r3, r3, #32
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	e7f6      	b.n	8005d10 <_printf_i+0x198>
 8005d22:	4616      	mov	r6, r2
 8005d24:	e7bd      	b.n	8005ca2 <_printf_i+0x12a>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	6030      	str	r0, [r6, #0]
 8005d30:	062e      	lsls	r6, r5, #24
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0x1c2>
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0x1c8>
 8005d3a:	0668      	lsls	r0, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0x1be>
 8005d3e:	8019      	strh	r1, [r3, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	4616      	mov	r6, r2
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	e7bc      	b.n	8005cc2 <_printf_i+0x14a>
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	6032      	str	r2, [r6, #0]
 8005d50:	681e      	ldr	r6, [r3, #0]
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 fc16 	bl	8006586 <memchr>
 8005d5a:	b108      	cbz	r0, 8005d60 <_printf_i+0x1e8>
 8005d5c:	1b80      	subs	r0, r0, r6
 8005d5e:	6060      	str	r0, [r4, #4]
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d6a:	e7aa      	b.n	8005cc2 <_printf_i+0x14a>
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	47d0      	blx	sl
 8005d76:	3001      	adds	r0, #1
 8005d78:	d0ad      	beq.n	8005cd6 <_printf_i+0x15e>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	079b      	lsls	r3, r3, #30
 8005d7e:	d413      	bmi.n	8005da8 <_printf_i+0x230>
 8005d80:	68e0      	ldr	r0, [r4, #12]
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	4298      	cmp	r0, r3
 8005d86:	bfb8      	it	lt
 8005d88:	4618      	movlt	r0, r3
 8005d8a:	e7a6      	b.n	8005cda <_printf_i+0x162>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4649      	mov	r1, r9
 8005d92:	4640      	mov	r0, r8
 8005d94:	47d0      	blx	sl
 8005d96:	3001      	adds	r0, #1
 8005d98:	d09d      	beq.n	8005cd6 <_printf_i+0x15e>
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	68e3      	ldr	r3, [r4, #12]
 8005d9e:	9903      	ldr	r1, [sp, #12]
 8005da0:	1a5b      	subs	r3, r3, r1
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	dcf2      	bgt.n	8005d8c <_printf_i+0x214>
 8005da6:	e7eb      	b.n	8005d80 <_printf_i+0x208>
 8005da8:	2500      	movs	r5, #0
 8005daa:	f104 0619 	add.w	r6, r4, #25
 8005dae:	e7f5      	b.n	8005d9c <_printf_i+0x224>
 8005db0:	0800ab80 	.word	0x0800ab80
 8005db4:	0800ab91 	.word	0x0800ab91

08005db8 <_scanf_float>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	688b      	ldr	r3, [r1, #8]
 8005dc2:	4617      	mov	r7, r2
 8005dc4:	1e5a      	subs	r2, r3, #1
 8005dc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005dca:	bf82      	ittt	hi
 8005dcc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005dd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8005dd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005dd8:	460a      	mov	r2, r1
 8005dda:	f04f 0500 	mov.w	r5, #0
 8005dde:	bf88      	it	hi
 8005de0:	608b      	strhi	r3, [r1, #8]
 8005de2:	680b      	ldr	r3, [r1, #0]
 8005de4:	4680      	mov	r8, r0
 8005de6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005dea:	f842 3b1c 	str.w	r3, [r2], #28
 8005dee:	460c      	mov	r4, r1
 8005df0:	bf98      	it	ls
 8005df2:	f04f 0b00 	movls.w	fp, #0
 8005df6:	4616      	mov	r6, r2
 8005df8:	46aa      	mov	sl, r5
 8005dfa:	46a9      	mov	r9, r5
 8005dfc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e00:	9201      	str	r2, [sp, #4]
 8005e02:	9502      	str	r5, [sp, #8]
 8005e04:	68a2      	ldr	r2, [r4, #8]
 8005e06:	b152      	cbz	r2, 8005e1e <_scanf_float+0x66>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8005e0e:	d865      	bhi.n	8005edc <_scanf_float+0x124>
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d83d      	bhi.n	8005e90 <_scanf_float+0xd8>
 8005e14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005e18:	b2c8      	uxtb	r0, r1
 8005e1a:	280e      	cmp	r0, #14
 8005e1c:	d93b      	bls.n	8005e96 <_scanf_float+0xde>
 8005e1e:	f1b9 0f00 	cmp.w	r9, #0
 8005e22:	d003      	beq.n	8005e2c <_scanf_float+0x74>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e30:	f1ba 0f01 	cmp.w	sl, #1
 8005e34:	f200 8118 	bhi.w	8006068 <_scanf_float+0x2b0>
 8005e38:	9b01      	ldr	r3, [sp, #4]
 8005e3a:	429e      	cmp	r6, r3
 8005e3c:	f200 8109 	bhi.w	8006052 <_scanf_float+0x29a>
 8005e40:	2001      	movs	r0, #1
 8005e42:	b007      	add	sp, #28
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005e4c:	2a0d      	cmp	r2, #13
 8005e4e:	d8e6      	bhi.n	8005e1e <_scanf_float+0x66>
 8005e50:	a101      	add	r1, pc, #4	@ (adr r1, 8005e58 <_scanf_float+0xa0>)
 8005e52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005f9f 	.word	0x08005f9f
 8005e5c:	08005e1f 	.word	0x08005e1f
 8005e60:	08005e1f 	.word	0x08005e1f
 8005e64:	08005e1f 	.word	0x08005e1f
 8005e68:	08005fff 	.word	0x08005fff
 8005e6c:	08005fd7 	.word	0x08005fd7
 8005e70:	08005e1f 	.word	0x08005e1f
 8005e74:	08005e1f 	.word	0x08005e1f
 8005e78:	08005fad 	.word	0x08005fad
 8005e7c:	08005e1f 	.word	0x08005e1f
 8005e80:	08005e1f 	.word	0x08005e1f
 8005e84:	08005e1f 	.word	0x08005e1f
 8005e88:	08005e1f 	.word	0x08005e1f
 8005e8c:	08005f65 	.word	0x08005f65
 8005e90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005e94:	e7da      	b.n	8005e4c <_scanf_float+0x94>
 8005e96:	290e      	cmp	r1, #14
 8005e98:	d8c1      	bhi.n	8005e1e <_scanf_float+0x66>
 8005e9a:	a001      	add	r0, pc, #4	@ (adr r0, 8005ea0 <_scanf_float+0xe8>)
 8005e9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ea0:	08005f55 	.word	0x08005f55
 8005ea4:	08005e1f 	.word	0x08005e1f
 8005ea8:	08005f55 	.word	0x08005f55
 8005eac:	08005feb 	.word	0x08005feb
 8005eb0:	08005e1f 	.word	0x08005e1f
 8005eb4:	08005efd 	.word	0x08005efd
 8005eb8:	08005f3b 	.word	0x08005f3b
 8005ebc:	08005f3b 	.word	0x08005f3b
 8005ec0:	08005f3b 	.word	0x08005f3b
 8005ec4:	08005f3b 	.word	0x08005f3b
 8005ec8:	08005f3b 	.word	0x08005f3b
 8005ecc:	08005f3b 	.word	0x08005f3b
 8005ed0:	08005f3b 	.word	0x08005f3b
 8005ed4:	08005f3b 	.word	0x08005f3b
 8005ed8:	08005f3b 	.word	0x08005f3b
 8005edc:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ede:	d809      	bhi.n	8005ef4 <_scanf_float+0x13c>
 8005ee0:	2b60      	cmp	r3, #96	@ 0x60
 8005ee2:	d8b1      	bhi.n	8005e48 <_scanf_float+0x90>
 8005ee4:	2b54      	cmp	r3, #84	@ 0x54
 8005ee6:	d07b      	beq.n	8005fe0 <_scanf_float+0x228>
 8005ee8:	2b59      	cmp	r3, #89	@ 0x59
 8005eea:	d198      	bne.n	8005e1e <_scanf_float+0x66>
 8005eec:	2d07      	cmp	r5, #7
 8005eee:	d196      	bne.n	8005e1e <_scanf_float+0x66>
 8005ef0:	2508      	movs	r5, #8
 8005ef2:	e02c      	b.n	8005f4e <_scanf_float+0x196>
 8005ef4:	2b74      	cmp	r3, #116	@ 0x74
 8005ef6:	d073      	beq.n	8005fe0 <_scanf_float+0x228>
 8005ef8:	2b79      	cmp	r3, #121	@ 0x79
 8005efa:	e7f6      	b.n	8005eea <_scanf_float+0x132>
 8005efc:	6821      	ldr	r1, [r4, #0]
 8005efe:	05c8      	lsls	r0, r1, #23
 8005f00:	d51b      	bpl.n	8005f3a <_scanf_float+0x182>
 8005f02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005f06:	6021      	str	r1, [r4, #0]
 8005f08:	f109 0901 	add.w	r9, r9, #1
 8005f0c:	f1bb 0f00 	cmp.w	fp, #0
 8005f10:	d003      	beq.n	8005f1a <_scanf_float+0x162>
 8005f12:	3201      	adds	r2, #1
 8005f14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f18:	60a2      	str	r2, [r4, #8]
 8005f1a:	68a3      	ldr	r3, [r4, #8]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	60a3      	str	r3, [r4, #8]
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	3301      	adds	r3, #1
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	f340 8087 	ble.w	8006040 <_scanf_float+0x288>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	e764      	b.n	8005e04 <_scanf_float+0x4c>
 8005f3a:	eb1a 0105 	adds.w	r1, sl, r5
 8005f3e:	f47f af6e 	bne.w	8005e1e <_scanf_float+0x66>
 8005f42:	460d      	mov	r5, r1
 8005f44:	468a      	mov	sl, r1
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005f4c:	6022      	str	r2, [r4, #0]
 8005f4e:	f806 3b01 	strb.w	r3, [r6], #1
 8005f52:	e7e2      	b.n	8005f1a <_scanf_float+0x162>
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	0610      	lsls	r0, r2, #24
 8005f58:	f57f af61 	bpl.w	8005e1e <_scanf_float+0x66>
 8005f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f60:	6022      	str	r2, [r4, #0]
 8005f62:	e7f4      	b.n	8005f4e <_scanf_float+0x196>
 8005f64:	f1ba 0f00 	cmp.w	sl, #0
 8005f68:	d10e      	bne.n	8005f88 <_scanf_float+0x1d0>
 8005f6a:	f1b9 0f00 	cmp.w	r9, #0
 8005f6e:	d10e      	bne.n	8005f8e <_scanf_float+0x1d6>
 8005f70:	6822      	ldr	r2, [r4, #0]
 8005f72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005f76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005f7a:	d108      	bne.n	8005f8e <_scanf_float+0x1d6>
 8005f7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f80:	f04f 0a01 	mov.w	sl, #1
 8005f84:	6022      	str	r2, [r4, #0]
 8005f86:	e7e2      	b.n	8005f4e <_scanf_float+0x196>
 8005f88:	f1ba 0f02 	cmp.w	sl, #2
 8005f8c:	d055      	beq.n	800603a <_scanf_float+0x282>
 8005f8e:	2d01      	cmp	r5, #1
 8005f90:	d002      	beq.n	8005f98 <_scanf_float+0x1e0>
 8005f92:	2d04      	cmp	r5, #4
 8005f94:	f47f af43 	bne.w	8005e1e <_scanf_float+0x66>
 8005f98:	3501      	adds	r5, #1
 8005f9a:	b2ed      	uxtb	r5, r5
 8005f9c:	e7d7      	b.n	8005f4e <_scanf_float+0x196>
 8005f9e:	f1ba 0f01 	cmp.w	sl, #1
 8005fa2:	f47f af3c 	bne.w	8005e1e <_scanf_float+0x66>
 8005fa6:	f04f 0a02 	mov.w	sl, #2
 8005faa:	e7d0      	b.n	8005f4e <_scanf_float+0x196>
 8005fac:	b97d      	cbnz	r5, 8005fce <_scanf_float+0x216>
 8005fae:	f1b9 0f00 	cmp.w	r9, #0
 8005fb2:	f47f af37 	bne.w	8005e24 <_scanf_float+0x6c>
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005fbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005fc0:	f040 8103 	bne.w	80061ca <_scanf_float+0x412>
 8005fc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005fc8:	2501      	movs	r5, #1
 8005fca:	6022      	str	r2, [r4, #0]
 8005fcc:	e7bf      	b.n	8005f4e <_scanf_float+0x196>
 8005fce:	2d03      	cmp	r5, #3
 8005fd0:	d0e2      	beq.n	8005f98 <_scanf_float+0x1e0>
 8005fd2:	2d05      	cmp	r5, #5
 8005fd4:	e7de      	b.n	8005f94 <_scanf_float+0x1dc>
 8005fd6:	2d02      	cmp	r5, #2
 8005fd8:	f47f af21 	bne.w	8005e1e <_scanf_float+0x66>
 8005fdc:	2503      	movs	r5, #3
 8005fde:	e7b6      	b.n	8005f4e <_scanf_float+0x196>
 8005fe0:	2d06      	cmp	r5, #6
 8005fe2:	f47f af1c 	bne.w	8005e1e <_scanf_float+0x66>
 8005fe6:	2507      	movs	r5, #7
 8005fe8:	e7b1      	b.n	8005f4e <_scanf_float+0x196>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	0591      	lsls	r1, r2, #22
 8005fee:	f57f af16 	bpl.w	8005e1e <_scanf_float+0x66>
 8005ff2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005ff6:	6022      	str	r2, [r4, #0]
 8005ff8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ffc:	e7a7      	b.n	8005f4e <_scanf_float+0x196>
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006004:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006008:	d006      	beq.n	8006018 <_scanf_float+0x260>
 800600a:	0550      	lsls	r0, r2, #21
 800600c:	f57f af07 	bpl.w	8005e1e <_scanf_float+0x66>
 8006010:	f1b9 0f00 	cmp.w	r9, #0
 8006014:	f000 80d9 	beq.w	80061ca <_scanf_float+0x412>
 8006018:	0591      	lsls	r1, r2, #22
 800601a:	bf58      	it	pl
 800601c:	9902      	ldrpl	r1, [sp, #8]
 800601e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006022:	bf58      	it	pl
 8006024:	eba9 0101 	subpl.w	r1, r9, r1
 8006028:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800602c:	f04f 0900 	mov.w	r9, #0
 8006030:	bf58      	it	pl
 8006032:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	e789      	b.n	8005f4e <_scanf_float+0x196>
 800603a:	f04f 0a03 	mov.w	sl, #3
 800603e:	e786      	b.n	8005f4e <_scanf_float+0x196>
 8006040:	4639      	mov	r1, r7
 8006042:	4640      	mov	r0, r8
 8006044:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006048:	4798      	blx	r3
 800604a:	2800      	cmp	r0, #0
 800604c:	f43f aeda 	beq.w	8005e04 <_scanf_float+0x4c>
 8006050:	e6e5      	b.n	8005e1e <_scanf_float+0x66>
 8006052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006056:	463a      	mov	r2, r7
 8006058:	4640      	mov	r0, r8
 800605a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800605e:	4798      	blx	r3
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	3b01      	subs	r3, #1
 8006064:	6123      	str	r3, [r4, #16]
 8006066:	e6e7      	b.n	8005e38 <_scanf_float+0x80>
 8006068:	1e6b      	subs	r3, r5, #1
 800606a:	2b06      	cmp	r3, #6
 800606c:	d824      	bhi.n	80060b8 <_scanf_float+0x300>
 800606e:	2d02      	cmp	r5, #2
 8006070:	d836      	bhi.n	80060e0 <_scanf_float+0x328>
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	429e      	cmp	r6, r3
 8006076:	f67f aee3 	bls.w	8005e40 <_scanf_float+0x88>
 800607a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800607e:	463a      	mov	r2, r7
 8006080:	4640      	mov	r0, r8
 8006082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006086:	4798      	blx	r3
 8006088:	6923      	ldr	r3, [r4, #16]
 800608a:	3b01      	subs	r3, #1
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	e7f0      	b.n	8006072 <_scanf_float+0x2ba>
 8006090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006094:	463a      	mov	r2, r7
 8006096:	4640      	mov	r0, r8
 8006098:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800609c:	4798      	blx	r3
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	6123      	str	r3, [r4, #16]
 80060a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a8:	fa5f fa8a 	uxtb.w	sl, sl
 80060ac:	f1ba 0f02 	cmp.w	sl, #2
 80060b0:	d1ee      	bne.n	8006090 <_scanf_float+0x2d8>
 80060b2:	3d03      	subs	r5, #3
 80060b4:	b2ed      	uxtb	r5, r5
 80060b6:	1b76      	subs	r6, r6, r5
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	05da      	lsls	r2, r3, #23
 80060bc:	d530      	bpl.n	8006120 <_scanf_float+0x368>
 80060be:	055b      	lsls	r3, r3, #21
 80060c0:	d511      	bpl.n	80060e6 <_scanf_float+0x32e>
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	429e      	cmp	r6, r3
 80060c6:	f67f aebb 	bls.w	8005e40 <_scanf_float+0x88>
 80060ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060ce:	463a      	mov	r2, r7
 80060d0:	4640      	mov	r0, r8
 80060d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060d6:	4798      	blx	r3
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	3b01      	subs	r3, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	e7f0      	b.n	80060c2 <_scanf_float+0x30a>
 80060e0:	46aa      	mov	sl, r5
 80060e2:	46b3      	mov	fp, r6
 80060e4:	e7de      	b.n	80060a4 <_scanf_float+0x2ec>
 80060e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	2965      	cmp	r1, #101	@ 0x65
 80060ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80060f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80060f6:	6123      	str	r3, [r4, #16]
 80060f8:	d00c      	beq.n	8006114 <_scanf_float+0x35c>
 80060fa:	2945      	cmp	r1, #69	@ 0x45
 80060fc:	d00a      	beq.n	8006114 <_scanf_float+0x35c>
 80060fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006102:	463a      	mov	r2, r7
 8006104:	4640      	mov	r0, r8
 8006106:	4798      	blx	r3
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800610e:	3b01      	subs	r3, #1
 8006110:	1eb5      	subs	r5, r6, #2
 8006112:	6123      	str	r3, [r4, #16]
 8006114:	463a      	mov	r2, r7
 8006116:	4640      	mov	r0, r8
 8006118:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800611c:	4798      	blx	r3
 800611e:	462e      	mov	r6, r5
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	f012 0210 	ands.w	r2, r2, #16
 8006126:	d001      	beq.n	800612c <_scanf_float+0x374>
 8006128:	2000      	movs	r0, #0
 800612a:	e68a      	b.n	8005e42 <_scanf_float+0x8a>
 800612c:	7032      	strb	r2, [r6, #0]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006138:	d11c      	bne.n	8006174 <_scanf_float+0x3bc>
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	454b      	cmp	r3, r9
 800613e:	eba3 0209 	sub.w	r2, r3, r9
 8006142:	d123      	bne.n	800618c <_scanf_float+0x3d4>
 8006144:	2200      	movs	r2, #0
 8006146:	4640      	mov	r0, r8
 8006148:	9901      	ldr	r1, [sp, #4]
 800614a:	f002 fc21 	bl	8008990 <_strtod_r>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	6825      	ldr	r5, [r4, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f015 0f02 	tst.w	r5, #2
 8006158:	4606      	mov	r6, r0
 800615a:	460f      	mov	r7, r1
 800615c:	f103 0204 	add.w	r2, r3, #4
 8006160:	d01f      	beq.n	80061a2 <_scanf_float+0x3ea>
 8006162:	9903      	ldr	r1, [sp, #12]
 8006164:	600a      	str	r2, [r1, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	e9c3 6700 	strd	r6, r7, [r3]
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60e3      	str	r3, [r4, #12]
 8006172:	e7d9      	b.n	8006128 <_scanf_float+0x370>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0e4      	beq.n	8006144 <_scanf_float+0x38c>
 800617a:	9905      	ldr	r1, [sp, #20]
 800617c:	230a      	movs	r3, #10
 800617e:	4640      	mov	r0, r8
 8006180:	3101      	adds	r1, #1
 8006182:	f002 fc85 	bl	8008a90 <_strtol_r>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	9e05      	ldr	r6, [sp, #20]
 800618a:	1ac2      	subs	r2, r0, r3
 800618c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006190:	429e      	cmp	r6, r3
 8006192:	bf28      	it	cs
 8006194:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006198:	4630      	mov	r0, r6
 800619a:	490d      	ldr	r1, [pc, #52]	@ (80061d0 <_scanf_float+0x418>)
 800619c:	f000 f8f0 	bl	8006380 <siprintf>
 80061a0:	e7d0      	b.n	8006144 <_scanf_float+0x38c>
 80061a2:	076d      	lsls	r5, r5, #29
 80061a4:	d4dd      	bmi.n	8006162 <_scanf_float+0x3aa>
 80061a6:	9d03      	ldr	r5, [sp, #12]
 80061a8:	602a      	str	r2, [r5, #0]
 80061aa:	681d      	ldr	r5, [r3, #0]
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	f7fa fc2c 	bl	8000a0c <__aeabi_dcmpun>
 80061b4:	b120      	cbz	r0, 80061c0 <_scanf_float+0x408>
 80061b6:	4807      	ldr	r0, [pc, #28]	@ (80061d4 <_scanf_float+0x41c>)
 80061b8:	f000 f9f4 	bl	80065a4 <nanf>
 80061bc:	6028      	str	r0, [r5, #0]
 80061be:	e7d5      	b.n	800616c <_scanf_float+0x3b4>
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa fc80 	bl	8000ac8 <__aeabi_d2f>
 80061c8:	e7f8      	b.n	80061bc <_scanf_float+0x404>
 80061ca:	f04f 0900 	mov.w	r9, #0
 80061ce:	e62d      	b.n	8005e2c <_scanf_float+0x74>
 80061d0:	0800aba2 	.word	0x0800aba2
 80061d4:	0800af3d 	.word	0x0800af3d

080061d8 <std>:
 80061d8:	2300      	movs	r3, #0
 80061da:	b510      	push	{r4, lr}
 80061dc:	4604      	mov	r4, r0
 80061de:	e9c0 3300 	strd	r3, r3, [r0]
 80061e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e6:	6083      	str	r3, [r0, #8]
 80061e8:	8181      	strh	r1, [r0, #12]
 80061ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80061ec:	81c2      	strh	r2, [r0, #14]
 80061ee:	6183      	str	r3, [r0, #24]
 80061f0:	4619      	mov	r1, r3
 80061f2:	2208      	movs	r2, #8
 80061f4:	305c      	adds	r0, #92	@ 0x5c
 80061f6:	f000 f947 	bl	8006488 <memset>
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <std+0x58>)
 80061fc:	6224      	str	r4, [r4, #32]
 80061fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <std+0x5c>)
 8006202:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006204:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <std+0x60>)
 8006206:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006208:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <std+0x64>)
 800620a:	6323      	str	r3, [r4, #48]	@ 0x30
 800620c:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <std+0x68>)
 800620e:	429c      	cmp	r4, r3
 8006210:	d006      	beq.n	8006220 <std+0x48>
 8006212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006216:	4294      	cmp	r4, r2
 8006218:	d002      	beq.n	8006220 <std+0x48>
 800621a:	33d0      	adds	r3, #208	@ 0xd0
 800621c:	429c      	cmp	r4, r3
 800621e:	d105      	bne.n	800622c <std+0x54>
 8006220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006228:	f000 b9aa 	b.w	8006580 <__retarget_lock_init_recursive>
 800622c:	bd10      	pop	{r4, pc}
 800622e:	bf00      	nop
 8006230:	080063c1 	.word	0x080063c1
 8006234:	080063e3 	.word	0x080063e3
 8006238:	0800641b 	.word	0x0800641b
 800623c:	0800643f 	.word	0x0800643f
 8006240:	20000794 	.word	0x20000794

08006244 <stdio_exit_handler>:
 8006244:	4a02      	ldr	r2, [pc, #8]	@ (8006250 <stdio_exit_handler+0xc>)
 8006246:	4903      	ldr	r1, [pc, #12]	@ (8006254 <stdio_exit_handler+0x10>)
 8006248:	4803      	ldr	r0, [pc, #12]	@ (8006258 <stdio_exit_handler+0x14>)
 800624a:	f000 b869 	b.w	8006320 <_fwalk_sglue>
 800624e:	bf00      	nop
 8006250:	20000014 	.word	0x20000014
 8006254:	080090c5 	.word	0x080090c5
 8006258:	20000024 	.word	0x20000024

0800625c <cleanup_stdio>:
 800625c:	6841      	ldr	r1, [r0, #4]
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <cleanup_stdio+0x34>)
 8006260:	b510      	push	{r4, lr}
 8006262:	4299      	cmp	r1, r3
 8006264:	4604      	mov	r4, r0
 8006266:	d001      	beq.n	800626c <cleanup_stdio+0x10>
 8006268:	f002 ff2c 	bl	80090c4 <_fflush_r>
 800626c:	68a1      	ldr	r1, [r4, #8]
 800626e:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <cleanup_stdio+0x38>)
 8006270:	4299      	cmp	r1, r3
 8006272:	d002      	beq.n	800627a <cleanup_stdio+0x1e>
 8006274:	4620      	mov	r0, r4
 8006276:	f002 ff25 	bl	80090c4 <_fflush_r>
 800627a:	68e1      	ldr	r1, [r4, #12]
 800627c:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <cleanup_stdio+0x3c>)
 800627e:	4299      	cmp	r1, r3
 8006280:	d004      	beq.n	800628c <cleanup_stdio+0x30>
 8006282:	4620      	mov	r0, r4
 8006284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006288:	f002 bf1c 	b.w	80090c4 <_fflush_r>
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop
 8006290:	20000794 	.word	0x20000794
 8006294:	200007fc 	.word	0x200007fc
 8006298:	20000864 	.word	0x20000864

0800629c <global_stdio_init.part.0>:
 800629c:	b510      	push	{r4, lr}
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <global_stdio_init.part.0+0x30>)
 80062a0:	4c0b      	ldr	r4, [pc, #44]	@ (80062d0 <global_stdio_init.part.0+0x34>)
 80062a2:	4a0c      	ldr	r2, [pc, #48]	@ (80062d4 <global_stdio_init.part.0+0x38>)
 80062a4:	4620      	mov	r0, r4
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	2104      	movs	r1, #4
 80062aa:	2200      	movs	r2, #0
 80062ac:	f7ff ff94 	bl	80061d8 <std>
 80062b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062b4:	2201      	movs	r2, #1
 80062b6:	2109      	movs	r1, #9
 80062b8:	f7ff ff8e 	bl	80061d8 <std>
 80062bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062c0:	2202      	movs	r2, #2
 80062c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c6:	2112      	movs	r1, #18
 80062c8:	f7ff bf86 	b.w	80061d8 <std>
 80062cc:	200008cc 	.word	0x200008cc
 80062d0:	20000794 	.word	0x20000794
 80062d4:	08006245 	.word	0x08006245

080062d8 <__sfp_lock_acquire>:
 80062d8:	4801      	ldr	r0, [pc, #4]	@ (80062e0 <__sfp_lock_acquire+0x8>)
 80062da:	f000 b952 	b.w	8006582 <__retarget_lock_acquire_recursive>
 80062de:	bf00      	nop
 80062e0:	200008d5 	.word	0x200008d5

080062e4 <__sfp_lock_release>:
 80062e4:	4801      	ldr	r0, [pc, #4]	@ (80062ec <__sfp_lock_release+0x8>)
 80062e6:	f000 b94d 	b.w	8006584 <__retarget_lock_release_recursive>
 80062ea:	bf00      	nop
 80062ec:	200008d5 	.word	0x200008d5

080062f0 <__sinit>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4604      	mov	r4, r0
 80062f4:	f7ff fff0 	bl	80062d8 <__sfp_lock_acquire>
 80062f8:	6a23      	ldr	r3, [r4, #32]
 80062fa:	b11b      	cbz	r3, 8006304 <__sinit+0x14>
 80062fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006300:	f7ff bff0 	b.w	80062e4 <__sfp_lock_release>
 8006304:	4b04      	ldr	r3, [pc, #16]	@ (8006318 <__sinit+0x28>)
 8006306:	6223      	str	r3, [r4, #32]
 8006308:	4b04      	ldr	r3, [pc, #16]	@ (800631c <__sinit+0x2c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f5      	bne.n	80062fc <__sinit+0xc>
 8006310:	f7ff ffc4 	bl	800629c <global_stdio_init.part.0>
 8006314:	e7f2      	b.n	80062fc <__sinit+0xc>
 8006316:	bf00      	nop
 8006318:	0800625d 	.word	0x0800625d
 800631c:	200008cc 	.word	0x200008cc

08006320 <_fwalk_sglue>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	4607      	mov	r7, r0
 8006326:	4688      	mov	r8, r1
 8006328:	4614      	mov	r4, r2
 800632a:	2600      	movs	r6, #0
 800632c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006330:	f1b9 0901 	subs.w	r9, r9, #1
 8006334:	d505      	bpl.n	8006342 <_fwalk_sglue+0x22>
 8006336:	6824      	ldr	r4, [r4, #0]
 8006338:	2c00      	cmp	r4, #0
 800633a:	d1f7      	bne.n	800632c <_fwalk_sglue+0xc>
 800633c:	4630      	mov	r0, r6
 800633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d907      	bls.n	8006358 <_fwalk_sglue+0x38>
 8006348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800634c:	3301      	adds	r3, #1
 800634e:	d003      	beq.n	8006358 <_fwalk_sglue+0x38>
 8006350:	4629      	mov	r1, r5
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	4306      	orrs	r6, r0
 8006358:	3568      	adds	r5, #104	@ 0x68
 800635a:	e7e9      	b.n	8006330 <_fwalk_sglue+0x10>

0800635c <iprintf>:
 800635c:	b40f      	push	{r0, r1, r2, r3}
 800635e:	b507      	push	{r0, r1, r2, lr}
 8006360:	4906      	ldr	r1, [pc, #24]	@ (800637c <iprintf+0x20>)
 8006362:	ab04      	add	r3, sp, #16
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	f853 2b04 	ldr.w	r2, [r3], #4
 800636a:	6881      	ldr	r1, [r0, #8]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f002 fd11 	bl	8008d94 <_vfiprintf_r>
 8006372:	b003      	add	sp, #12
 8006374:	f85d eb04 	ldr.w	lr, [sp], #4
 8006378:	b004      	add	sp, #16
 800637a:	4770      	bx	lr
 800637c:	20000020 	.word	0x20000020

08006380 <siprintf>:
 8006380:	b40e      	push	{r1, r2, r3}
 8006382:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006386:	b500      	push	{lr}
 8006388:	b09c      	sub	sp, #112	@ 0x70
 800638a:	ab1d      	add	r3, sp, #116	@ 0x74
 800638c:	9002      	str	r0, [sp, #8]
 800638e:	9006      	str	r0, [sp, #24]
 8006390:	9107      	str	r1, [sp, #28]
 8006392:	9104      	str	r1, [sp, #16]
 8006394:	4808      	ldr	r0, [pc, #32]	@ (80063b8 <siprintf+0x38>)
 8006396:	4909      	ldr	r1, [pc, #36]	@ (80063bc <siprintf+0x3c>)
 8006398:	f853 2b04 	ldr.w	r2, [r3], #4
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	a902      	add	r1, sp, #8
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	f002 fbd2 	bl	8008b4c <_svfiprintf_r>
 80063a8:	2200      	movs	r2, #0
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	b01c      	add	sp, #112	@ 0x70
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b003      	add	sp, #12
 80063b6:	4770      	bx	lr
 80063b8:	20000020 	.word	0x20000020
 80063bc:	ffff0208 	.word	0xffff0208

080063c0 <__sread>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f88c 	bl	80064e4 <_read_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bfab      	itete	ge
 80063d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063d2:	89a3      	ldrhlt	r3, [r4, #12]
 80063d4:	181b      	addge	r3, r3, r0
 80063d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063da:	bfac      	ite	ge
 80063dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063de:	81a3      	strhlt	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__swrite>:
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	461f      	mov	r7, r3
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	4605      	mov	r5, r0
 80063ec:	05db      	lsls	r3, r3, #23
 80063ee:	460c      	mov	r4, r1
 80063f0:	4616      	mov	r6, r2
 80063f2:	d505      	bpl.n	8006400 <__swrite+0x1e>
 80063f4:	2302      	movs	r3, #2
 80063f6:	2200      	movs	r2, #0
 80063f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fc:	f000 f860 	bl	80064c0 <_lseek_r>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	4632      	mov	r2, r6
 8006404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	4628      	mov	r0, r5
 800640c:	463b      	mov	r3, r7
 800640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	f000 b877 	b.w	8006508 <_write_r>

0800641a <__sseek>:
 800641a:	b510      	push	{r4, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 f84d 	bl	80064c0 <_lseek_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	bf15      	itete	ne
 800642c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800642e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006436:	81a3      	strheq	r3, [r4, #12]
 8006438:	bf18      	it	ne
 800643a:	81a3      	strhne	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__sclose>:
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 b82d 	b.w	80064a0 <_close_r>
	...

08006448 <_vsiprintf_r>:
 8006448:	b500      	push	{lr}
 800644a:	b09b      	sub	sp, #108	@ 0x6c
 800644c:	9100      	str	r1, [sp, #0]
 800644e:	9104      	str	r1, [sp, #16]
 8006450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	9102      	str	r1, [sp, #8]
 8006458:	4905      	ldr	r1, [pc, #20]	@ (8006470 <_vsiprintf_r+0x28>)
 800645a:	9103      	str	r1, [sp, #12]
 800645c:	4669      	mov	r1, sp
 800645e:	f002 fb75 	bl	8008b4c <_svfiprintf_r>
 8006462:	2200      	movs	r2, #0
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	b01b      	add	sp, #108	@ 0x6c
 800646a:	f85d fb04 	ldr.w	pc, [sp], #4
 800646e:	bf00      	nop
 8006470:	ffff0208 	.word	0xffff0208

08006474 <vsiprintf>:
 8006474:	4613      	mov	r3, r2
 8006476:	460a      	mov	r2, r1
 8006478:	4601      	mov	r1, r0
 800647a:	4802      	ldr	r0, [pc, #8]	@ (8006484 <vsiprintf+0x10>)
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f7ff bfe3 	b.w	8006448 <_vsiprintf_r>
 8006482:	bf00      	nop
 8006484:	20000020 	.word	0x20000020

08006488 <memset>:
 8006488:	4603      	mov	r3, r0
 800648a:	4402      	add	r2, r0
 800648c:	4293      	cmp	r3, r2
 800648e:	d100      	bne.n	8006492 <memset+0xa>
 8006490:	4770      	bx	lr
 8006492:	f803 1b01 	strb.w	r1, [r3], #1
 8006496:	e7f9      	b.n	800648c <memset+0x4>

08006498 <_localeconv_r>:
 8006498:	4800      	ldr	r0, [pc, #0]	@ (800649c <_localeconv_r+0x4>)
 800649a:	4770      	bx	lr
 800649c:	20000160 	.word	0x20000160

080064a0 <_close_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	2300      	movs	r3, #0
 80064a4:	4d05      	ldr	r5, [pc, #20]	@ (80064bc <_close_r+0x1c>)
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fc f863 	bl	8002576 <_close>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_close_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_close_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200008d0 	.word	0x200008d0

080064c0 <_lseek_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	2200      	movs	r2, #0
 80064ca:	4d05      	ldr	r5, [pc, #20]	@ (80064e0 <_lseek_r+0x20>)
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fc f875 	bl	80025be <_lseek>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_lseek_r+0x1e>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_lseek_r+0x1e>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	200008d0 	.word	0x200008d0

080064e4 <_read_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	2200      	movs	r2, #0
 80064ee:	4d05      	ldr	r5, [pc, #20]	@ (8006504 <_read_r+0x20>)
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fc f806 	bl	8002504 <_read>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_read_r+0x1e>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_read_r+0x1e>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	200008d0 	.word	0x200008d0

08006508 <_write_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	2200      	movs	r2, #0
 8006512:	4d05      	ldr	r5, [pc, #20]	@ (8006528 <_write_r+0x20>)
 8006514:	602a      	str	r2, [r5, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f7fc f811 	bl	800253e <_write>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_write_r+0x1e>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_write_r+0x1e>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	200008d0 	.word	0x200008d0

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	@ (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000020 	.word	0x20000020

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	2600      	movs	r6, #0
 800653c:	4d0c      	ldr	r5, [pc, #48]	@ (8006570 <__libc_init_array+0x38>)
 800653e:	4c0d      	ldr	r4, [pc, #52]	@ (8006574 <__libc_init_array+0x3c>)
 8006540:	1b64      	subs	r4, r4, r5
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	f003 fece 	bl	800a2e8 <_init>
 800654c:	2600      	movs	r6, #0
 800654e:	4d0a      	ldr	r5, [pc, #40]	@ (8006578 <__libc_init_array+0x40>)
 8006550:	4c0a      	ldr	r4, [pc, #40]	@ (800657c <__libc_init_array+0x44>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	0800b018 	.word	0x0800b018
 8006574:	0800b018 	.word	0x0800b018
 8006578:	0800b018 	.word	0x0800b018
 800657c:	0800b01c 	.word	0x0800b01c

08006580 <__retarget_lock_init_recursive>:
 8006580:	4770      	bx	lr

08006582 <__retarget_lock_acquire_recursive>:
 8006582:	4770      	bx	lr

08006584 <__retarget_lock_release_recursive>:
 8006584:	4770      	bx	lr

08006586 <memchr>:
 8006586:	4603      	mov	r3, r0
 8006588:	b510      	push	{r4, lr}
 800658a:	b2c9      	uxtb	r1, r1
 800658c:	4402      	add	r2, r0
 800658e:	4293      	cmp	r3, r2
 8006590:	4618      	mov	r0, r3
 8006592:	d101      	bne.n	8006598 <memchr+0x12>
 8006594:	2000      	movs	r0, #0
 8006596:	e003      	b.n	80065a0 <memchr+0x1a>
 8006598:	7804      	ldrb	r4, [r0, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	428c      	cmp	r4, r1
 800659e:	d1f6      	bne.n	800658e <memchr+0x8>
 80065a0:	bd10      	pop	{r4, pc}
	...

080065a4 <nanf>:
 80065a4:	4800      	ldr	r0, [pc, #0]	@ (80065a8 <nanf+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	7fc00000 	.word	0x7fc00000

080065ac <quorem>:
 80065ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	6903      	ldr	r3, [r0, #16]
 80065b2:	690c      	ldr	r4, [r1, #16]
 80065b4:	4607      	mov	r7, r0
 80065b6:	42a3      	cmp	r3, r4
 80065b8:	db7e      	blt.n	80066b8 <quorem+0x10c>
 80065ba:	3c01      	subs	r4, #1
 80065bc:	00a3      	lsls	r3, r4, #2
 80065be:	f100 0514 	add.w	r5, r0, #20
 80065c2:	f101 0814 	add.w	r8, r1, #20
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d6:	3301      	adds	r3, #1
 80065d8:	429a      	cmp	r2, r3
 80065da:	fbb2 f6f3 	udiv	r6, r2, r3
 80065de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065e2:	d32e      	bcc.n	8006642 <quorem+0x96>
 80065e4:	f04f 0a00 	mov.w	sl, #0
 80065e8:	46c4      	mov	ip, r8
 80065ea:	46ae      	mov	lr, r5
 80065ec:	46d3      	mov	fp, sl
 80065ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065f2:	b298      	uxth	r0, r3
 80065f4:	fb06 a000 	mla	r0, r6, r0, sl
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	0c02      	lsrs	r2, r0, #16
 80065fc:	fb06 2303 	mla	r3, r6, r3, r2
 8006600:	f8de 2000 	ldr.w	r2, [lr]
 8006604:	b280      	uxth	r0, r0
 8006606:	b292      	uxth	r2, r2
 8006608:	1a12      	subs	r2, r2, r0
 800660a:	445a      	add	r2, fp
 800660c:	f8de 0000 	ldr.w	r0, [lr]
 8006610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006614:	b29b      	uxth	r3, r3
 8006616:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800661a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800661e:	b292      	uxth	r2, r2
 8006620:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006624:	45e1      	cmp	r9, ip
 8006626:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800662a:	f84e 2b04 	str.w	r2, [lr], #4
 800662e:	d2de      	bcs.n	80065ee <quorem+0x42>
 8006630:	9b00      	ldr	r3, [sp, #0]
 8006632:	58eb      	ldr	r3, [r5, r3]
 8006634:	b92b      	cbnz	r3, 8006642 <quorem+0x96>
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	3b04      	subs	r3, #4
 800663a:	429d      	cmp	r5, r3
 800663c:	461a      	mov	r2, r3
 800663e:	d32f      	bcc.n	80066a0 <quorem+0xf4>
 8006640:	613c      	str	r4, [r7, #16]
 8006642:	4638      	mov	r0, r7
 8006644:	f001 f9c4 	bl	80079d0 <__mcmp>
 8006648:	2800      	cmp	r0, #0
 800664a:	db25      	blt.n	8006698 <quorem+0xec>
 800664c:	4629      	mov	r1, r5
 800664e:	2000      	movs	r0, #0
 8006650:	f858 2b04 	ldr.w	r2, [r8], #4
 8006654:	f8d1 c000 	ldr.w	ip, [r1]
 8006658:	fa1f fe82 	uxth.w	lr, r2
 800665c:	fa1f f38c 	uxth.w	r3, ip
 8006660:	eba3 030e 	sub.w	r3, r3, lr
 8006664:	4403      	add	r3, r0
 8006666:	0c12      	lsrs	r2, r2, #16
 8006668:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800666c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006676:	45c1      	cmp	r9, r8
 8006678:	ea4f 4022 	mov.w	r0, r2, asr #16
 800667c:	f841 3b04 	str.w	r3, [r1], #4
 8006680:	d2e6      	bcs.n	8006650 <quorem+0xa4>
 8006682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668a:	b922      	cbnz	r2, 8006696 <quorem+0xea>
 800668c:	3b04      	subs	r3, #4
 800668e:	429d      	cmp	r5, r3
 8006690:	461a      	mov	r2, r3
 8006692:	d30b      	bcc.n	80066ac <quorem+0x100>
 8006694:	613c      	str	r4, [r7, #16]
 8006696:	3601      	adds	r6, #1
 8006698:	4630      	mov	r0, r6
 800669a:	b003      	add	sp, #12
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	3b04      	subs	r3, #4
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	d1cb      	bne.n	8006640 <quorem+0x94>
 80066a8:	3c01      	subs	r4, #1
 80066aa:	e7c6      	b.n	800663a <quorem+0x8e>
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	3b04      	subs	r3, #4
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	d1ef      	bne.n	8006694 <quorem+0xe8>
 80066b4:	3c01      	subs	r4, #1
 80066b6:	e7ea      	b.n	800668e <quorem+0xe2>
 80066b8:	2000      	movs	r0, #0
 80066ba:	e7ee      	b.n	800669a <quorem+0xee>
 80066bc:	0000      	movs	r0, r0
	...

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	69c7      	ldr	r7, [r0, #28]
 80066ca:	b097      	sub	sp, #92	@ 0x5c
 80066cc:	4683      	mov	fp, r0
 80066ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80066d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80066d4:	b97f      	cbnz	r7, 80066f6 <_dtoa_r+0x36>
 80066d6:	2010      	movs	r0, #16
 80066d8:	f000 fe02 	bl	80072e0 <malloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	f8cb 001c 	str.w	r0, [fp, #28]
 80066e2:	b920      	cbnz	r0, 80066ee <_dtoa_r+0x2e>
 80066e4:	21ef      	movs	r1, #239	@ 0xef
 80066e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006988 <_dtoa_r+0x2c8>)
 80066e8:	48a8      	ldr	r0, [pc, #672]	@ (800698c <_dtoa_r+0x2cc>)
 80066ea:	f002 fdf7 	bl	80092dc <__assert_func>
 80066ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066f2:	6007      	str	r7, [r0, #0]
 80066f4:	60c7      	str	r7, [r0, #12]
 80066f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	b159      	cbz	r1, 8006716 <_dtoa_r+0x56>
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	2301      	movs	r3, #1
 8006702:	4093      	lsls	r3, r2
 8006704:	604a      	str	r2, [r1, #4]
 8006706:	608b      	str	r3, [r1, #8]
 8006708:	4658      	mov	r0, fp
 800670a:	f000 fedf 	bl	80074cc <_Bfree>
 800670e:	2200      	movs	r2, #0
 8006710:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	1e2b      	subs	r3, r5, #0
 8006718:	bfaf      	iteee	ge
 800671a:	2300      	movge	r3, #0
 800671c:	2201      	movlt	r2, #1
 800671e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006722:	9303      	strlt	r3, [sp, #12]
 8006724:	bfa8      	it	ge
 8006726:	6033      	strge	r3, [r6, #0]
 8006728:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800672c:	4b98      	ldr	r3, [pc, #608]	@ (8006990 <_dtoa_r+0x2d0>)
 800672e:	bfb8      	it	lt
 8006730:	6032      	strlt	r2, [r6, #0]
 8006732:	ea33 0308 	bics.w	r3, r3, r8
 8006736:	d112      	bne.n	800675e <_dtoa_r+0x9e>
 8006738:	f242 730f 	movw	r3, #9999	@ 0x270f
 800673c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006744:	4323      	orrs	r3, r4
 8006746:	f000 8550 	beq.w	80071ea <_dtoa_r+0xb2a>
 800674a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800674c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006994 <_dtoa_r+0x2d4>
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8552 	beq.w	80071fa <_dtoa_r+0xb3a>
 8006756:	f10a 0303 	add.w	r3, sl, #3
 800675a:	f000 bd4c 	b.w	80071f6 <_dtoa_r+0xb36>
 800675e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006762:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800676a:	2200      	movs	r2, #0
 800676c:	2300      	movs	r3, #0
 800676e:	f7fa f91b 	bl	80009a8 <__aeabi_dcmpeq>
 8006772:	4607      	mov	r7, r0
 8006774:	b158      	cbz	r0, 800678e <_dtoa_r+0xce>
 8006776:	2301      	movs	r3, #1
 8006778:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800677e:	b113      	cbz	r3, 8006786 <_dtoa_r+0xc6>
 8006780:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <_dtoa_r+0x2d8>)
 8006782:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800699c <_dtoa_r+0x2dc>
 800678a:	f000 bd36 	b.w	80071fa <_dtoa_r+0xb3a>
 800678e:	ab14      	add	r3, sp, #80	@ 0x50
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	ab15      	add	r3, sp, #84	@ 0x54
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4658      	mov	r0, fp
 8006798:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800679c:	f001 fa30 	bl	8007c00 <__d2b>
 80067a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80067a4:	4681      	mov	r9, r0
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d077      	beq.n	800689a <_dtoa_r+0x1da>
 80067aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80067c2:	4619      	mov	r1, r3
 80067c4:	2200      	movs	r2, #0
 80067c6:	4b76      	ldr	r3, [pc, #472]	@ (80069a0 <_dtoa_r+0x2e0>)
 80067c8:	f7f9 fcce 	bl	8000168 <__aeabi_dsub>
 80067cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006970 <_dtoa_r+0x2b0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	a368      	add	r3, pc, #416	@ (adr r3, 8006978 <_dtoa_r+0x2b8>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7f9 fcc6 	bl	800016c <__adddf3>
 80067e0:	4604      	mov	r4, r0
 80067e2:	4630      	mov	r0, r6
 80067e4:	460d      	mov	r5, r1
 80067e6:	f7f9 fe0d 	bl	8000404 <__aeabi_i2d>
 80067ea:	a365      	add	r3, pc, #404	@ (adr r3, 8006980 <_dtoa_r+0x2c0>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fe72 	bl	80004d8 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4620      	mov	r0, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fcb6 	bl	800016c <__adddf3>
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	f7fa f918 	bl	8000a38 <__aeabi_d2iz>
 8006808:	2200      	movs	r2, #0
 800680a:	4607      	mov	r7, r0
 800680c:	2300      	movs	r3, #0
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f8d3 	bl	80009bc <__aeabi_dcmplt>
 8006816:	b140      	cbz	r0, 800682a <_dtoa_r+0x16a>
 8006818:	4638      	mov	r0, r7
 800681a:	f7f9 fdf3 	bl	8000404 <__aeabi_i2d>
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f7fa f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006826:	b900      	cbnz	r0, 800682a <_dtoa_r+0x16a>
 8006828:	3f01      	subs	r7, #1
 800682a:	2f16      	cmp	r7, #22
 800682c:	d853      	bhi.n	80068d6 <_dtoa_r+0x216>
 800682e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006832:	4b5c      	ldr	r3, [pc, #368]	@ (80069a4 <_dtoa_r+0x2e4>)
 8006834:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7fa f8be 	bl	80009bc <__aeabi_dcmplt>
 8006840:	2800      	cmp	r0, #0
 8006842:	d04a      	beq.n	80068da <_dtoa_r+0x21a>
 8006844:	2300      	movs	r3, #0
 8006846:	3f01      	subs	r7, #1
 8006848:	930f      	str	r3, [sp, #60]	@ 0x3c
 800684a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800684c:	1b9b      	subs	r3, r3, r6
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	bf46      	itte	mi
 8006852:	f1c3 0801 	rsbmi	r8, r3, #1
 8006856:	2300      	movmi	r3, #0
 8006858:	f04f 0800 	movpl.w	r8, #0
 800685c:	9209      	str	r2, [sp, #36]	@ 0x24
 800685e:	bf48      	it	mi
 8006860:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006862:	2f00      	cmp	r7, #0
 8006864:	db3b      	blt.n	80068de <_dtoa_r+0x21e>
 8006866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006868:	970e      	str	r7, [sp, #56]	@ 0x38
 800686a:	443b      	add	r3, r7
 800686c:	9309      	str	r3, [sp, #36]	@ 0x24
 800686e:	2300      	movs	r3, #0
 8006870:	930a      	str	r3, [sp, #40]	@ 0x28
 8006872:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006874:	2b09      	cmp	r3, #9
 8006876:	d866      	bhi.n	8006946 <_dtoa_r+0x286>
 8006878:	2b05      	cmp	r3, #5
 800687a:	bfc4      	itt	gt
 800687c:	3b04      	subgt	r3, #4
 800687e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006880:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006882:	bfc8      	it	gt
 8006884:	2400      	movgt	r4, #0
 8006886:	f1a3 0302 	sub.w	r3, r3, #2
 800688a:	bfd8      	it	le
 800688c:	2401      	movle	r4, #1
 800688e:	2b03      	cmp	r3, #3
 8006890:	d864      	bhi.n	800695c <_dtoa_r+0x29c>
 8006892:	e8df f003 	tbb	[pc, r3]
 8006896:	382b      	.short	0x382b
 8006898:	5636      	.short	0x5636
 800689a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800689e:	441e      	add	r6, r3
 80068a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	bfc1      	itttt	gt
 80068a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80068b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068b8:	bfd6      	itet	le
 80068ba:	f1c3 0320 	rsble	r3, r3, #32
 80068be:	ea48 0003 	orrgt.w	r0, r8, r3
 80068c2:	fa04 f003 	lslle.w	r0, r4, r3
 80068c6:	f7f9 fd8d 	bl	80003e4 <__aeabi_ui2d>
 80068ca:	2201      	movs	r2, #1
 80068cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068d0:	3e01      	subs	r6, #1
 80068d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80068d4:	e775      	b.n	80067c2 <_dtoa_r+0x102>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e7b6      	b.n	8006848 <_dtoa_r+0x188>
 80068da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80068dc:	e7b5      	b.n	800684a <_dtoa_r+0x18a>
 80068de:	427b      	negs	r3, r7
 80068e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e2:	2300      	movs	r3, #0
 80068e4:	eba8 0807 	sub.w	r8, r8, r7
 80068e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80068ea:	e7c2      	b.n	8006872 <_dtoa_r+0x1b2>
 80068ec:	2300      	movs	r3, #0
 80068ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dc35      	bgt.n	8006962 <_dtoa_r+0x2a2>
 80068f6:	2301      	movs	r3, #1
 80068f8:	461a      	mov	r2, r3
 80068fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80068fe:	9221      	str	r2, [sp, #132]	@ 0x84
 8006900:	e00b      	b.n	800691a <_dtoa_r+0x25a>
 8006902:	2301      	movs	r3, #1
 8006904:	e7f3      	b.n	80068ee <_dtoa_r+0x22e>
 8006906:	2300      	movs	r3, #0
 8006908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800690a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	9308      	str	r3, [sp, #32]
 8006910:	3301      	adds	r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	9307      	str	r3, [sp, #28]
 8006916:	bfb8      	it	lt
 8006918:	2301      	movlt	r3, #1
 800691a:	2100      	movs	r1, #0
 800691c:	2204      	movs	r2, #4
 800691e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006922:	f102 0514 	add.w	r5, r2, #20
 8006926:	429d      	cmp	r5, r3
 8006928:	d91f      	bls.n	800696a <_dtoa_r+0x2aa>
 800692a:	6041      	str	r1, [r0, #4]
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fd8d 	bl	800744c <_Balloc>
 8006932:	4682      	mov	sl, r0
 8006934:	2800      	cmp	r0, #0
 8006936:	d139      	bne.n	80069ac <_dtoa_r+0x2ec>
 8006938:	4602      	mov	r2, r0
 800693a:	f240 11af 	movw	r1, #431	@ 0x1af
 800693e:	4b1a      	ldr	r3, [pc, #104]	@ (80069a8 <_dtoa_r+0x2e8>)
 8006940:	e6d2      	b.n	80066e8 <_dtoa_r+0x28>
 8006942:	2301      	movs	r3, #1
 8006944:	e7e0      	b.n	8006908 <_dtoa_r+0x248>
 8006946:	2401      	movs	r4, #1
 8006948:	2300      	movs	r3, #0
 800694a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800694c:	9320      	str	r3, [sp, #128]	@ 0x80
 800694e:	f04f 33ff 	mov.w	r3, #4294967295
 8006952:	2200      	movs	r2, #0
 8006954:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006958:	2312      	movs	r3, #18
 800695a:	e7d0      	b.n	80068fe <_dtoa_r+0x23e>
 800695c:	2301      	movs	r3, #1
 800695e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006960:	e7f5      	b.n	800694e <_dtoa_r+0x28e>
 8006962:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006964:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006968:	e7d7      	b.n	800691a <_dtoa_r+0x25a>
 800696a:	3101      	adds	r1, #1
 800696c:	0052      	lsls	r2, r2, #1
 800696e:	e7d8      	b.n	8006922 <_dtoa_r+0x262>
 8006970:	636f4361 	.word	0x636f4361
 8006974:	3fd287a7 	.word	0x3fd287a7
 8006978:	8b60c8b3 	.word	0x8b60c8b3
 800697c:	3fc68a28 	.word	0x3fc68a28
 8006980:	509f79fb 	.word	0x509f79fb
 8006984:	3fd34413 	.word	0x3fd34413
 8006988:	0800abb4 	.word	0x0800abb4
 800698c:	0800abcb 	.word	0x0800abcb
 8006990:	7ff00000 	.word	0x7ff00000
 8006994:	0800abb0 	.word	0x0800abb0
 8006998:	0800ab7f 	.word	0x0800ab7f
 800699c:	0800ab7e 	.word	0x0800ab7e
 80069a0:	3ff80000 	.word	0x3ff80000
 80069a4:	0800acc8 	.word	0x0800acc8
 80069a8:	0800ac23 	.word	0x0800ac23
 80069ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069b0:	6018      	str	r0, [r3, #0]
 80069b2:	9b07      	ldr	r3, [sp, #28]
 80069b4:	2b0e      	cmp	r3, #14
 80069b6:	f200 80a4 	bhi.w	8006b02 <_dtoa_r+0x442>
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	f000 80a1 	beq.w	8006b02 <_dtoa_r+0x442>
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	dd33      	ble.n	8006a2c <_dtoa_r+0x36c>
 80069c4:	4b86      	ldr	r3, [pc, #536]	@ (8006be0 <_dtoa_r+0x520>)
 80069c6:	f007 020f 	and.w	r2, r7, #15
 80069ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ce:	05f8      	lsls	r0, r7, #23
 80069d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069dc:	d516      	bpl.n	8006a0c <_dtoa_r+0x34c>
 80069de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069e2:	4b80      	ldr	r3, [pc, #512]	@ (8006be4 <_dtoa_r+0x524>)
 80069e4:	2603      	movs	r6, #3
 80069e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069ea:	f7f9 fe9f 	bl	800072c <__aeabi_ddiv>
 80069ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f2:	f004 040f 	and.w	r4, r4, #15
 80069f6:	4d7b      	ldr	r5, [pc, #492]	@ (8006be4 <_dtoa_r+0x524>)
 80069f8:	b954      	cbnz	r4, 8006a10 <_dtoa_r+0x350>
 80069fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a02:	f7f9 fe93 	bl	800072c <__aeabi_ddiv>
 8006a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a0a:	e028      	b.n	8006a5e <_dtoa_r+0x39e>
 8006a0c:	2602      	movs	r6, #2
 8006a0e:	e7f2      	b.n	80069f6 <_dtoa_r+0x336>
 8006a10:	07e1      	lsls	r1, r4, #31
 8006a12:	d508      	bpl.n	8006a26 <_dtoa_r+0x366>
 8006a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a1c:	f7f9 fd5c 	bl	80004d8 <__aeabi_dmul>
 8006a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a24:	3601      	adds	r6, #1
 8006a26:	1064      	asrs	r4, r4, #1
 8006a28:	3508      	adds	r5, #8
 8006a2a:	e7e5      	b.n	80069f8 <_dtoa_r+0x338>
 8006a2c:	f000 80d2 	beq.w	8006bd4 <_dtoa_r+0x514>
 8006a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a34:	427c      	negs	r4, r7
 8006a36:	4b6a      	ldr	r3, [pc, #424]	@ (8006be0 <_dtoa_r+0x520>)
 8006a38:	f004 020f 	and.w	r2, r4, #15
 8006a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fd48 	bl	80004d8 <__aeabi_dmul>
 8006a48:	2602      	movs	r6, #2
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a50:	4d64      	ldr	r5, [pc, #400]	@ (8006be4 <_dtoa_r+0x524>)
 8006a52:	1124      	asrs	r4, r4, #4
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	f040 80b2 	bne.w	8006bbe <_dtoa_r+0x4fe>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1d3      	bne.n	8006a06 <_dtoa_r+0x346>
 8006a5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80b7 	beq.w	8006bd8 <_dtoa_r+0x518>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4b5d      	ldr	r3, [pc, #372]	@ (8006be8 <_dtoa_r+0x528>)
 8006a72:	f7f9 ffa3 	bl	80009bc <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f000 80ae 	beq.w	8006bd8 <_dtoa_r+0x518>
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80aa 	beq.w	8006bd8 <_dtoa_r+0x518>
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	dd37      	ble.n	8006afa <_dtoa_r+0x43a>
 8006a8a:	1e7b      	subs	r3, r7, #1
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	2200      	movs	r2, #0
 8006a92:	4629      	mov	r1, r5
 8006a94:	4b55      	ldr	r3, [pc, #340]	@ (8006bec <_dtoa_r+0x52c>)
 8006a96:	f7f9 fd1f 	bl	80004d8 <__aeabi_dmul>
 8006a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a9e:	9c08      	ldr	r4, [sp, #32]
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7f9 fcae 	bl	8000404 <__aeabi_i2d>
 8006aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aac:	f7f9 fd14 	bl	80004d8 <__aeabi_dmul>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf0 <_dtoa_r+0x530>)
 8006ab4:	f7f9 fb5a 	bl	800016c <__adddf3>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006abe:	2c00      	cmp	r4, #0
 8006ac0:	f040 809a 	bne.w	8006bf8 <_dtoa_r+0x538>
 8006ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4b4a      	ldr	r3, [pc, #296]	@ (8006bf4 <_dtoa_r+0x534>)
 8006acc:	f7f9 fb4c 	bl	8000168 <__aeabi_dsub>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4633      	mov	r3, r6
 8006adc:	f7f9 ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f040 828e 	bne.w	8007002 <_dtoa_r+0x942>
 8006ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aea:	462a      	mov	r2, r5
 8006aec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006af0:	f7f9 ff64 	bl	80009bc <__aeabi_dcmplt>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 8127 	bne.w	8006d48 <_dtoa_r+0x688>
 8006afa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006afe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f2c0 8163 	blt.w	8006dd0 <_dtoa_r+0x710>
 8006b0a:	2f0e      	cmp	r7, #14
 8006b0c:	f300 8160 	bgt.w	8006dd0 <_dtoa_r+0x710>
 8006b10:	4b33      	ldr	r3, [pc, #204]	@ (8006be0 <_dtoa_r+0x520>)
 8006b12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da03      	bge.n	8006b2c <_dtoa_r+0x46c>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f340 8100 	ble.w	8006d2c <_dtoa_r+0x66c>
 8006b2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b30:	4656      	mov	r6, sl
 8006b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 fdf7 	bl	800072c <__aeabi_ddiv>
 8006b3e:	f7f9 ff7b 	bl	8000a38 <__aeabi_d2iz>
 8006b42:	4680      	mov	r8, r0
 8006b44:	f7f9 fc5e 	bl	8000404 <__aeabi_i2d>
 8006b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b4c:	f7f9 fcc4 	bl	80004d8 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fb06 	bl	8000168 <__aeabi_dsub>
 8006b5c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b60:	9d07      	ldr	r5, [sp, #28]
 8006b62:	f806 4b01 	strb.w	r4, [r6], #1
 8006b66:	eba6 040a 	sub.w	r4, r6, sl
 8006b6a:	42a5      	cmp	r5, r4
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	f040 8116 	bne.w	8006da0 <_dtoa_r+0x6e0>
 8006b74:	f7f9 fafa 	bl	800016c <__adddf3>
 8006b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	f7f9 ff3a 	bl	80009f8 <__aeabi_dcmpgt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f040 80f8 	bne.w	8006d7a <_dtoa_r+0x6ba>
 8006b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 ff09 	bl	80009a8 <__aeabi_dcmpeq>
 8006b96:	b118      	cbz	r0, 8006ba0 <_dtoa_r+0x4e0>
 8006b98:	f018 0f01 	tst.w	r8, #1
 8006b9c:	f040 80ed 	bne.w	8006d7a <_dtoa_r+0x6ba>
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f000 fc92 	bl	80074cc <_Bfree>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	7033      	strb	r3, [r6, #0]
 8006bac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bae:	3701      	adds	r7, #1
 8006bb0:	601f      	str	r7, [r3, #0]
 8006bb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8320 	beq.w	80071fa <_dtoa_r+0xb3a>
 8006bba:	601e      	str	r6, [r3, #0]
 8006bbc:	e31d      	b.n	80071fa <_dtoa_r+0xb3a>
 8006bbe:	07e2      	lsls	r2, r4, #31
 8006bc0:	d505      	bpl.n	8006bce <_dtoa_r+0x50e>
 8006bc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bc6:	f7f9 fc87 	bl	80004d8 <__aeabi_dmul>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	3601      	adds	r6, #1
 8006bce:	1064      	asrs	r4, r4, #1
 8006bd0:	3508      	adds	r5, #8
 8006bd2:	e73f      	b.n	8006a54 <_dtoa_r+0x394>
 8006bd4:	2602      	movs	r6, #2
 8006bd6:	e742      	b.n	8006a5e <_dtoa_r+0x39e>
 8006bd8:	9c07      	ldr	r4, [sp, #28]
 8006bda:	9704      	str	r7, [sp, #16]
 8006bdc:	e761      	b.n	8006aa2 <_dtoa_r+0x3e2>
 8006bde:	bf00      	nop
 8006be0:	0800acc8 	.word	0x0800acc8
 8006be4:	0800aca0 	.word	0x0800aca0
 8006be8:	3ff00000 	.word	0x3ff00000
 8006bec:	40240000 	.word	0x40240000
 8006bf0:	401c0000 	.word	0x401c0000
 8006bf4:	40140000 	.word	0x40140000
 8006bf8:	4b70      	ldr	r3, [pc, #448]	@ (8006dbc <_dtoa_r+0x6fc>)
 8006bfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c04:	4454      	add	r4, sl
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d045      	beq.n	8006c96 <_dtoa_r+0x5d6>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	496c      	ldr	r1, [pc, #432]	@ (8006dc0 <_dtoa_r+0x700>)
 8006c0e:	f7f9 fd8d 	bl	800072c <__aeabi_ddiv>
 8006c12:	4633      	mov	r3, r6
 8006c14:	462a      	mov	r2, r5
 8006c16:	f7f9 faa7 	bl	8000168 <__aeabi_dsub>
 8006c1a:	4656      	mov	r6, sl
 8006c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c24:	f7f9 ff08 	bl	8000a38 <__aeabi_d2iz>
 8006c28:	4605      	mov	r5, r0
 8006c2a:	f7f9 fbeb 	bl	8000404 <__aeabi_i2d>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c36:	f7f9 fa97 	bl	8000168 <__aeabi_dsub>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	3530      	adds	r5, #48	@ 0x30
 8006c40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c48:	f806 5b01 	strb.w	r5, [r6], #1
 8006c4c:	f7f9 feb6 	bl	80009bc <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d163      	bne.n	8006d1c <_dtoa_r+0x65c>
 8006c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	495a      	ldr	r1, [pc, #360]	@ (8006dc4 <_dtoa_r+0x704>)
 8006c5c:	f7f9 fa84 	bl	8000168 <__aeabi_dsub>
 8006c60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c64:	f7f9 feaa 	bl	80009bc <__aeabi_dcmplt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f040 8087 	bne.w	8006d7c <_dtoa_r+0x6bc>
 8006c6e:	42a6      	cmp	r6, r4
 8006c70:	f43f af43 	beq.w	8006afa <_dtoa_r+0x43a>
 8006c74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4b53      	ldr	r3, [pc, #332]	@ (8006dc8 <_dtoa_r+0x708>)
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc8 <_dtoa_r+0x708>)
 8006c8c:	f7f9 fc24 	bl	80004d8 <__aeabi_dmul>
 8006c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c94:	e7c4      	b.n	8006c20 <_dtoa_r+0x560>
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7f9 fc1d 	bl	80004d8 <__aeabi_dmul>
 8006c9e:	4656      	mov	r6, sl
 8006ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ca4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006caa:	f7f9 fec5 	bl	8000a38 <__aeabi_d2iz>
 8006cae:	4605      	mov	r5, r0
 8006cb0:	f7f9 fba8 	bl	8000404 <__aeabi_i2d>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cbc:	f7f9 fa54 	bl	8000168 <__aeabi_dsub>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	3530      	adds	r5, #48	@ 0x30
 8006cc6:	f806 5b01 	strb.w	r5, [r6], #1
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	d124      	bne.n	8006d20 <_dtoa_r+0x660>
 8006cd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cda:	4b39      	ldr	r3, [pc, #228]	@ (8006dc0 <_dtoa_r+0x700>)
 8006cdc:	f7f9 fa46 	bl	800016c <__adddf3>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce8:	f7f9 fe86 	bl	80009f8 <__aeabi_dcmpgt>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d145      	bne.n	8006d7c <_dtoa_r+0x6bc>
 8006cf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	4932      	ldr	r1, [pc, #200]	@ (8006dc0 <_dtoa_r+0x700>)
 8006cf8:	f7f9 fa36 	bl	8000168 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d04:	f7f9 fe5a 	bl	80009bc <__aeabi_dcmplt>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f aef6 	beq.w	8006afa <_dtoa_r+0x43a>
 8006d0e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d10:	1e73      	subs	r3, r6, #1
 8006d12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d18:	2b30      	cmp	r3, #48	@ 0x30
 8006d1a:	d0f8      	beq.n	8006d0e <_dtoa_r+0x64e>
 8006d1c:	9f04      	ldr	r7, [sp, #16]
 8006d1e:	e73f      	b.n	8006ba0 <_dtoa_r+0x4e0>
 8006d20:	4b29      	ldr	r3, [pc, #164]	@ (8006dc8 <_dtoa_r+0x708>)
 8006d22:	f7f9 fbd9 	bl	80004d8 <__aeabi_dmul>
 8006d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d2a:	e7bc      	b.n	8006ca6 <_dtoa_r+0x5e6>
 8006d2c:	d10c      	bne.n	8006d48 <_dtoa_r+0x688>
 8006d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d32:	2200      	movs	r2, #0
 8006d34:	4b25      	ldr	r3, [pc, #148]	@ (8006dcc <_dtoa_r+0x70c>)
 8006d36:	f7f9 fbcf 	bl	80004d8 <__aeabi_dmul>
 8006d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d3e:	f7f9 fe51 	bl	80009e4 <__aeabi_dcmpge>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f000 815b 	beq.w	8006ffe <_dtoa_r+0x93e>
 8006d48:	2400      	movs	r4, #0
 8006d4a:	4625      	mov	r5, r4
 8006d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d4e:	4656      	mov	r6, sl
 8006d50:	43db      	mvns	r3, r3
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	2700      	movs	r7, #0
 8006d56:	4621      	mov	r1, r4
 8006d58:	4658      	mov	r0, fp
 8006d5a:	f000 fbb7 	bl	80074cc <_Bfree>
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	d0dc      	beq.n	8006d1c <_dtoa_r+0x65c>
 8006d62:	b12f      	cbz	r7, 8006d70 <_dtoa_r+0x6b0>
 8006d64:	42af      	cmp	r7, r5
 8006d66:	d003      	beq.n	8006d70 <_dtoa_r+0x6b0>
 8006d68:	4639      	mov	r1, r7
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f000 fbae 	bl	80074cc <_Bfree>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4658      	mov	r0, fp
 8006d74:	f000 fbaa 	bl	80074cc <_Bfree>
 8006d78:	e7d0      	b.n	8006d1c <_dtoa_r+0x65c>
 8006d7a:	9704      	str	r7, [sp, #16]
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	461e      	mov	r6, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a39      	cmp	r2, #57	@ 0x39
 8006d86:	d107      	bne.n	8006d98 <_dtoa_r+0x6d8>
 8006d88:	459a      	cmp	sl, r3
 8006d8a:	d1f8      	bne.n	8006d7e <_dtoa_r+0x6be>
 8006d8c:	9a04      	ldr	r2, [sp, #16]
 8006d8e:	3201      	adds	r2, #1
 8006d90:	9204      	str	r2, [sp, #16]
 8006d92:	2230      	movs	r2, #48	@ 0x30
 8006d94:	f88a 2000 	strb.w	r2, [sl]
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e7bd      	b.n	8006d1c <_dtoa_r+0x65c>
 8006da0:	2200      	movs	r2, #0
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <_dtoa_r+0x708>)
 8006da4:	f7f9 fb98 	bl	80004d8 <__aeabi_dmul>
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	4604      	mov	r4, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	f7f9 fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f43f aebc 	beq.w	8006b32 <_dtoa_r+0x472>
 8006dba:	e6f1      	b.n	8006ba0 <_dtoa_r+0x4e0>
 8006dbc:	0800acc8 	.word	0x0800acc8
 8006dc0:	3fe00000 	.word	0x3fe00000
 8006dc4:	3ff00000 	.word	0x3ff00000
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	40140000 	.word	0x40140000
 8006dd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	f000 80db 	beq.w	8006f8e <_dtoa_r+0x8ce>
 8006dd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006dda:	2a01      	cmp	r2, #1
 8006ddc:	f300 80bf 	bgt.w	8006f5e <_dtoa_r+0x89e>
 8006de0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	f000 80b7 	beq.w	8006f56 <_dtoa_r+0x896>
 8006de8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dec:	4646      	mov	r6, r8
 8006dee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df2:	2101      	movs	r1, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	4658      	mov	r0, fp
 8006df8:	4498      	add	r8, r3
 8006dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dfc:	f000 fc64 	bl	80076c8 <__i2b>
 8006e00:	4605      	mov	r5, r0
 8006e02:	b15e      	cbz	r6, 8006e1c <_dtoa_r+0x75c>
 8006e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dd08      	ble.n	8006e1c <_dtoa_r+0x75c>
 8006e0a:	42b3      	cmp	r3, r6
 8006e0c:	bfa8      	it	ge
 8006e0e:	4633      	movge	r3, r6
 8006e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e12:	eba8 0803 	sub.w	r8, r8, r3
 8006e16:	1af6      	subs	r6, r6, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e1e:	b1f3      	cbz	r3, 8006e5e <_dtoa_r+0x79e>
 8006e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80b7 	beq.w	8006f96 <_dtoa_r+0x8d6>
 8006e28:	b18c      	cbz	r4, 8006e4e <_dtoa_r+0x78e>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f000 fd08 	bl	8007844 <__pow5mult>
 8006e34:	464a      	mov	r2, r9
 8006e36:	4601      	mov	r1, r0
 8006e38:	4605      	mov	r5, r0
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f000 fc5a 	bl	80076f4 <__multiply>
 8006e40:	4649      	mov	r1, r9
 8006e42:	9004      	str	r0, [sp, #16]
 8006e44:	4658      	mov	r0, fp
 8006e46:	f000 fb41 	bl	80074cc <_Bfree>
 8006e4a:	9b04      	ldr	r3, [sp, #16]
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e50:	1b1a      	subs	r2, r3, r4
 8006e52:	d004      	beq.n	8006e5e <_dtoa_r+0x79e>
 8006e54:	4649      	mov	r1, r9
 8006e56:	4658      	mov	r0, fp
 8006e58:	f000 fcf4 	bl	8007844 <__pow5mult>
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4658      	mov	r0, fp
 8006e62:	f000 fc31 	bl	80076c8 <__i2b>
 8006e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 81c9 	beq.w	8007202 <_dtoa_r+0xb42>
 8006e70:	461a      	mov	r2, r3
 8006e72:	4601      	mov	r1, r0
 8006e74:	4658      	mov	r0, fp
 8006e76:	f000 fce5 	bl	8007844 <__pow5mult>
 8006e7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	f300 808f 	bgt.w	8006fa2 <_dtoa_r+0x8e2>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8087 	bne.w	8006f9a <_dtoa_r+0x8da>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 8083 	bne.w	8006f9e <_dtoa_r+0x8de>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e9e:	0d1b      	lsrs	r3, r3, #20
 8006ea0:	051b      	lsls	r3, r3, #20
 8006ea2:	b12b      	cbz	r3, 8006eb0 <_dtoa_r+0x7f0>
 8006ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea6:	f108 0801 	add.w	r8, r8, #1
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	2301      	movs	r3, #1
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 81aa 	beq.w	800720e <_dtoa_r+0xb4e>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ec0:	6918      	ldr	r0, [r3, #16]
 8006ec2:	f000 fbb5 	bl	8007630 <__hi0bits>
 8006ec6:	f1c0 0020 	rsb	r0, r0, #32
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	4418      	add	r0, r3
 8006ece:	f010 001f 	ands.w	r0, r0, #31
 8006ed2:	d071      	beq.n	8006fb8 <_dtoa_r+0x8f8>
 8006ed4:	f1c0 0320 	rsb	r3, r0, #32
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	dd65      	ble.n	8006fa8 <_dtoa_r+0x8e8>
 8006edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ede:	f1c0 001c 	rsb	r0, r0, #28
 8006ee2:	4403      	add	r3, r0
 8006ee4:	4480      	add	r8, r0
 8006ee6:	4406      	add	r6, r0
 8006ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eea:	f1b8 0f00 	cmp.w	r8, #0
 8006eee:	dd05      	ble.n	8006efc <_dtoa_r+0x83c>
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	f000 fcff 	bl	80078f8 <__lshift>
 8006efa:	4681      	mov	r9, r0
 8006efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dd05      	ble.n	8006f0e <_dtoa_r+0x84e>
 8006f02:	4621      	mov	r1, r4
 8006f04:	461a      	mov	r2, r3
 8006f06:	4658      	mov	r0, fp
 8006f08:	f000 fcf6 	bl	80078f8 <__lshift>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d053      	beq.n	8006fbc <_dtoa_r+0x8fc>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4648      	mov	r0, r9
 8006f18:	f000 fd5a 	bl	80079d0 <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	da4d      	bge.n	8006fbc <_dtoa_r+0x8fc>
 8006f20:	1e7b      	subs	r3, r7, #1
 8006f22:	4649      	mov	r1, r9
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	220a      	movs	r2, #10
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f000 faf0 	bl	8007510 <__multadd>
 8006f30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f32:	4681      	mov	r9, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 816c 	beq.w	8007212 <_dtoa_r+0xb52>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	220a      	movs	r2, #10
 8006f40:	4658      	mov	r0, fp
 8006f42:	f000 fae5 	bl	8007510 <__multadd>
 8006f46:	9b08      	ldr	r3, [sp, #32]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dc61      	bgt.n	8007012 <_dtoa_r+0x952>
 8006f4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	dc3b      	bgt.n	8006fcc <_dtoa_r+0x90c>
 8006f54:	e05d      	b.n	8007012 <_dtoa_r+0x952>
 8006f56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f5c:	e746      	b.n	8006dec <_dtoa_r+0x72c>
 8006f5e:	9b07      	ldr	r3, [sp, #28]
 8006f60:	1e5c      	subs	r4, r3, #1
 8006f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	bfbf      	itttt	lt
 8006f68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006f6c:	1ae3      	sublt	r3, r4, r3
 8006f6e:	18d2      	addlt	r2, r2, r3
 8006f70:	bfa8      	it	ge
 8006f72:	1b1c      	subge	r4, r3, r4
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	bfbe      	ittt	lt
 8006f78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006f7c:	2400      	movlt	r4, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb5      	itete	lt
 8006f82:	eba8 0603 	sublt.w	r6, r8, r3
 8006f86:	4646      	movge	r6, r8
 8006f88:	2300      	movlt	r3, #0
 8006f8a:	9b07      	ldrge	r3, [sp, #28]
 8006f8c:	e730      	b.n	8006df0 <_dtoa_r+0x730>
 8006f8e:	4646      	mov	r6, r8
 8006f90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f94:	e735      	b.n	8006e02 <_dtoa_r+0x742>
 8006f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f98:	e75c      	b.n	8006e54 <_dtoa_r+0x794>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e788      	b.n	8006eb0 <_dtoa_r+0x7f0>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	e786      	b.n	8006eb0 <_dtoa_r+0x7f0>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fa6:	e788      	b.n	8006eba <_dtoa_r+0x7fa>
 8006fa8:	d09f      	beq.n	8006eea <_dtoa_r+0x82a>
 8006faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fac:	331c      	adds	r3, #28
 8006fae:	441a      	add	r2, r3
 8006fb0:	4498      	add	r8, r3
 8006fb2:	441e      	add	r6, r3
 8006fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fb6:	e798      	b.n	8006eea <_dtoa_r+0x82a>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	e7f6      	b.n	8006faa <_dtoa_r+0x8ea>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	9704      	str	r7, [sp, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc20      	bgt.n	8007006 <_dtoa_r+0x946>
 8006fc4:	9308      	str	r3, [sp, #32]
 8006fc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	dd1e      	ble.n	800700a <_dtoa_r+0x94a>
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f47f aebc 	bne.w	8006d4c <_dtoa_r+0x68c>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	4658      	mov	r0, fp
 8006fda:	f000 fa99 	bl	8007510 <__multadd>
 8006fde:	4601      	mov	r1, r0
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4648      	mov	r0, r9
 8006fe4:	f000 fcf4 	bl	80079d0 <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f77f aeaf 	ble.w	8006d4c <_dtoa_r+0x68c>
 8006fee:	2331      	movs	r3, #49	@ 0x31
 8006ff0:	4656      	mov	r6, sl
 8006ff2:	f806 3b01 	strb.w	r3, [r6], #1
 8006ff6:	9b04      	ldr	r3, [sp, #16]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	e6aa      	b.n	8006d54 <_dtoa_r+0x694>
 8006ffe:	9c07      	ldr	r4, [sp, #28]
 8007000:	9704      	str	r7, [sp, #16]
 8007002:	4625      	mov	r5, r4
 8007004:	e7f3      	b.n	8006fee <_dtoa_r+0x92e>
 8007006:	9b07      	ldr	r3, [sp, #28]
 8007008:	9308      	str	r3, [sp, #32]
 800700a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8104 	beq.w	800721a <_dtoa_r+0xb5a>
 8007012:	2e00      	cmp	r6, #0
 8007014:	dd05      	ble.n	8007022 <_dtoa_r+0x962>
 8007016:	4629      	mov	r1, r5
 8007018:	4632      	mov	r2, r6
 800701a:	4658      	mov	r0, fp
 800701c:	f000 fc6c 	bl	80078f8 <__lshift>
 8007020:	4605      	mov	r5, r0
 8007022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	d05a      	beq.n	80070de <_dtoa_r+0xa1e>
 8007028:	4658      	mov	r0, fp
 800702a:	6869      	ldr	r1, [r5, #4]
 800702c:	f000 fa0e 	bl	800744c <_Balloc>
 8007030:	4606      	mov	r6, r0
 8007032:	b928      	cbnz	r0, 8007040 <_dtoa_r+0x980>
 8007034:	4602      	mov	r2, r0
 8007036:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800703a:	4b83      	ldr	r3, [pc, #524]	@ (8007248 <_dtoa_r+0xb88>)
 800703c:	f7ff bb54 	b.w	80066e8 <_dtoa_r+0x28>
 8007040:	692a      	ldr	r2, [r5, #16]
 8007042:	f105 010c 	add.w	r1, r5, #12
 8007046:	3202      	adds	r2, #2
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	300c      	adds	r0, #12
 800704c:	f002 f932 	bl	80092b4 <memcpy>
 8007050:	2201      	movs	r2, #1
 8007052:	4631      	mov	r1, r6
 8007054:	4658      	mov	r0, fp
 8007056:	f000 fc4f 	bl	80078f8 <__lshift>
 800705a:	462f      	mov	r7, r5
 800705c:	4605      	mov	r5, r0
 800705e:	f10a 0301 	add.w	r3, sl, #1
 8007062:	9307      	str	r3, [sp, #28]
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	4453      	add	r3, sl
 8007068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800706a:	9b02      	ldr	r3, [sp, #8]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	930a      	str	r3, [sp, #40]	@ 0x28
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	4621      	mov	r1, r4
 8007076:	3b01      	subs	r3, #1
 8007078:	4648      	mov	r0, r9
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	f7ff fa96 	bl	80065ac <quorem>
 8007080:	4639      	mov	r1, r7
 8007082:	9008      	str	r0, [sp, #32]
 8007084:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fca1 	bl	80079d0 <__mcmp>
 800708e:	462a      	mov	r2, r5
 8007090:	9009      	str	r0, [sp, #36]	@ 0x24
 8007092:	4621      	mov	r1, r4
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fcb7 	bl	8007a08 <__mdiff>
 800709a:	68c2      	ldr	r2, [r0, #12]
 800709c:	4606      	mov	r6, r0
 800709e:	bb02      	cbnz	r2, 80070e2 <_dtoa_r+0xa22>
 80070a0:	4601      	mov	r1, r0
 80070a2:	4648      	mov	r0, r9
 80070a4:	f000 fc94 	bl	80079d0 <__mcmp>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4631      	mov	r1, r6
 80070ac:	4658      	mov	r0, fp
 80070ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80070b0:	f000 fa0c 	bl	80074cc <_Bfree>
 80070b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070b8:	9e07      	ldr	r6, [sp, #28]
 80070ba:	ea43 0102 	orr.w	r1, r3, r2
 80070be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c0:	4319      	orrs	r1, r3
 80070c2:	d110      	bne.n	80070e6 <_dtoa_r+0xa26>
 80070c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070c8:	d029      	beq.n	800711e <_dtoa_r+0xa5e>
 80070ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd02      	ble.n	80070d6 <_dtoa_r+0xa16>
 80070d0:	9b08      	ldr	r3, [sp, #32]
 80070d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	f883 8000 	strb.w	r8, [r3]
 80070dc:	e63b      	b.n	8006d56 <_dtoa_r+0x696>
 80070de:	4628      	mov	r0, r5
 80070e0:	e7bb      	b.n	800705a <_dtoa_r+0x99a>
 80070e2:	2201      	movs	r2, #1
 80070e4:	e7e1      	b.n	80070aa <_dtoa_r+0x9ea>
 80070e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db04      	blt.n	80070f6 <_dtoa_r+0xa36>
 80070ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80070ee:	430b      	orrs	r3, r1
 80070f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070f2:	430b      	orrs	r3, r1
 80070f4:	d120      	bne.n	8007138 <_dtoa_r+0xa78>
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	dded      	ble.n	80070d6 <_dtoa_r+0xa16>
 80070fa:	4649      	mov	r1, r9
 80070fc:	2201      	movs	r2, #1
 80070fe:	4658      	mov	r0, fp
 8007100:	f000 fbfa 	bl	80078f8 <__lshift>
 8007104:	4621      	mov	r1, r4
 8007106:	4681      	mov	r9, r0
 8007108:	f000 fc62 	bl	80079d0 <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	dc03      	bgt.n	8007118 <_dtoa_r+0xa58>
 8007110:	d1e1      	bne.n	80070d6 <_dtoa_r+0xa16>
 8007112:	f018 0f01 	tst.w	r8, #1
 8007116:	d0de      	beq.n	80070d6 <_dtoa_r+0xa16>
 8007118:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800711c:	d1d8      	bne.n	80070d0 <_dtoa_r+0xa10>
 800711e:	2339      	movs	r3, #57	@ 0x39
 8007120:	9a02      	ldr	r2, [sp, #8]
 8007122:	7013      	strb	r3, [r2, #0]
 8007124:	4633      	mov	r3, r6
 8007126:	461e      	mov	r6, r3
 8007128:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800712c:	3b01      	subs	r3, #1
 800712e:	2a39      	cmp	r2, #57	@ 0x39
 8007130:	d052      	beq.n	80071d8 <_dtoa_r+0xb18>
 8007132:	3201      	adds	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e60e      	b.n	8006d56 <_dtoa_r+0x696>
 8007138:	2a00      	cmp	r2, #0
 800713a:	dd07      	ble.n	800714c <_dtoa_r+0xa8c>
 800713c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007140:	d0ed      	beq.n	800711e <_dtoa_r+0xa5e>
 8007142:	9a02      	ldr	r2, [sp, #8]
 8007144:	f108 0301 	add.w	r3, r8, #1
 8007148:	7013      	strb	r3, [r2, #0]
 800714a:	e604      	b.n	8006d56 <_dtoa_r+0x696>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	9a07      	ldr	r2, [sp, #28]
 8007150:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007156:	4293      	cmp	r3, r2
 8007158:	d028      	beq.n	80071ac <_dtoa_r+0xaec>
 800715a:	4649      	mov	r1, r9
 800715c:	2300      	movs	r3, #0
 800715e:	220a      	movs	r2, #10
 8007160:	4658      	mov	r0, fp
 8007162:	f000 f9d5 	bl	8007510 <__multadd>
 8007166:	42af      	cmp	r7, r5
 8007168:	4681      	mov	r9, r0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	f04f 020a 	mov.w	r2, #10
 8007172:	4639      	mov	r1, r7
 8007174:	4658      	mov	r0, fp
 8007176:	d107      	bne.n	8007188 <_dtoa_r+0xac8>
 8007178:	f000 f9ca 	bl	8007510 <__multadd>
 800717c:	4607      	mov	r7, r0
 800717e:	4605      	mov	r5, r0
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	9307      	str	r3, [sp, #28]
 8007186:	e774      	b.n	8007072 <_dtoa_r+0x9b2>
 8007188:	f000 f9c2 	bl	8007510 <__multadd>
 800718c:	4629      	mov	r1, r5
 800718e:	4607      	mov	r7, r0
 8007190:	2300      	movs	r3, #0
 8007192:	220a      	movs	r2, #10
 8007194:	4658      	mov	r0, fp
 8007196:	f000 f9bb 	bl	8007510 <__multadd>
 800719a:	4605      	mov	r5, r0
 800719c:	e7f0      	b.n	8007180 <_dtoa_r+0xac0>
 800719e:	9b08      	ldr	r3, [sp, #32]
 80071a0:	2700      	movs	r7, #0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bfcc      	ite	gt
 80071a6:	461e      	movgt	r6, r3
 80071a8:	2601      	movle	r6, #1
 80071aa:	4456      	add	r6, sl
 80071ac:	4649      	mov	r1, r9
 80071ae:	2201      	movs	r2, #1
 80071b0:	4658      	mov	r0, fp
 80071b2:	f000 fba1 	bl	80078f8 <__lshift>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4681      	mov	r9, r0
 80071ba:	f000 fc09 	bl	80079d0 <__mcmp>
 80071be:	2800      	cmp	r0, #0
 80071c0:	dcb0      	bgt.n	8007124 <_dtoa_r+0xa64>
 80071c2:	d102      	bne.n	80071ca <_dtoa_r+0xb0a>
 80071c4:	f018 0f01 	tst.w	r8, #1
 80071c8:	d1ac      	bne.n	8007124 <_dtoa_r+0xa64>
 80071ca:	4633      	mov	r3, r6
 80071cc:	461e      	mov	r6, r3
 80071ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071d2:	2a30      	cmp	r2, #48	@ 0x30
 80071d4:	d0fa      	beq.n	80071cc <_dtoa_r+0xb0c>
 80071d6:	e5be      	b.n	8006d56 <_dtoa_r+0x696>
 80071d8:	459a      	cmp	sl, r3
 80071da:	d1a4      	bne.n	8007126 <_dtoa_r+0xa66>
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	3301      	adds	r3, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	2331      	movs	r3, #49	@ 0x31
 80071e4:	f88a 3000 	strb.w	r3, [sl]
 80071e8:	e5b5      	b.n	8006d56 <_dtoa_r+0x696>
 80071ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800724c <_dtoa_r+0xb8c>
 80071f0:	b11b      	cbz	r3, 80071fa <_dtoa_r+0xb3a>
 80071f2:	f10a 0308 	add.w	r3, sl, #8
 80071f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	4650      	mov	r0, sl
 80071fc:	b017      	add	sp, #92	@ 0x5c
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007204:	2b01      	cmp	r3, #1
 8007206:	f77f ae3d 	ble.w	8006e84 <_dtoa_r+0x7c4>
 800720a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720c:	930a      	str	r3, [sp, #40]	@ 0x28
 800720e:	2001      	movs	r0, #1
 8007210:	e65b      	b.n	8006eca <_dtoa_r+0x80a>
 8007212:	9b08      	ldr	r3, [sp, #32]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f77f aed6 	ble.w	8006fc6 <_dtoa_r+0x906>
 800721a:	4656      	mov	r6, sl
 800721c:	4621      	mov	r1, r4
 800721e:	4648      	mov	r0, r9
 8007220:	f7ff f9c4 	bl	80065ac <quorem>
 8007224:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	f806 8b01 	strb.w	r8, [r6], #1
 800722e:	eba6 020a 	sub.w	r2, r6, sl
 8007232:	4293      	cmp	r3, r2
 8007234:	ddb3      	ble.n	800719e <_dtoa_r+0xade>
 8007236:	4649      	mov	r1, r9
 8007238:	2300      	movs	r3, #0
 800723a:	220a      	movs	r2, #10
 800723c:	4658      	mov	r0, fp
 800723e:	f000 f967 	bl	8007510 <__multadd>
 8007242:	4681      	mov	r9, r0
 8007244:	e7ea      	b.n	800721c <_dtoa_r+0xb5c>
 8007246:	bf00      	nop
 8007248:	0800ac23 	.word	0x0800ac23
 800724c:	0800aba7 	.word	0x0800aba7

08007250 <_free_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4605      	mov	r5, r0
 8007254:	2900      	cmp	r1, #0
 8007256:	d040      	beq.n	80072da <_free_r+0x8a>
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f0c      	subs	r4, r1, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfb8      	it	lt
 8007262:	18e4      	addlt	r4, r4, r3
 8007264:	f000 f8e6 	bl	8007434 <__malloc_lock>
 8007268:	4a1c      	ldr	r2, [pc, #112]	@ (80072dc <_free_r+0x8c>)
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	b933      	cbnz	r3, 800727c <_free_r+0x2c>
 800726e:	6063      	str	r3, [r4, #4]
 8007270:	6014      	str	r4, [r2, #0]
 8007272:	4628      	mov	r0, r5
 8007274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007278:	f000 b8e2 	b.w	8007440 <__malloc_unlock>
 800727c:	42a3      	cmp	r3, r4
 800727e:	d908      	bls.n	8007292 <_free_r+0x42>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	1821      	adds	r1, r4, r0
 8007284:	428b      	cmp	r3, r1
 8007286:	bf01      	itttt	eq
 8007288:	6819      	ldreq	r1, [r3, #0]
 800728a:	685b      	ldreq	r3, [r3, #4]
 800728c:	1809      	addeq	r1, r1, r0
 800728e:	6021      	streq	r1, [r4, #0]
 8007290:	e7ed      	b.n	800726e <_free_r+0x1e>
 8007292:	461a      	mov	r2, r3
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	b10b      	cbz	r3, 800729c <_free_r+0x4c>
 8007298:	42a3      	cmp	r3, r4
 800729a:	d9fa      	bls.n	8007292 <_free_r+0x42>
 800729c:	6811      	ldr	r1, [r2, #0]
 800729e:	1850      	adds	r0, r2, r1
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d10b      	bne.n	80072bc <_free_r+0x6c>
 80072a4:	6820      	ldr	r0, [r4, #0]
 80072a6:	4401      	add	r1, r0
 80072a8:	1850      	adds	r0, r2, r1
 80072aa:	4283      	cmp	r3, r0
 80072ac:	6011      	str	r1, [r2, #0]
 80072ae:	d1e0      	bne.n	8007272 <_free_r+0x22>
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4408      	add	r0, r1
 80072b6:	6010      	str	r0, [r2, #0]
 80072b8:	6053      	str	r3, [r2, #4]
 80072ba:	e7da      	b.n	8007272 <_free_r+0x22>
 80072bc:	d902      	bls.n	80072c4 <_free_r+0x74>
 80072be:	230c      	movs	r3, #12
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	e7d6      	b.n	8007272 <_free_r+0x22>
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	1821      	adds	r1, r4, r0
 80072c8:	428b      	cmp	r3, r1
 80072ca:	bf01      	itttt	eq
 80072cc:	6819      	ldreq	r1, [r3, #0]
 80072ce:	685b      	ldreq	r3, [r3, #4]
 80072d0:	1809      	addeq	r1, r1, r0
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	6054      	str	r4, [r2, #4]
 80072d8:	e7cb      	b.n	8007272 <_free_r+0x22>
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200008dc 	.word	0x200008dc

080072e0 <malloc>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	@ (80072ec <malloc+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f000 b825 	b.w	8007334 <_malloc_r>
 80072ea:	bf00      	nop
 80072ec:	20000020 	.word	0x20000020

080072f0 <sbrk_aligned>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007330 <sbrk_aligned+0x40>)
 80072f4:	460c      	mov	r4, r1
 80072f6:	6831      	ldr	r1, [r6, #0]
 80072f8:	4605      	mov	r5, r0
 80072fa:	b911      	cbnz	r1, 8007302 <sbrk_aligned+0x12>
 80072fc:	f001 ffca 	bl	8009294 <_sbrk_r>
 8007300:	6030      	str	r0, [r6, #0]
 8007302:	4621      	mov	r1, r4
 8007304:	4628      	mov	r0, r5
 8007306:	f001 ffc5 	bl	8009294 <_sbrk_r>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	d103      	bne.n	8007316 <sbrk_aligned+0x26>
 800730e:	f04f 34ff 	mov.w	r4, #4294967295
 8007312:	4620      	mov	r0, r4
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	1cc4      	adds	r4, r0, #3
 8007318:	f024 0403 	bic.w	r4, r4, #3
 800731c:	42a0      	cmp	r0, r4
 800731e:	d0f8      	beq.n	8007312 <sbrk_aligned+0x22>
 8007320:	1a21      	subs	r1, r4, r0
 8007322:	4628      	mov	r0, r5
 8007324:	f001 ffb6 	bl	8009294 <_sbrk_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d1f2      	bne.n	8007312 <sbrk_aligned+0x22>
 800732c:	e7ef      	b.n	800730e <sbrk_aligned+0x1e>
 800732e:	bf00      	nop
 8007330:	200008d8 	.word	0x200008d8

08007334 <_malloc_r>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	1ccd      	adds	r5, r1, #3
 800733a:	f025 0503 	bic.w	r5, r5, #3
 800733e:	3508      	adds	r5, #8
 8007340:	2d0c      	cmp	r5, #12
 8007342:	bf38      	it	cc
 8007344:	250c      	movcc	r5, #12
 8007346:	2d00      	cmp	r5, #0
 8007348:	4606      	mov	r6, r0
 800734a:	db01      	blt.n	8007350 <_malloc_r+0x1c>
 800734c:	42a9      	cmp	r1, r5
 800734e:	d904      	bls.n	800735a <_malloc_r+0x26>
 8007350:	230c      	movs	r3, #12
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	2000      	movs	r0, #0
 8007356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007430 <_malloc_r+0xfc>
 800735e:	f000 f869 	bl	8007434 <__malloc_lock>
 8007362:	f8d8 3000 	ldr.w	r3, [r8]
 8007366:	461c      	mov	r4, r3
 8007368:	bb44      	cbnz	r4, 80073bc <_malloc_r+0x88>
 800736a:	4629      	mov	r1, r5
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ffbf 	bl	80072f0 <sbrk_aligned>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	4604      	mov	r4, r0
 8007376:	d158      	bne.n	800742a <_malloc_r+0xf6>
 8007378:	f8d8 4000 	ldr.w	r4, [r8]
 800737c:	4627      	mov	r7, r4
 800737e:	2f00      	cmp	r7, #0
 8007380:	d143      	bne.n	800740a <_malloc_r+0xd6>
 8007382:	2c00      	cmp	r4, #0
 8007384:	d04b      	beq.n	800741e <_malloc_r+0xea>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	eb04 0903 	add.w	r9, r4, r3
 8007390:	f001 ff80 	bl	8009294 <_sbrk_r>
 8007394:	4581      	cmp	r9, r0
 8007396:	d142      	bne.n	800741e <_malloc_r+0xea>
 8007398:	6821      	ldr	r1, [r4, #0]
 800739a:	4630      	mov	r0, r6
 800739c:	1a6d      	subs	r5, r5, r1
 800739e:	4629      	mov	r1, r5
 80073a0:	f7ff ffa6 	bl	80072f0 <sbrk_aligned>
 80073a4:	3001      	adds	r0, #1
 80073a6:	d03a      	beq.n	800741e <_malloc_r+0xea>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	442b      	add	r3, r5
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	f8d8 3000 	ldr.w	r3, [r8]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	bb62      	cbnz	r2, 8007410 <_malloc_r+0xdc>
 80073b6:	f8c8 7000 	str.w	r7, [r8]
 80073ba:	e00f      	b.n	80073dc <_malloc_r+0xa8>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	1b52      	subs	r2, r2, r5
 80073c0:	d420      	bmi.n	8007404 <_malloc_r+0xd0>
 80073c2:	2a0b      	cmp	r2, #11
 80073c4:	d917      	bls.n	80073f6 <_malloc_r+0xc2>
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	6025      	str	r5, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	6059      	strne	r1, [r3, #4]
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	bf08      	it	eq
 80073d4:	f8c8 1000 	streq.w	r1, [r8]
 80073d8:	5162      	str	r2, [r4, r5]
 80073da:	604b      	str	r3, [r1, #4]
 80073dc:	4630      	mov	r0, r6
 80073de:	f000 f82f 	bl	8007440 <__malloc_unlock>
 80073e2:	f104 000b 	add.w	r0, r4, #11
 80073e6:	1d23      	adds	r3, r4, #4
 80073e8:	f020 0007 	bic.w	r0, r0, #7
 80073ec:	1ac2      	subs	r2, r0, r3
 80073ee:	bf1c      	itt	ne
 80073f0:	1a1b      	subne	r3, r3, r0
 80073f2:	50a3      	strne	r3, [r4, r2]
 80073f4:	e7af      	b.n	8007356 <_malloc_r+0x22>
 80073f6:	6862      	ldr	r2, [r4, #4]
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	bf0c      	ite	eq
 80073fc:	f8c8 2000 	streq.w	r2, [r8]
 8007400:	605a      	strne	r2, [r3, #4]
 8007402:	e7eb      	b.n	80073dc <_malloc_r+0xa8>
 8007404:	4623      	mov	r3, r4
 8007406:	6864      	ldr	r4, [r4, #4]
 8007408:	e7ae      	b.n	8007368 <_malloc_r+0x34>
 800740a:	463c      	mov	r4, r7
 800740c:	687f      	ldr	r7, [r7, #4]
 800740e:	e7b6      	b.n	800737e <_malloc_r+0x4a>
 8007410:	461a      	mov	r2, r3
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	42a3      	cmp	r3, r4
 8007416:	d1fb      	bne.n	8007410 <_malloc_r+0xdc>
 8007418:	2300      	movs	r3, #0
 800741a:	6053      	str	r3, [r2, #4]
 800741c:	e7de      	b.n	80073dc <_malloc_r+0xa8>
 800741e:	230c      	movs	r3, #12
 8007420:	4630      	mov	r0, r6
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	f000 f80c 	bl	8007440 <__malloc_unlock>
 8007428:	e794      	b.n	8007354 <_malloc_r+0x20>
 800742a:	6005      	str	r5, [r0, #0]
 800742c:	e7d6      	b.n	80073dc <_malloc_r+0xa8>
 800742e:	bf00      	nop
 8007430:	200008dc 	.word	0x200008dc

08007434 <__malloc_lock>:
 8007434:	4801      	ldr	r0, [pc, #4]	@ (800743c <__malloc_lock+0x8>)
 8007436:	f7ff b8a4 	b.w	8006582 <__retarget_lock_acquire_recursive>
 800743a:	bf00      	nop
 800743c:	200008d4 	.word	0x200008d4

08007440 <__malloc_unlock>:
 8007440:	4801      	ldr	r0, [pc, #4]	@ (8007448 <__malloc_unlock+0x8>)
 8007442:	f7ff b89f 	b.w	8006584 <__retarget_lock_release_recursive>
 8007446:	bf00      	nop
 8007448:	200008d4 	.word	0x200008d4

0800744c <_Balloc>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	69c6      	ldr	r6, [r0, #28]
 8007450:	4604      	mov	r4, r0
 8007452:	460d      	mov	r5, r1
 8007454:	b976      	cbnz	r6, 8007474 <_Balloc+0x28>
 8007456:	2010      	movs	r0, #16
 8007458:	f7ff ff42 	bl	80072e0 <malloc>
 800745c:	4602      	mov	r2, r0
 800745e:	61e0      	str	r0, [r4, #28]
 8007460:	b920      	cbnz	r0, 800746c <_Balloc+0x20>
 8007462:	216b      	movs	r1, #107	@ 0x6b
 8007464:	4b17      	ldr	r3, [pc, #92]	@ (80074c4 <_Balloc+0x78>)
 8007466:	4818      	ldr	r0, [pc, #96]	@ (80074c8 <_Balloc+0x7c>)
 8007468:	f001 ff38 	bl	80092dc <__assert_func>
 800746c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007470:	6006      	str	r6, [r0, #0]
 8007472:	60c6      	str	r6, [r0, #12]
 8007474:	69e6      	ldr	r6, [r4, #28]
 8007476:	68f3      	ldr	r3, [r6, #12]
 8007478:	b183      	cbz	r3, 800749c <_Balloc+0x50>
 800747a:	69e3      	ldr	r3, [r4, #28]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007482:	b9b8      	cbnz	r0, 80074b4 <_Balloc+0x68>
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f605 	lsl.w	r6, r1, r5
 800748a:	1d72      	adds	r2, r6, #5
 800748c:	4620      	mov	r0, r4
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	f001 ff42 	bl	8009318 <_calloc_r>
 8007494:	b160      	cbz	r0, 80074b0 <_Balloc+0x64>
 8007496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800749a:	e00e      	b.n	80074ba <_Balloc+0x6e>
 800749c:	2221      	movs	r2, #33	@ 0x21
 800749e:	2104      	movs	r1, #4
 80074a0:	4620      	mov	r0, r4
 80074a2:	f001 ff39 	bl	8009318 <_calloc_r>
 80074a6:	69e3      	ldr	r3, [r4, #28]
 80074a8:	60f0      	str	r0, [r6, #12]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e4      	bne.n	800747a <_Balloc+0x2e>
 80074b0:	2000      	movs	r0, #0
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	6802      	ldr	r2, [r0, #0]
 80074b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ba:	2300      	movs	r3, #0
 80074bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074c0:	e7f7      	b.n	80074b2 <_Balloc+0x66>
 80074c2:	bf00      	nop
 80074c4:	0800abb4 	.word	0x0800abb4
 80074c8:	0800ac34 	.word	0x0800ac34

080074cc <_Bfree>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	69c6      	ldr	r6, [r0, #28]
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	b976      	cbnz	r6, 80074f4 <_Bfree+0x28>
 80074d6:	2010      	movs	r0, #16
 80074d8:	f7ff ff02 	bl	80072e0 <malloc>
 80074dc:	4602      	mov	r2, r0
 80074de:	61e8      	str	r0, [r5, #28]
 80074e0:	b920      	cbnz	r0, 80074ec <_Bfree+0x20>
 80074e2:	218f      	movs	r1, #143	@ 0x8f
 80074e4:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <_Bfree+0x3c>)
 80074e6:	4809      	ldr	r0, [pc, #36]	@ (800750c <_Bfree+0x40>)
 80074e8:	f001 fef8 	bl	80092dc <__assert_func>
 80074ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074f0:	6006      	str	r6, [r0, #0]
 80074f2:	60c6      	str	r6, [r0, #12]
 80074f4:	b13c      	cbz	r4, 8007506 <_Bfree+0x3a>
 80074f6:	69eb      	ldr	r3, [r5, #28]
 80074f8:	6862      	ldr	r2, [r4, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007500:	6021      	str	r1, [r4, #0]
 8007502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	0800abb4 	.word	0x0800abb4
 800750c:	0800ac34 	.word	0x0800ac34

08007510 <__multadd>:
 8007510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	461e      	mov	r6, r3
 800751a:	2000      	movs	r0, #0
 800751c:	690d      	ldr	r5, [r1, #16]
 800751e:	f101 0c14 	add.w	ip, r1, #20
 8007522:	f8dc 3000 	ldr.w	r3, [ip]
 8007526:	3001      	adds	r0, #1
 8007528:	b299      	uxth	r1, r3
 800752a:	fb02 6101 	mla	r1, r2, r1, r6
 800752e:	0c1e      	lsrs	r6, r3, #16
 8007530:	0c0b      	lsrs	r3, r1, #16
 8007532:	fb02 3306 	mla	r3, r2, r6, r3
 8007536:	b289      	uxth	r1, r1
 8007538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800753c:	4285      	cmp	r5, r0
 800753e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007542:	f84c 1b04 	str.w	r1, [ip], #4
 8007546:	dcec      	bgt.n	8007522 <__multadd+0x12>
 8007548:	b30e      	cbz	r6, 800758e <__multadd+0x7e>
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	42ab      	cmp	r3, r5
 800754e:	dc19      	bgt.n	8007584 <__multadd+0x74>
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4638      	mov	r0, r7
 8007554:	3101      	adds	r1, #1
 8007556:	f7ff ff79 	bl	800744c <_Balloc>
 800755a:	4680      	mov	r8, r0
 800755c:	b928      	cbnz	r0, 800756a <__multadd+0x5a>
 800755e:	4602      	mov	r2, r0
 8007560:	21ba      	movs	r1, #186	@ 0xba
 8007562:	4b0c      	ldr	r3, [pc, #48]	@ (8007594 <__multadd+0x84>)
 8007564:	480c      	ldr	r0, [pc, #48]	@ (8007598 <__multadd+0x88>)
 8007566:	f001 feb9 	bl	80092dc <__assert_func>
 800756a:	6922      	ldr	r2, [r4, #16]
 800756c:	f104 010c 	add.w	r1, r4, #12
 8007570:	3202      	adds	r2, #2
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	300c      	adds	r0, #12
 8007576:	f001 fe9d 	bl	80092b4 <memcpy>
 800757a:	4621      	mov	r1, r4
 800757c:	4638      	mov	r0, r7
 800757e:	f7ff ffa5 	bl	80074cc <_Bfree>
 8007582:	4644      	mov	r4, r8
 8007584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007588:	3501      	adds	r5, #1
 800758a:	615e      	str	r6, [r3, #20]
 800758c:	6125      	str	r5, [r4, #16]
 800758e:	4620      	mov	r0, r4
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007594:	0800ac23 	.word	0x0800ac23
 8007598:	0800ac34 	.word	0x0800ac34

0800759c <__s2b>:
 800759c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a0:	4615      	mov	r5, r2
 80075a2:	2209      	movs	r2, #9
 80075a4:	461f      	mov	r7, r3
 80075a6:	3308      	adds	r3, #8
 80075a8:	460c      	mov	r4, r1
 80075aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ae:	4606      	mov	r6, r0
 80075b0:	2201      	movs	r2, #1
 80075b2:	2100      	movs	r1, #0
 80075b4:	429a      	cmp	r2, r3
 80075b6:	db09      	blt.n	80075cc <__s2b+0x30>
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ff47 	bl	800744c <_Balloc>
 80075be:	b940      	cbnz	r0, 80075d2 <__s2b+0x36>
 80075c0:	4602      	mov	r2, r0
 80075c2:	21d3      	movs	r1, #211	@ 0xd3
 80075c4:	4b18      	ldr	r3, [pc, #96]	@ (8007628 <__s2b+0x8c>)
 80075c6:	4819      	ldr	r0, [pc, #100]	@ (800762c <__s2b+0x90>)
 80075c8:	f001 fe88 	bl	80092dc <__assert_func>
 80075cc:	0052      	lsls	r2, r2, #1
 80075ce:	3101      	adds	r1, #1
 80075d0:	e7f0      	b.n	80075b4 <__s2b+0x18>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	2d09      	cmp	r5, #9
 80075d6:	6143      	str	r3, [r0, #20]
 80075d8:	f04f 0301 	mov.w	r3, #1
 80075dc:	6103      	str	r3, [r0, #16]
 80075de:	dd16      	ble.n	800760e <__s2b+0x72>
 80075e0:	f104 0909 	add.w	r9, r4, #9
 80075e4:	46c8      	mov	r8, r9
 80075e6:	442c      	add	r4, r5
 80075e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075ec:	4601      	mov	r1, r0
 80075ee:	220a      	movs	r2, #10
 80075f0:	4630      	mov	r0, r6
 80075f2:	3b30      	subs	r3, #48	@ 0x30
 80075f4:	f7ff ff8c 	bl	8007510 <__multadd>
 80075f8:	45a0      	cmp	r8, r4
 80075fa:	d1f5      	bne.n	80075e8 <__s2b+0x4c>
 80075fc:	f1a5 0408 	sub.w	r4, r5, #8
 8007600:	444c      	add	r4, r9
 8007602:	1b2d      	subs	r5, r5, r4
 8007604:	1963      	adds	r3, r4, r5
 8007606:	42bb      	cmp	r3, r7
 8007608:	db04      	blt.n	8007614 <__s2b+0x78>
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760e:	2509      	movs	r5, #9
 8007610:	340a      	adds	r4, #10
 8007612:	e7f6      	b.n	8007602 <__s2b+0x66>
 8007614:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007618:	4601      	mov	r1, r0
 800761a:	220a      	movs	r2, #10
 800761c:	4630      	mov	r0, r6
 800761e:	3b30      	subs	r3, #48	@ 0x30
 8007620:	f7ff ff76 	bl	8007510 <__multadd>
 8007624:	e7ee      	b.n	8007604 <__s2b+0x68>
 8007626:	bf00      	nop
 8007628:	0800ac23 	.word	0x0800ac23
 800762c:	0800ac34 	.word	0x0800ac34

08007630 <__hi0bits>:
 8007630:	4603      	mov	r3, r0
 8007632:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007636:	bf3a      	itte	cc
 8007638:	0403      	lslcc	r3, r0, #16
 800763a:	2010      	movcc	r0, #16
 800763c:	2000      	movcs	r0, #0
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007642:	bf3c      	itt	cc
 8007644:	021b      	lslcc	r3, r3, #8
 8007646:	3008      	addcc	r0, #8
 8007648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764c:	bf3c      	itt	cc
 800764e:	011b      	lslcc	r3, r3, #4
 8007650:	3004      	addcc	r0, #4
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	bf3c      	itt	cc
 8007658:	009b      	lslcc	r3, r3, #2
 800765a:	3002      	addcc	r0, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	db05      	blt.n	800766c <__hi0bits+0x3c>
 8007660:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007664:	f100 0001 	add.w	r0, r0, #1
 8007668:	bf08      	it	eq
 800766a:	2020      	moveq	r0, #32
 800766c:	4770      	bx	lr

0800766e <__lo0bits>:
 800766e:	6803      	ldr	r3, [r0, #0]
 8007670:	4602      	mov	r2, r0
 8007672:	f013 0007 	ands.w	r0, r3, #7
 8007676:	d00b      	beq.n	8007690 <__lo0bits+0x22>
 8007678:	07d9      	lsls	r1, r3, #31
 800767a:	d421      	bmi.n	80076c0 <__lo0bits+0x52>
 800767c:	0798      	lsls	r0, r3, #30
 800767e:	bf49      	itett	mi
 8007680:	085b      	lsrmi	r3, r3, #1
 8007682:	089b      	lsrpl	r3, r3, #2
 8007684:	2001      	movmi	r0, #1
 8007686:	6013      	strmi	r3, [r2, #0]
 8007688:	bf5c      	itt	pl
 800768a:	2002      	movpl	r0, #2
 800768c:	6013      	strpl	r3, [r2, #0]
 800768e:	4770      	bx	lr
 8007690:	b299      	uxth	r1, r3
 8007692:	b909      	cbnz	r1, 8007698 <__lo0bits+0x2a>
 8007694:	2010      	movs	r0, #16
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	b2d9      	uxtb	r1, r3
 800769a:	b909      	cbnz	r1, 80076a0 <__lo0bits+0x32>
 800769c:	3008      	adds	r0, #8
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	0719      	lsls	r1, r3, #28
 80076a2:	bf04      	itt	eq
 80076a4:	091b      	lsreq	r3, r3, #4
 80076a6:	3004      	addeq	r0, #4
 80076a8:	0799      	lsls	r1, r3, #30
 80076aa:	bf04      	itt	eq
 80076ac:	089b      	lsreq	r3, r3, #2
 80076ae:	3002      	addeq	r0, #2
 80076b0:	07d9      	lsls	r1, r3, #31
 80076b2:	d403      	bmi.n	80076bc <__lo0bits+0x4e>
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	f100 0001 	add.w	r0, r0, #1
 80076ba:	d003      	beq.n	80076c4 <__lo0bits+0x56>
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4770      	bx	lr
 80076c0:	2000      	movs	r0, #0
 80076c2:	4770      	bx	lr
 80076c4:	2020      	movs	r0, #32
 80076c6:	4770      	bx	lr

080076c8 <__i2b>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	2101      	movs	r1, #1
 80076ce:	f7ff febd 	bl	800744c <_Balloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	b928      	cbnz	r0, 80076e2 <__i2b+0x1a>
 80076d6:	f240 1145 	movw	r1, #325	@ 0x145
 80076da:	4b04      	ldr	r3, [pc, #16]	@ (80076ec <__i2b+0x24>)
 80076dc:	4804      	ldr	r0, [pc, #16]	@ (80076f0 <__i2b+0x28>)
 80076de:	f001 fdfd 	bl	80092dc <__assert_func>
 80076e2:	2301      	movs	r3, #1
 80076e4:	6144      	str	r4, [r0, #20]
 80076e6:	6103      	str	r3, [r0, #16]
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	0800ac23 	.word	0x0800ac23
 80076f0:	0800ac34 	.word	0x0800ac34

080076f4 <__multiply>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	4614      	mov	r4, r2
 80076fa:	690a      	ldr	r2, [r1, #16]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	460f      	mov	r7, r1
 8007700:	429a      	cmp	r2, r3
 8007702:	bfa2      	ittt	ge
 8007704:	4623      	movge	r3, r4
 8007706:	460c      	movge	r4, r1
 8007708:	461f      	movge	r7, r3
 800770a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800770e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	6861      	ldr	r1, [r4, #4]
 8007716:	eb0a 0609 	add.w	r6, sl, r9
 800771a:	42b3      	cmp	r3, r6
 800771c:	b085      	sub	sp, #20
 800771e:	bfb8      	it	lt
 8007720:	3101      	addlt	r1, #1
 8007722:	f7ff fe93 	bl	800744c <_Balloc>
 8007726:	b930      	cbnz	r0, 8007736 <__multiply+0x42>
 8007728:	4602      	mov	r2, r0
 800772a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800772e:	4b43      	ldr	r3, [pc, #268]	@ (800783c <__multiply+0x148>)
 8007730:	4843      	ldr	r0, [pc, #268]	@ (8007840 <__multiply+0x14c>)
 8007732:	f001 fdd3 	bl	80092dc <__assert_func>
 8007736:	f100 0514 	add.w	r5, r0, #20
 800773a:	462b      	mov	r3, r5
 800773c:	2200      	movs	r2, #0
 800773e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007742:	4543      	cmp	r3, r8
 8007744:	d321      	bcc.n	800778a <__multiply+0x96>
 8007746:	f107 0114 	add.w	r1, r7, #20
 800774a:	f104 0214 	add.w	r2, r4, #20
 800774e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007752:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	1b13      	subs	r3, r2, r4
 800775a:	3b15      	subs	r3, #21
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	3304      	adds	r3, #4
 8007762:	f104 0715 	add.w	r7, r4, #21
 8007766:	42ba      	cmp	r2, r7
 8007768:	bf38      	it	cc
 800776a:	2304      	movcc	r3, #4
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	9103      	str	r1, [sp, #12]
 8007772:	428b      	cmp	r3, r1
 8007774:	d80c      	bhi.n	8007790 <__multiply+0x9c>
 8007776:	2e00      	cmp	r6, #0
 8007778:	dd03      	ble.n	8007782 <__multiply+0x8e>
 800777a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800777e:	2b00      	cmp	r3, #0
 8007780:	d05a      	beq.n	8007838 <__multiply+0x144>
 8007782:	6106      	str	r6, [r0, #16]
 8007784:	b005      	add	sp, #20
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	f843 2b04 	str.w	r2, [r3], #4
 800778e:	e7d8      	b.n	8007742 <__multiply+0x4e>
 8007790:	f8b1 a000 	ldrh.w	sl, [r1]
 8007794:	f1ba 0f00 	cmp.w	sl, #0
 8007798:	d023      	beq.n	80077e2 <__multiply+0xee>
 800779a:	46a9      	mov	r9, r5
 800779c:	f04f 0c00 	mov.w	ip, #0
 80077a0:	f104 0e14 	add.w	lr, r4, #20
 80077a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077a8:	f8d9 3000 	ldr.w	r3, [r9]
 80077ac:	fa1f fb87 	uxth.w	fp, r7
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80077b6:	4463      	add	r3, ip
 80077b8:	f8d9 c000 	ldr.w	ip, [r9]
 80077bc:	0c3f      	lsrs	r7, r7, #16
 80077be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80077c2:	fb0a c707 	mla	r7, sl, r7, ip
 80077c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077d0:	4572      	cmp	r2, lr
 80077d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077d6:	f849 3b04 	str.w	r3, [r9], #4
 80077da:	d8e3      	bhi.n	80077a4 <__multiply+0xb0>
 80077dc:	9b01      	ldr	r3, [sp, #4]
 80077de:	f845 c003 	str.w	ip, [r5, r3]
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	3104      	adds	r1, #4
 80077e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	d021      	beq.n	8007834 <__multiply+0x140>
 80077f0:	46ae      	mov	lr, r5
 80077f2:	f04f 0a00 	mov.w	sl, #0
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	f104 0c14 	add.w	ip, r4, #20
 80077fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007800:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007804:	b29b      	uxth	r3, r3
 8007806:	fb09 770b 	mla	r7, r9, fp, r7
 800780a:	4457      	add	r7, sl
 800780c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007810:	f84e 3b04 	str.w	r3, [lr], #4
 8007814:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781c:	f8be 3000 	ldrh.w	r3, [lr]
 8007820:	4562      	cmp	r2, ip
 8007822:	fb09 330a 	mla	r3, r9, sl, r3
 8007826:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800782a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800782e:	d8e5      	bhi.n	80077fc <__multiply+0x108>
 8007830:	9f01      	ldr	r7, [sp, #4]
 8007832:	51eb      	str	r3, [r5, r7]
 8007834:	3504      	adds	r5, #4
 8007836:	e79a      	b.n	800776e <__multiply+0x7a>
 8007838:	3e01      	subs	r6, #1
 800783a:	e79c      	b.n	8007776 <__multiply+0x82>
 800783c:	0800ac23 	.word	0x0800ac23
 8007840:	0800ac34 	.word	0x0800ac34

08007844 <__pow5mult>:
 8007844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007848:	4615      	mov	r5, r2
 800784a:	f012 0203 	ands.w	r2, r2, #3
 800784e:	4607      	mov	r7, r0
 8007850:	460e      	mov	r6, r1
 8007852:	d007      	beq.n	8007864 <__pow5mult+0x20>
 8007854:	4c25      	ldr	r4, [pc, #148]	@ (80078ec <__pow5mult+0xa8>)
 8007856:	3a01      	subs	r2, #1
 8007858:	2300      	movs	r3, #0
 800785a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800785e:	f7ff fe57 	bl	8007510 <__multadd>
 8007862:	4606      	mov	r6, r0
 8007864:	10ad      	asrs	r5, r5, #2
 8007866:	d03d      	beq.n	80078e4 <__pow5mult+0xa0>
 8007868:	69fc      	ldr	r4, [r7, #28]
 800786a:	b97c      	cbnz	r4, 800788c <__pow5mult+0x48>
 800786c:	2010      	movs	r0, #16
 800786e:	f7ff fd37 	bl	80072e0 <malloc>
 8007872:	4602      	mov	r2, r0
 8007874:	61f8      	str	r0, [r7, #28]
 8007876:	b928      	cbnz	r0, 8007884 <__pow5mult+0x40>
 8007878:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800787c:	4b1c      	ldr	r3, [pc, #112]	@ (80078f0 <__pow5mult+0xac>)
 800787e:	481d      	ldr	r0, [pc, #116]	@ (80078f4 <__pow5mult+0xb0>)
 8007880:	f001 fd2c 	bl	80092dc <__assert_func>
 8007884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007888:	6004      	str	r4, [r0, #0]
 800788a:	60c4      	str	r4, [r0, #12]
 800788c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007894:	b94c      	cbnz	r4, 80078aa <__pow5mult+0x66>
 8007896:	f240 2171 	movw	r1, #625	@ 0x271
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ff14 	bl	80076c8 <__i2b>
 80078a0:	2300      	movs	r3, #0
 80078a2:	4604      	mov	r4, r0
 80078a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	f04f 0900 	mov.w	r9, #0
 80078ae:	07eb      	lsls	r3, r5, #31
 80078b0:	d50a      	bpl.n	80078c8 <__pow5mult+0x84>
 80078b2:	4631      	mov	r1, r6
 80078b4:	4622      	mov	r2, r4
 80078b6:	4638      	mov	r0, r7
 80078b8:	f7ff ff1c 	bl	80076f4 <__multiply>
 80078bc:	4680      	mov	r8, r0
 80078be:	4631      	mov	r1, r6
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff fe03 	bl	80074cc <_Bfree>
 80078c6:	4646      	mov	r6, r8
 80078c8:	106d      	asrs	r5, r5, #1
 80078ca:	d00b      	beq.n	80078e4 <__pow5mult+0xa0>
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	b938      	cbnz	r0, 80078e0 <__pow5mult+0x9c>
 80078d0:	4622      	mov	r2, r4
 80078d2:	4621      	mov	r1, r4
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ff0d 	bl	80076f4 <__multiply>
 80078da:	6020      	str	r0, [r4, #0]
 80078dc:	f8c0 9000 	str.w	r9, [r0]
 80078e0:	4604      	mov	r4, r0
 80078e2:	e7e4      	b.n	80078ae <__pow5mult+0x6a>
 80078e4:	4630      	mov	r0, r6
 80078e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ea:	bf00      	nop
 80078ec:	0800ac90 	.word	0x0800ac90
 80078f0:	0800abb4 	.word	0x0800abb4
 80078f4:	0800ac34 	.word	0x0800ac34

080078f8 <__lshift>:
 80078f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	460c      	mov	r4, r1
 80078fe:	4607      	mov	r7, r0
 8007900:	4691      	mov	r9, r2
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	6849      	ldr	r1, [r1, #4]
 8007906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007910:	f108 0601 	add.w	r6, r8, #1
 8007914:	42b3      	cmp	r3, r6
 8007916:	db0b      	blt.n	8007930 <__lshift+0x38>
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff fd97 	bl	800744c <_Balloc>
 800791e:	4605      	mov	r5, r0
 8007920:	b948      	cbnz	r0, 8007936 <__lshift+0x3e>
 8007922:	4602      	mov	r2, r0
 8007924:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <__lshift+0xd0>)
 800792a:	4828      	ldr	r0, [pc, #160]	@ (80079cc <__lshift+0xd4>)
 800792c:	f001 fcd6 	bl	80092dc <__assert_func>
 8007930:	3101      	adds	r1, #1
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	e7ee      	b.n	8007914 <__lshift+0x1c>
 8007936:	2300      	movs	r3, #0
 8007938:	f100 0114 	add.w	r1, r0, #20
 800793c:	f100 0210 	add.w	r2, r0, #16
 8007940:	4618      	mov	r0, r3
 8007942:	4553      	cmp	r3, sl
 8007944:	db33      	blt.n	80079ae <__lshift+0xb6>
 8007946:	6920      	ldr	r0, [r4, #16]
 8007948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800794c:	f104 0314 	add.w	r3, r4, #20
 8007950:	f019 091f 	ands.w	r9, r9, #31
 8007954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800795c:	d02b      	beq.n	80079b6 <__lshift+0xbe>
 800795e:	468a      	mov	sl, r1
 8007960:	2200      	movs	r2, #0
 8007962:	f1c9 0e20 	rsb	lr, r9, #32
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	fa00 f009 	lsl.w	r0, r0, r9
 800796c:	4310      	orrs	r0, r2
 800796e:	f84a 0b04 	str.w	r0, [sl], #4
 8007972:	f853 2b04 	ldr.w	r2, [r3], #4
 8007976:	459c      	cmp	ip, r3
 8007978:	fa22 f20e 	lsr.w	r2, r2, lr
 800797c:	d8f3      	bhi.n	8007966 <__lshift+0x6e>
 800797e:	ebac 0304 	sub.w	r3, ip, r4
 8007982:	3b15      	subs	r3, #21
 8007984:	f023 0303 	bic.w	r3, r3, #3
 8007988:	3304      	adds	r3, #4
 800798a:	f104 0015 	add.w	r0, r4, #21
 800798e:	4584      	cmp	ip, r0
 8007990:	bf38      	it	cc
 8007992:	2304      	movcc	r3, #4
 8007994:	50ca      	str	r2, [r1, r3]
 8007996:	b10a      	cbz	r2, 800799c <__lshift+0xa4>
 8007998:	f108 0602 	add.w	r6, r8, #2
 800799c:	3e01      	subs	r6, #1
 800799e:	4638      	mov	r0, r7
 80079a0:	4621      	mov	r1, r4
 80079a2:	612e      	str	r6, [r5, #16]
 80079a4:	f7ff fd92 	bl	80074cc <_Bfree>
 80079a8:	4628      	mov	r0, r5
 80079aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80079b2:	3301      	adds	r3, #1
 80079b4:	e7c5      	b.n	8007942 <__lshift+0x4a>
 80079b6:	3904      	subs	r1, #4
 80079b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079bc:	459c      	cmp	ip, r3
 80079be:	f841 2f04 	str.w	r2, [r1, #4]!
 80079c2:	d8f9      	bhi.n	80079b8 <__lshift+0xc0>
 80079c4:	e7ea      	b.n	800799c <__lshift+0xa4>
 80079c6:	bf00      	nop
 80079c8:	0800ac23 	.word	0x0800ac23
 80079cc:	0800ac34 	.word	0x0800ac34

080079d0 <__mcmp>:
 80079d0:	4603      	mov	r3, r0
 80079d2:	690a      	ldr	r2, [r1, #16]
 80079d4:	6900      	ldr	r0, [r0, #16]
 80079d6:	b530      	push	{r4, r5, lr}
 80079d8:	1a80      	subs	r0, r0, r2
 80079da:	d10e      	bne.n	80079fa <__mcmp+0x2a>
 80079dc:	3314      	adds	r3, #20
 80079de:	3114      	adds	r1, #20
 80079e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079f0:	4295      	cmp	r5, r2
 80079f2:	d003      	beq.n	80079fc <__mcmp+0x2c>
 80079f4:	d205      	bcs.n	8007a02 <__mcmp+0x32>
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	bd30      	pop	{r4, r5, pc}
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d3f3      	bcc.n	80079e8 <__mcmp+0x18>
 8007a00:	e7fb      	b.n	80079fa <__mcmp+0x2a>
 8007a02:	2001      	movs	r0, #1
 8007a04:	e7f9      	b.n	80079fa <__mcmp+0x2a>
	...

08007a08 <__mdiff>:
 8007a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	4606      	mov	r6, r0
 8007a10:	4611      	mov	r1, r2
 8007a12:	4648      	mov	r0, r9
 8007a14:	4614      	mov	r4, r2
 8007a16:	f7ff ffdb 	bl	80079d0 <__mcmp>
 8007a1a:	1e05      	subs	r5, r0, #0
 8007a1c:	d112      	bne.n	8007a44 <__mdiff+0x3c>
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7ff fd13 	bl	800744c <_Balloc>
 8007a26:	4602      	mov	r2, r0
 8007a28:	b928      	cbnz	r0, 8007a36 <__mdiff+0x2e>
 8007a2a:	f240 2137 	movw	r1, #567	@ 0x237
 8007a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b28 <__mdiff+0x120>)
 8007a30:	483e      	ldr	r0, [pc, #248]	@ (8007b2c <__mdiff+0x124>)
 8007a32:	f001 fc53 	bl	80092dc <__assert_func>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	b003      	add	sp, #12
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	bfbc      	itt	lt
 8007a46:	464b      	movlt	r3, r9
 8007a48:	46a1      	movlt	r9, r4
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a50:	bfba      	itte	lt
 8007a52:	461c      	movlt	r4, r3
 8007a54:	2501      	movlt	r5, #1
 8007a56:	2500      	movge	r5, #0
 8007a58:	f7ff fcf8 	bl	800744c <_Balloc>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	b918      	cbnz	r0, 8007a68 <__mdiff+0x60>
 8007a60:	f240 2145 	movw	r1, #581	@ 0x245
 8007a64:	4b30      	ldr	r3, [pc, #192]	@ (8007b28 <__mdiff+0x120>)
 8007a66:	e7e3      	b.n	8007a30 <__mdiff+0x28>
 8007a68:	f100 0b14 	add.w	fp, r0, #20
 8007a6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a70:	f109 0310 	add.w	r3, r9, #16
 8007a74:	60c5      	str	r5, [r0, #12]
 8007a76:	f04f 0c00 	mov.w	ip, #0
 8007a7a:	f109 0514 	add.w	r5, r9, #20
 8007a7e:	46d9      	mov	r9, fp
 8007a80:	6926      	ldr	r6, [r4, #16]
 8007a82:	f104 0e14 	add.w	lr, r4, #20
 8007a86:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a8a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a9a:	b281      	uxth	r1, r0
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	fa1f f38a 	uxth.w	r3, sl
 8007aa2:	1a5b      	subs	r3, r3, r1
 8007aa4:	0c00      	lsrs	r0, r0, #16
 8007aa6:	4463      	add	r3, ip
 8007aa8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007aac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ab6:	4576      	cmp	r6, lr
 8007ab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007abc:	f849 3b04 	str.w	r3, [r9], #4
 8007ac0:	d8e6      	bhi.n	8007a90 <__mdiff+0x88>
 8007ac2:	1b33      	subs	r3, r6, r4
 8007ac4:	3b15      	subs	r3, #21
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	3415      	adds	r4, #21
 8007acc:	3304      	adds	r3, #4
 8007ace:	42a6      	cmp	r6, r4
 8007ad0:	bf38      	it	cc
 8007ad2:	2304      	movcc	r3, #4
 8007ad4:	441d      	add	r5, r3
 8007ad6:	445b      	add	r3, fp
 8007ad8:	461e      	mov	r6, r3
 8007ada:	462c      	mov	r4, r5
 8007adc:	4544      	cmp	r4, r8
 8007ade:	d30e      	bcc.n	8007afe <__mdiff+0xf6>
 8007ae0:	f108 0103 	add.w	r1, r8, #3
 8007ae4:	1b49      	subs	r1, r1, r5
 8007ae6:	f021 0103 	bic.w	r1, r1, #3
 8007aea:	3d03      	subs	r5, #3
 8007aec:	45a8      	cmp	r8, r5
 8007aee:	bf38      	it	cc
 8007af0:	2100      	movcc	r1, #0
 8007af2:	440b      	add	r3, r1
 8007af4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007af8:	b199      	cbz	r1, 8007b22 <__mdiff+0x11a>
 8007afa:	6117      	str	r7, [r2, #16]
 8007afc:	e79e      	b.n	8007a3c <__mdiff+0x34>
 8007afe:	46e6      	mov	lr, ip
 8007b00:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b04:	fa1f fc81 	uxth.w	ip, r1
 8007b08:	44f4      	add	ip, lr
 8007b0a:	0c08      	lsrs	r0, r1, #16
 8007b0c:	4471      	add	r1, lr
 8007b0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b12:	b289      	uxth	r1, r1
 8007b14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b1c:	f846 1b04 	str.w	r1, [r6], #4
 8007b20:	e7dc      	b.n	8007adc <__mdiff+0xd4>
 8007b22:	3f01      	subs	r7, #1
 8007b24:	e7e6      	b.n	8007af4 <__mdiff+0xec>
 8007b26:	bf00      	nop
 8007b28:	0800ac23 	.word	0x0800ac23
 8007b2c:	0800ac34 	.word	0x0800ac34

08007b30 <__ulp>:
 8007b30:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <__ulp+0x3c>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	dc08      	bgt.n	8007b4e <__ulp+0x1e>
 8007b3c:	425b      	negs	r3, r3
 8007b3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007b42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b46:	da04      	bge.n	8007b52 <__ulp+0x22>
 8007b48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007b4c:	4113      	asrs	r3, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e008      	b.n	8007b64 <__ulp+0x34>
 8007b52:	f1a2 0314 	sub.w	r3, r2, #20
 8007b56:	2b1e      	cmp	r3, #30
 8007b58:	bfd6      	itet	le
 8007b5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007b5e:	2201      	movgt	r2, #1
 8007b60:	40da      	lsrle	r2, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	7ff00000 	.word	0x7ff00000

08007b70 <__b2d>:
 8007b70:	6902      	ldr	r2, [r0, #16]
 8007b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b74:	f100 0614 	add.w	r6, r0, #20
 8007b78:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007b7c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007b80:	4f1e      	ldr	r7, [pc, #120]	@ (8007bfc <__b2d+0x8c>)
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff fd54 	bl	8007630 <__hi0bits>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f1c0 0020 	rsb	r0, r0, #32
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	f1a2 0504 	sub.w	r5, r2, #4
 8007b94:	6008      	str	r0, [r1, #0]
 8007b96:	dc12      	bgt.n	8007bbe <__b2d+0x4e>
 8007b98:	42ae      	cmp	r6, r5
 8007b9a:	bf2c      	ite	cs
 8007b9c:	2200      	movcs	r2, #0
 8007b9e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007ba2:	f1c3 0c0b 	rsb	ip, r3, #11
 8007ba6:	3315      	adds	r3, #21
 8007ba8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007bac:	fa04 f303 	lsl.w	r3, r4, r3
 8007bb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007bb4:	ea4e 0107 	orr.w	r1, lr, r7
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbe:	42ae      	cmp	r6, r5
 8007bc0:	bf36      	itet	cc
 8007bc2:	f1a2 0508 	subcc.w	r5, r2, #8
 8007bc6:	2200      	movcs	r2, #0
 8007bc8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007bcc:	3b0b      	subs	r3, #11
 8007bce:	d012      	beq.n	8007bf6 <__b2d+0x86>
 8007bd0:	f1c3 0720 	rsb	r7, r3, #32
 8007bd4:	fa22 f107 	lsr.w	r1, r2, r7
 8007bd8:	409c      	lsls	r4, r3
 8007bda:	430c      	orrs	r4, r1
 8007bdc:	42b5      	cmp	r5, r6
 8007bde:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007be2:	bf94      	ite	ls
 8007be4:	2400      	movls	r4, #0
 8007be6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007bea:	409a      	lsls	r2, r3
 8007bec:	40fc      	lsrs	r4, r7
 8007bee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007bf2:	4322      	orrs	r2, r4
 8007bf4:	e7e1      	b.n	8007bba <__b2d+0x4a>
 8007bf6:	ea44 0107 	orr.w	r1, r4, r7
 8007bfa:	e7de      	b.n	8007bba <__b2d+0x4a>
 8007bfc:	3ff00000 	.word	0x3ff00000

08007c00 <__d2b>:
 8007c00:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007c04:	2101      	movs	r1, #1
 8007c06:	4690      	mov	r8, r2
 8007c08:	4699      	mov	r9, r3
 8007c0a:	9e08      	ldr	r6, [sp, #32]
 8007c0c:	f7ff fc1e 	bl	800744c <_Balloc>
 8007c10:	4604      	mov	r4, r0
 8007c12:	b930      	cbnz	r0, 8007c22 <__d2b+0x22>
 8007c14:	4602      	mov	r2, r0
 8007c16:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c1a:	4b23      	ldr	r3, [pc, #140]	@ (8007ca8 <__d2b+0xa8>)
 8007c1c:	4823      	ldr	r0, [pc, #140]	@ (8007cac <__d2b+0xac>)
 8007c1e:	f001 fb5d 	bl	80092dc <__assert_func>
 8007c22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c2a:	b10d      	cbz	r5, 8007c30 <__d2b+0x30>
 8007c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	f1b8 0300 	subs.w	r3, r8, #0
 8007c36:	d024      	beq.n	8007c82 <__d2b+0x82>
 8007c38:	4668      	mov	r0, sp
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	f7ff fd17 	bl	800766e <__lo0bits>
 8007c40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c44:	b1d8      	cbz	r0, 8007c7e <__d2b+0x7e>
 8007c46:	f1c0 0320 	rsb	r3, r0, #32
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	40c2      	lsrs	r2, r0
 8007c52:	6163      	str	r3, [r4, #20]
 8007c54:	9201      	str	r2, [sp, #4]
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bf0c      	ite	eq
 8007c5c:	2201      	moveq	r2, #1
 8007c5e:	2202      	movne	r2, #2
 8007c60:	61a3      	str	r3, [r4, #24]
 8007c62:	6122      	str	r2, [r4, #16]
 8007c64:	b1ad      	cbz	r5, 8007c92 <__d2b+0x92>
 8007c66:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c6a:	4405      	add	r5, r0
 8007c6c:	6035      	str	r5, [r6, #0]
 8007c6e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c74:	6018      	str	r0, [r3, #0]
 8007c76:	4620      	mov	r0, r4
 8007c78:	b002      	add	sp, #8
 8007c7a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007c7e:	6161      	str	r1, [r4, #20]
 8007c80:	e7e9      	b.n	8007c56 <__d2b+0x56>
 8007c82:	a801      	add	r0, sp, #4
 8007c84:	f7ff fcf3 	bl	800766e <__lo0bits>
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	6163      	str	r3, [r4, #20]
 8007c8e:	3020      	adds	r0, #32
 8007c90:	e7e7      	b.n	8007c62 <__d2b+0x62>
 8007c92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c9a:	6030      	str	r0, [r6, #0]
 8007c9c:	6918      	ldr	r0, [r3, #16]
 8007c9e:	f7ff fcc7 	bl	8007630 <__hi0bits>
 8007ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ca6:	e7e4      	b.n	8007c72 <__d2b+0x72>
 8007ca8:	0800ac23 	.word	0x0800ac23
 8007cac:	0800ac34 	.word	0x0800ac34

08007cb0 <__ratio>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	e9cd 1000 	strd	r1, r0, [sp]
 8007cba:	a902      	add	r1, sp, #8
 8007cbc:	f7ff ff58 	bl	8007b70 <__b2d>
 8007cc0:	468b      	mov	fp, r1
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	9800      	ldr	r0, [sp, #0]
 8007cc8:	a903      	add	r1, sp, #12
 8007cca:	f7ff ff51 	bl	8007b70 <__b2d>
 8007cce:	460d      	mov	r5, r1
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	6919      	ldr	r1, [r3, #16]
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	4604      	mov	r4, r0
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	4630      	mov	r0, r6
 8007cde:	1ac9      	subs	r1, r1, r3
 8007ce0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bfcd      	iteet	gt
 8007cee:	463a      	movgt	r2, r7
 8007cf0:	462a      	movle	r2, r5
 8007cf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007cf6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007cfa:	bfd8      	it	le
 8007cfc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007d00:	464b      	mov	r3, r9
 8007d02:	4622      	mov	r2, r4
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fd11 	bl	800072c <__aeabi_ddiv>
 8007d0a:	b005      	add	sp, #20
 8007d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d10 <__copybits>:
 8007d10:	3901      	subs	r1, #1
 8007d12:	b570      	push	{r4, r5, r6, lr}
 8007d14:	1149      	asrs	r1, r1, #5
 8007d16:	6914      	ldr	r4, [r2, #16]
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f102 0314 	add.w	r3, r2, #20
 8007d1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d26:	1f05      	subs	r5, r0, #4
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d30c      	bcc.n	8007d46 <__copybits+0x36>
 8007d2c:	1aa3      	subs	r3, r4, r2
 8007d2e:	3b11      	subs	r3, #17
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	3211      	adds	r2, #17
 8007d36:	42a2      	cmp	r2, r4
 8007d38:	bf88      	it	hi
 8007d3a:	2300      	movhi	r3, #0
 8007d3c:	4418      	add	r0, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4288      	cmp	r0, r1
 8007d42:	d305      	bcc.n	8007d50 <__copybits+0x40>
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d4e:	e7eb      	b.n	8007d28 <__copybits+0x18>
 8007d50:	f840 3b04 	str.w	r3, [r0], #4
 8007d54:	e7f4      	b.n	8007d40 <__copybits+0x30>

08007d56 <__any_on>:
 8007d56:	f100 0214 	add.w	r2, r0, #20
 8007d5a:	6900      	ldr	r0, [r0, #16]
 8007d5c:	114b      	asrs	r3, r1, #5
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	b510      	push	{r4, lr}
 8007d62:	db11      	blt.n	8007d88 <__any_on+0x32>
 8007d64:	dd0a      	ble.n	8007d7c <__any_on+0x26>
 8007d66:	f011 011f 	ands.w	r1, r1, #31
 8007d6a:	d007      	beq.n	8007d7c <__any_on+0x26>
 8007d6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d70:	fa24 f001 	lsr.w	r0, r4, r1
 8007d74:	fa00 f101 	lsl.w	r1, r0, r1
 8007d78:	428c      	cmp	r4, r1
 8007d7a:	d10b      	bne.n	8007d94 <__any_on+0x3e>
 8007d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d803      	bhi.n	8007d8c <__any_on+0x36>
 8007d84:	2000      	movs	r0, #0
 8007d86:	bd10      	pop	{r4, pc}
 8007d88:	4603      	mov	r3, r0
 8007d8a:	e7f7      	b.n	8007d7c <__any_on+0x26>
 8007d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d90:	2900      	cmp	r1, #0
 8007d92:	d0f5      	beq.n	8007d80 <__any_on+0x2a>
 8007d94:	2001      	movs	r0, #1
 8007d96:	e7f6      	b.n	8007d86 <__any_on+0x30>

08007d98 <sulp>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	4690      	mov	r8, r2
 8007da0:	f7ff fec6 	bl	8007b30 <__ulp>
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	f1b8 0f00 	cmp.w	r8, #0
 8007dac:	d011      	beq.n	8007dd2 <sulp+0x3a>
 8007dae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007db2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd0b      	ble.n	8007dd2 <sulp+0x3a>
 8007dba:	2400      	movs	r4, #0
 8007dbc:	051b      	lsls	r3, r3, #20
 8007dbe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007dc2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dda:	0000      	movs	r0, r0
 8007ddc:	0000      	movs	r0, r0
	...

08007de0 <_strtod_l>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	b09f      	sub	sp, #124	@ 0x7c
 8007de6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007de8:	2200      	movs	r2, #0
 8007dea:	460c      	mov	r4, r1
 8007dec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007dee:	f04f 0a00 	mov.w	sl, #0
 8007df2:	f04f 0b00 	mov.w	fp, #0
 8007df6:	460a      	mov	r2, r1
 8007df8:	9005      	str	r0, [sp, #20]
 8007dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dfc:	7811      	ldrb	r1, [r2, #0]
 8007dfe:	292b      	cmp	r1, #43	@ 0x2b
 8007e00:	d048      	beq.n	8007e94 <_strtod_l+0xb4>
 8007e02:	d836      	bhi.n	8007e72 <_strtod_l+0x92>
 8007e04:	290d      	cmp	r1, #13
 8007e06:	d830      	bhi.n	8007e6a <_strtod_l+0x8a>
 8007e08:	2908      	cmp	r1, #8
 8007e0a:	d830      	bhi.n	8007e6e <_strtod_l+0x8e>
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	d039      	beq.n	8007e84 <_strtod_l+0xa4>
 8007e10:	2200      	movs	r2, #0
 8007e12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007e16:	782a      	ldrb	r2, [r5, #0]
 8007e18:	2a30      	cmp	r2, #48	@ 0x30
 8007e1a:	f040 80b1 	bne.w	8007f80 <_strtod_l+0x1a0>
 8007e1e:	786a      	ldrb	r2, [r5, #1]
 8007e20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e24:	2a58      	cmp	r2, #88	@ 0x58
 8007e26:	d16c      	bne.n	8007f02 <_strtod_l+0x122>
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e2c:	4a8e      	ldr	r2, [pc, #568]	@ (8008068 <_strtod_l+0x288>)
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	ab1a      	add	r3, sp, #104	@ 0x68
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	9805      	ldr	r0, [sp, #20]
 8007e36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e38:	a919      	add	r1, sp, #100	@ 0x64
 8007e3a:	f001 fae9 	bl	8009410 <__gethex>
 8007e3e:	f010 060f 	ands.w	r6, r0, #15
 8007e42:	4604      	mov	r4, r0
 8007e44:	d005      	beq.n	8007e52 <_strtod_l+0x72>
 8007e46:	2e06      	cmp	r6, #6
 8007e48:	d126      	bne.n	8007e98 <_strtod_l+0xb8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 8584 	bne.w	8008962 <_strtod_l+0xb82>
 8007e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e5c:	b1bb      	cbz	r3, 8007e8e <_strtod_l+0xae>
 8007e5e:	4650      	mov	r0, sl
 8007e60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007e64:	b01f      	add	sp, #124	@ 0x7c
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	2920      	cmp	r1, #32
 8007e6c:	d1d0      	bne.n	8007e10 <_strtod_l+0x30>
 8007e6e:	3201      	adds	r2, #1
 8007e70:	e7c3      	b.n	8007dfa <_strtod_l+0x1a>
 8007e72:	292d      	cmp	r1, #45	@ 0x2d
 8007e74:	d1cc      	bne.n	8007e10 <_strtod_l+0x30>
 8007e76:	2101      	movs	r1, #1
 8007e78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e7a:	1c51      	adds	r1, r2, #1
 8007e7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e7e:	7852      	ldrb	r2, [r2, #1]
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d1c7      	bne.n	8007e14 <_strtod_l+0x34>
 8007e84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e86:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 8568 	bne.w	800895e <_strtod_l+0xb7e>
 8007e8e:	4650      	mov	r0, sl
 8007e90:	4659      	mov	r1, fp
 8007e92:	e7e7      	b.n	8007e64 <_strtod_l+0x84>
 8007e94:	2100      	movs	r1, #0
 8007e96:	e7ef      	b.n	8007e78 <_strtod_l+0x98>
 8007e98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007e9a:	b13a      	cbz	r2, 8007eac <_strtod_l+0xcc>
 8007e9c:	2135      	movs	r1, #53	@ 0x35
 8007e9e:	a81c      	add	r0, sp, #112	@ 0x70
 8007ea0:	f7ff ff36 	bl	8007d10 <__copybits>
 8007ea4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ea6:	9805      	ldr	r0, [sp, #20]
 8007ea8:	f7ff fb10 	bl	80074cc <_Bfree>
 8007eac:	3e01      	subs	r6, #1
 8007eae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007eb0:	2e04      	cmp	r6, #4
 8007eb2:	d806      	bhi.n	8007ec2 <_strtod_l+0xe2>
 8007eb4:	e8df f006 	tbb	[pc, r6]
 8007eb8:	201d0314 	.word	0x201d0314
 8007ebc:	14          	.byte	0x14
 8007ebd:	00          	.byte	0x00
 8007ebe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007ec2:	05e1      	lsls	r1, r4, #23
 8007ec4:	bf48      	it	mi
 8007ec6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007eca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ece:	0d1b      	lsrs	r3, r3, #20
 8007ed0:	051b      	lsls	r3, r3, #20
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1bd      	bne.n	8007e52 <_strtod_l+0x72>
 8007ed6:	f7fe fb29 	bl	800652c <__errno>
 8007eda:	2322      	movs	r3, #34	@ 0x22
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	e7b8      	b.n	8007e52 <_strtod_l+0x72>
 8007ee0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ee4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ee8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007eec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ef0:	e7e7      	b.n	8007ec2 <_strtod_l+0xe2>
 8007ef2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800806c <_strtod_l+0x28c>
 8007ef6:	e7e4      	b.n	8007ec2 <_strtod_l+0xe2>
 8007ef8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007efc:	f04f 3aff 	mov.w	sl, #4294967295
 8007f00:	e7df      	b.n	8007ec2 <_strtod_l+0xe2>
 8007f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	2b30      	cmp	r3, #48	@ 0x30
 8007f0c:	d0f9      	beq.n	8007f02 <_strtod_l+0x122>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d09f      	beq.n	8007e52 <_strtod_l+0x72>
 8007f12:	2301      	movs	r3, #1
 8007f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f18:	220a      	movs	r2, #10
 8007f1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	461f      	mov	r7, r3
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f24:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007f26:	7805      	ldrb	r5, [r0, #0]
 8007f28:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007f2c:	b2d9      	uxtb	r1, r3
 8007f2e:	2909      	cmp	r1, #9
 8007f30:	d928      	bls.n	8007f84 <_strtod_l+0x1a4>
 8007f32:	2201      	movs	r2, #1
 8007f34:	494e      	ldr	r1, [pc, #312]	@ (8008070 <_strtod_l+0x290>)
 8007f36:	f001 f99b 	bl	8009270 <strncmp>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d032      	beq.n	8007fa4 <_strtod_l+0x1c4>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	462a      	mov	r2, r5
 8007f42:	4681      	mov	r9, r0
 8007f44:	463d      	mov	r5, r7
 8007f46:	4603      	mov	r3, r0
 8007f48:	2a65      	cmp	r2, #101	@ 0x65
 8007f4a:	d001      	beq.n	8007f50 <_strtod_l+0x170>
 8007f4c:	2a45      	cmp	r2, #69	@ 0x45
 8007f4e:	d114      	bne.n	8007f7a <_strtod_l+0x19a>
 8007f50:	b91d      	cbnz	r5, 8007f5a <_strtod_l+0x17a>
 8007f52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f54:	4302      	orrs	r2, r0
 8007f56:	d095      	beq.n	8007e84 <_strtod_l+0xa4>
 8007f58:	2500      	movs	r5, #0
 8007f5a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007f5c:	1c62      	adds	r2, r4, #1
 8007f5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f60:	7862      	ldrb	r2, [r4, #1]
 8007f62:	2a2b      	cmp	r2, #43	@ 0x2b
 8007f64:	d077      	beq.n	8008056 <_strtod_l+0x276>
 8007f66:	2a2d      	cmp	r2, #45	@ 0x2d
 8007f68:	d07b      	beq.n	8008062 <_strtod_l+0x282>
 8007f6a:	f04f 0c00 	mov.w	ip, #0
 8007f6e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007f72:	2909      	cmp	r1, #9
 8007f74:	f240 8082 	bls.w	800807c <_strtod_l+0x29c>
 8007f78:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f7a:	f04f 0800 	mov.w	r8, #0
 8007f7e:	e0a2      	b.n	80080c6 <_strtod_l+0x2e6>
 8007f80:	2300      	movs	r3, #0
 8007f82:	e7c7      	b.n	8007f14 <_strtod_l+0x134>
 8007f84:	2f08      	cmp	r7, #8
 8007f86:	bfd5      	itete	le
 8007f88:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007f8a:	9908      	ldrgt	r1, [sp, #32]
 8007f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f90:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007f94:	f100 0001 	add.w	r0, r0, #1
 8007f98:	bfd4      	ite	le
 8007f9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007f9c:	9308      	strgt	r3, [sp, #32]
 8007f9e:	3701      	adds	r7, #1
 8007fa0:	9019      	str	r0, [sp, #100]	@ 0x64
 8007fa2:	e7bf      	b.n	8007f24 <_strtod_l+0x144>
 8007fa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007faa:	785a      	ldrb	r2, [r3, #1]
 8007fac:	b37f      	cbz	r7, 800800e <_strtod_l+0x22e>
 8007fae:	4681      	mov	r9, r0
 8007fb0:	463d      	mov	r5, r7
 8007fb2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d912      	bls.n	8007fe0 <_strtod_l+0x200>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e7c4      	b.n	8007f48 <_strtod_l+0x168>
 8007fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fc6:	785a      	ldrb	r2, [r3, #1]
 8007fc8:	2a30      	cmp	r2, #48	@ 0x30
 8007fca:	d0f8      	beq.n	8007fbe <_strtod_l+0x1de>
 8007fcc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	f200 84cb 	bhi.w	800896c <_strtod_l+0xb8c>
 8007fd6:	4681      	mov	r9, r0
 8007fd8:	2000      	movs	r0, #0
 8007fda:	4605      	mov	r5, r0
 8007fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fde:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fe0:	3a30      	subs	r2, #48	@ 0x30
 8007fe2:	f100 0301 	add.w	r3, r0, #1
 8007fe6:	d02a      	beq.n	800803e <_strtod_l+0x25e>
 8007fe8:	4499      	add	r9, r3
 8007fea:	210a      	movs	r1, #10
 8007fec:	462b      	mov	r3, r5
 8007fee:	eb00 0c05 	add.w	ip, r0, r5
 8007ff2:	4563      	cmp	r3, ip
 8007ff4:	d10d      	bne.n	8008012 <_strtod_l+0x232>
 8007ff6:	1c69      	adds	r1, r5, #1
 8007ff8:	4401      	add	r1, r0
 8007ffa:	4428      	add	r0, r5
 8007ffc:	2808      	cmp	r0, #8
 8007ffe:	dc16      	bgt.n	800802e <_strtod_l+0x24e>
 8008000:	230a      	movs	r3, #10
 8008002:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008004:	fb03 2300 	mla	r3, r3, r0, r2
 8008008:	930a      	str	r3, [sp, #40]	@ 0x28
 800800a:	2300      	movs	r3, #0
 800800c:	e018      	b.n	8008040 <_strtod_l+0x260>
 800800e:	4638      	mov	r0, r7
 8008010:	e7da      	b.n	8007fc8 <_strtod_l+0x1e8>
 8008012:	2b08      	cmp	r3, #8
 8008014:	f103 0301 	add.w	r3, r3, #1
 8008018:	dc03      	bgt.n	8008022 <_strtod_l+0x242>
 800801a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800801c:	434e      	muls	r6, r1
 800801e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008020:	e7e7      	b.n	8007ff2 <_strtod_l+0x212>
 8008022:	2b10      	cmp	r3, #16
 8008024:	bfde      	ittt	le
 8008026:	9e08      	ldrle	r6, [sp, #32]
 8008028:	434e      	mulle	r6, r1
 800802a:	9608      	strle	r6, [sp, #32]
 800802c:	e7e1      	b.n	8007ff2 <_strtod_l+0x212>
 800802e:	280f      	cmp	r0, #15
 8008030:	dceb      	bgt.n	800800a <_strtod_l+0x22a>
 8008032:	230a      	movs	r3, #10
 8008034:	9808      	ldr	r0, [sp, #32]
 8008036:	fb03 2300 	mla	r3, r3, r0, r2
 800803a:	9308      	str	r3, [sp, #32]
 800803c:	e7e5      	b.n	800800a <_strtod_l+0x22a>
 800803e:	4629      	mov	r1, r5
 8008040:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008042:	460d      	mov	r5, r1
 8008044:	1c50      	adds	r0, r2, #1
 8008046:	9019      	str	r0, [sp, #100]	@ 0x64
 8008048:	7852      	ldrb	r2, [r2, #1]
 800804a:	4618      	mov	r0, r3
 800804c:	e7b1      	b.n	8007fb2 <_strtod_l+0x1d2>
 800804e:	f04f 0900 	mov.w	r9, #0
 8008052:	2301      	movs	r3, #1
 8008054:	e77d      	b.n	8007f52 <_strtod_l+0x172>
 8008056:	f04f 0c00 	mov.w	ip, #0
 800805a:	1ca2      	adds	r2, r4, #2
 800805c:	9219      	str	r2, [sp, #100]	@ 0x64
 800805e:	78a2      	ldrb	r2, [r4, #2]
 8008060:	e785      	b.n	8007f6e <_strtod_l+0x18e>
 8008062:	f04f 0c01 	mov.w	ip, #1
 8008066:	e7f8      	b.n	800805a <_strtod_l+0x27a>
 8008068:	0800ada8 	.word	0x0800ada8
 800806c:	7ff00000 	.word	0x7ff00000
 8008070:	0800ad90 	.word	0x0800ad90
 8008074:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008076:	1c51      	adds	r1, r2, #1
 8008078:	9119      	str	r1, [sp, #100]	@ 0x64
 800807a:	7852      	ldrb	r2, [r2, #1]
 800807c:	2a30      	cmp	r2, #48	@ 0x30
 800807e:	d0f9      	beq.n	8008074 <_strtod_l+0x294>
 8008080:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008084:	2908      	cmp	r1, #8
 8008086:	f63f af78 	bhi.w	8007f7a <_strtod_l+0x19a>
 800808a:	f04f 080a 	mov.w	r8, #10
 800808e:	3a30      	subs	r2, #48	@ 0x30
 8008090:	920e      	str	r2, [sp, #56]	@ 0x38
 8008092:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008094:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008096:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008098:	1c56      	adds	r6, r2, #1
 800809a:	9619      	str	r6, [sp, #100]	@ 0x64
 800809c:	7852      	ldrb	r2, [r2, #1]
 800809e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80080a2:	f1be 0f09 	cmp.w	lr, #9
 80080a6:	d939      	bls.n	800811c <_strtod_l+0x33c>
 80080a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80080aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80080ae:	1a76      	subs	r6, r6, r1
 80080b0:	2e08      	cmp	r6, #8
 80080b2:	dc03      	bgt.n	80080bc <_strtod_l+0x2dc>
 80080b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80080b6:	4588      	cmp	r8, r1
 80080b8:	bfa8      	it	ge
 80080ba:	4688      	movge	r8, r1
 80080bc:	f1bc 0f00 	cmp.w	ip, #0
 80080c0:	d001      	beq.n	80080c6 <_strtod_l+0x2e6>
 80080c2:	f1c8 0800 	rsb	r8, r8, #0
 80080c6:	2d00      	cmp	r5, #0
 80080c8:	d14e      	bne.n	8008168 <_strtod_l+0x388>
 80080ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080cc:	4308      	orrs	r0, r1
 80080ce:	f47f aec0 	bne.w	8007e52 <_strtod_l+0x72>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f47f aed6 	bne.w	8007e84 <_strtod_l+0xa4>
 80080d8:	2a69      	cmp	r2, #105	@ 0x69
 80080da:	d028      	beq.n	800812e <_strtod_l+0x34e>
 80080dc:	dc25      	bgt.n	800812a <_strtod_l+0x34a>
 80080de:	2a49      	cmp	r2, #73	@ 0x49
 80080e0:	d025      	beq.n	800812e <_strtod_l+0x34e>
 80080e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80080e4:	f47f aece 	bne.w	8007e84 <_strtod_l+0xa4>
 80080e8:	499a      	ldr	r1, [pc, #616]	@ (8008354 <_strtod_l+0x574>)
 80080ea:	a819      	add	r0, sp, #100	@ 0x64
 80080ec:	f001 fbb2 	bl	8009854 <__match>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f43f aec7 	beq.w	8007e84 <_strtod_l+0xa4>
 80080f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b28      	cmp	r3, #40	@ 0x28
 80080fc:	d12e      	bne.n	800815c <_strtod_l+0x37c>
 80080fe:	4996      	ldr	r1, [pc, #600]	@ (8008358 <_strtod_l+0x578>)
 8008100:	aa1c      	add	r2, sp, #112	@ 0x70
 8008102:	a819      	add	r0, sp, #100	@ 0x64
 8008104:	f001 fbba 	bl	800987c <__hexnan>
 8008108:	2805      	cmp	r0, #5
 800810a:	d127      	bne.n	800815c <_strtod_l+0x37c>
 800810c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800810e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008112:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008116:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800811a:	e69a      	b.n	8007e52 <_strtod_l+0x72>
 800811c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800811e:	fb08 2101 	mla	r1, r8, r1, r2
 8008122:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008126:	920e      	str	r2, [sp, #56]	@ 0x38
 8008128:	e7b5      	b.n	8008096 <_strtod_l+0x2b6>
 800812a:	2a6e      	cmp	r2, #110	@ 0x6e
 800812c:	e7da      	b.n	80080e4 <_strtod_l+0x304>
 800812e:	498b      	ldr	r1, [pc, #556]	@ (800835c <_strtod_l+0x57c>)
 8008130:	a819      	add	r0, sp, #100	@ 0x64
 8008132:	f001 fb8f 	bl	8009854 <__match>
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f aea4 	beq.w	8007e84 <_strtod_l+0xa4>
 800813c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800813e:	4988      	ldr	r1, [pc, #544]	@ (8008360 <_strtod_l+0x580>)
 8008140:	3b01      	subs	r3, #1
 8008142:	a819      	add	r0, sp, #100	@ 0x64
 8008144:	9319      	str	r3, [sp, #100]	@ 0x64
 8008146:	f001 fb85 	bl	8009854 <__match>
 800814a:	b910      	cbnz	r0, 8008152 <_strtod_l+0x372>
 800814c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800814e:	3301      	adds	r3, #1
 8008150:	9319      	str	r3, [sp, #100]	@ 0x64
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008364 <_strtod_l+0x584>
 800815a:	e67a      	b.n	8007e52 <_strtod_l+0x72>
 800815c:	4882      	ldr	r0, [pc, #520]	@ (8008368 <_strtod_l+0x588>)
 800815e:	f001 f8b7 	bl	80092d0 <nan>
 8008162:	4682      	mov	sl, r0
 8008164:	468b      	mov	fp, r1
 8008166:	e674      	b.n	8007e52 <_strtod_l+0x72>
 8008168:	eba8 0309 	sub.w	r3, r8, r9
 800816c:	2f00      	cmp	r7, #0
 800816e:	bf08      	it	eq
 8008170:	462f      	moveq	r7, r5
 8008172:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008174:	2d10      	cmp	r5, #16
 8008176:	462c      	mov	r4, r5
 8008178:	9309      	str	r3, [sp, #36]	@ 0x24
 800817a:	bfa8      	it	ge
 800817c:	2410      	movge	r4, #16
 800817e:	f7f8 f931 	bl	80003e4 <__aeabi_ui2d>
 8008182:	2d09      	cmp	r5, #9
 8008184:	4682      	mov	sl, r0
 8008186:	468b      	mov	fp, r1
 8008188:	dc11      	bgt.n	80081ae <_strtod_l+0x3ce>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	f43f ae60 	beq.w	8007e52 <_strtod_l+0x72>
 8008192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008194:	dd76      	ble.n	8008284 <_strtod_l+0x4a4>
 8008196:	2b16      	cmp	r3, #22
 8008198:	dc5d      	bgt.n	8008256 <_strtod_l+0x476>
 800819a:	4974      	ldr	r1, [pc, #464]	@ (800836c <_strtod_l+0x58c>)
 800819c:	4652      	mov	r2, sl
 800819e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081a2:	465b      	mov	r3, fp
 80081a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a8:	f7f8 f996 	bl	80004d8 <__aeabi_dmul>
 80081ac:	e7d9      	b.n	8008162 <_strtod_l+0x382>
 80081ae:	4b6f      	ldr	r3, [pc, #444]	@ (800836c <_strtod_l+0x58c>)
 80081b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80081b8:	f7f8 f98e 	bl	80004d8 <__aeabi_dmul>
 80081bc:	4682      	mov	sl, r0
 80081be:	9808      	ldr	r0, [sp, #32]
 80081c0:	468b      	mov	fp, r1
 80081c2:	f7f8 f90f 	bl	80003e4 <__aeabi_ui2d>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4650      	mov	r0, sl
 80081cc:	4659      	mov	r1, fp
 80081ce:	f7f7 ffcd 	bl	800016c <__adddf3>
 80081d2:	2d0f      	cmp	r5, #15
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	ddd7      	ble.n	800818a <_strtod_l+0x3aa>
 80081da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081dc:	1b2c      	subs	r4, r5, r4
 80081de:	441c      	add	r4, r3
 80081e0:	2c00      	cmp	r4, #0
 80081e2:	f340 8096 	ble.w	8008312 <_strtod_l+0x532>
 80081e6:	f014 030f 	ands.w	r3, r4, #15
 80081ea:	d00a      	beq.n	8008202 <_strtod_l+0x422>
 80081ec:	495f      	ldr	r1, [pc, #380]	@ (800836c <_strtod_l+0x58c>)
 80081ee:	4652      	mov	r2, sl
 80081f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f8:	465b      	mov	r3, fp
 80081fa:	f7f8 f96d 	bl	80004d8 <__aeabi_dmul>
 80081fe:	4682      	mov	sl, r0
 8008200:	468b      	mov	fp, r1
 8008202:	f034 040f 	bics.w	r4, r4, #15
 8008206:	d073      	beq.n	80082f0 <_strtod_l+0x510>
 8008208:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800820c:	dd48      	ble.n	80082a0 <_strtod_l+0x4c0>
 800820e:	2400      	movs	r4, #0
 8008210:	46a0      	mov	r8, r4
 8008212:	46a1      	mov	r9, r4
 8008214:	940a      	str	r4, [sp, #40]	@ 0x28
 8008216:	2322      	movs	r3, #34	@ 0x22
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	9a05      	ldr	r2, [sp, #20]
 800821e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008364 <_strtod_l+0x584>
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	f43f ae13 	beq.w	8007e52 <_strtod_l+0x72>
 800822c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800822e:	9805      	ldr	r0, [sp, #20]
 8008230:	f7ff f94c 	bl	80074cc <_Bfree>
 8008234:	4649      	mov	r1, r9
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	f7ff f948 	bl	80074cc <_Bfree>
 800823c:	4641      	mov	r1, r8
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	f7ff f944 	bl	80074cc <_Bfree>
 8008244:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008246:	9805      	ldr	r0, [sp, #20]
 8008248:	f7ff f940 	bl	80074cc <_Bfree>
 800824c:	4621      	mov	r1, r4
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	f7ff f93c 	bl	80074cc <_Bfree>
 8008254:	e5fd      	b.n	8007e52 <_strtod_l+0x72>
 8008256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008258:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800825c:	4293      	cmp	r3, r2
 800825e:	dbbc      	blt.n	80081da <_strtod_l+0x3fa>
 8008260:	4c42      	ldr	r4, [pc, #264]	@ (800836c <_strtod_l+0x58c>)
 8008262:	f1c5 050f 	rsb	r5, r5, #15
 8008266:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800826a:	4652      	mov	r2, sl
 800826c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008270:	465b      	mov	r3, fp
 8008272:	f7f8 f931 	bl	80004d8 <__aeabi_dmul>
 8008276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008278:	1b5d      	subs	r5, r3, r5
 800827a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800827e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008282:	e791      	b.n	80081a8 <_strtod_l+0x3c8>
 8008284:	3316      	adds	r3, #22
 8008286:	dba8      	blt.n	80081da <_strtod_l+0x3fa>
 8008288:	4b38      	ldr	r3, [pc, #224]	@ (800836c <_strtod_l+0x58c>)
 800828a:	eba9 0808 	sub.w	r8, r9, r8
 800828e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008292:	4650      	mov	r0, sl
 8008294:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008298:	4659      	mov	r1, fp
 800829a:	f7f8 fa47 	bl	800072c <__aeabi_ddiv>
 800829e:	e760      	b.n	8008162 <_strtod_l+0x382>
 80082a0:	4b33      	ldr	r3, [pc, #204]	@ (8008370 <_strtod_l+0x590>)
 80082a2:	4650      	mov	r0, sl
 80082a4:	9308      	str	r3, [sp, #32]
 80082a6:	2300      	movs	r3, #0
 80082a8:	4659      	mov	r1, fp
 80082aa:	461e      	mov	r6, r3
 80082ac:	1124      	asrs	r4, r4, #4
 80082ae:	2c01      	cmp	r4, #1
 80082b0:	dc21      	bgt.n	80082f6 <_strtod_l+0x516>
 80082b2:	b10b      	cbz	r3, 80082b8 <_strtod_l+0x4d8>
 80082b4:	4682      	mov	sl, r0
 80082b6:	468b      	mov	fp, r1
 80082b8:	492d      	ldr	r1, [pc, #180]	@ (8008370 <_strtod_l+0x590>)
 80082ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80082be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80082c2:	4652      	mov	r2, sl
 80082c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c8:	465b      	mov	r3, fp
 80082ca:	f7f8 f905 	bl	80004d8 <__aeabi_dmul>
 80082ce:	4b25      	ldr	r3, [pc, #148]	@ (8008364 <_strtod_l+0x584>)
 80082d0:	460a      	mov	r2, r1
 80082d2:	400b      	ands	r3, r1
 80082d4:	4927      	ldr	r1, [pc, #156]	@ (8008374 <_strtod_l+0x594>)
 80082d6:	4682      	mov	sl, r0
 80082d8:	428b      	cmp	r3, r1
 80082da:	d898      	bhi.n	800820e <_strtod_l+0x42e>
 80082dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80082e0:	428b      	cmp	r3, r1
 80082e2:	bf86      	itte	hi
 80082e4:	f04f 3aff 	movhi.w	sl, #4294967295
 80082e8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008378 <_strtod_l+0x598>
 80082ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80082f0:	2300      	movs	r3, #0
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	e07a      	b.n	80083ec <_strtod_l+0x60c>
 80082f6:	07e2      	lsls	r2, r4, #31
 80082f8:	d505      	bpl.n	8008306 <_strtod_l+0x526>
 80082fa:	9b08      	ldr	r3, [sp, #32]
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 f8ea 	bl	80004d8 <__aeabi_dmul>
 8008304:	2301      	movs	r3, #1
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	3601      	adds	r6, #1
 800830a:	3208      	adds	r2, #8
 800830c:	1064      	asrs	r4, r4, #1
 800830e:	9208      	str	r2, [sp, #32]
 8008310:	e7cd      	b.n	80082ae <_strtod_l+0x4ce>
 8008312:	d0ed      	beq.n	80082f0 <_strtod_l+0x510>
 8008314:	4264      	negs	r4, r4
 8008316:	f014 020f 	ands.w	r2, r4, #15
 800831a:	d00a      	beq.n	8008332 <_strtod_l+0x552>
 800831c:	4b13      	ldr	r3, [pc, #76]	@ (800836c <_strtod_l+0x58c>)
 800831e:	4650      	mov	r0, sl
 8008320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008324:	4659      	mov	r1, fp
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f7f8 f9ff 	bl	800072c <__aeabi_ddiv>
 800832e:	4682      	mov	sl, r0
 8008330:	468b      	mov	fp, r1
 8008332:	1124      	asrs	r4, r4, #4
 8008334:	d0dc      	beq.n	80082f0 <_strtod_l+0x510>
 8008336:	2c1f      	cmp	r4, #31
 8008338:	dd20      	ble.n	800837c <_strtod_l+0x59c>
 800833a:	2400      	movs	r4, #0
 800833c:	46a0      	mov	r8, r4
 800833e:	46a1      	mov	r9, r4
 8008340:	940a      	str	r4, [sp, #40]	@ 0x28
 8008342:	2322      	movs	r3, #34	@ 0x22
 8008344:	9a05      	ldr	r2, [sp, #20]
 8008346:	f04f 0a00 	mov.w	sl, #0
 800834a:	f04f 0b00 	mov.w	fp, #0
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	e768      	b.n	8008224 <_strtod_l+0x444>
 8008352:	bf00      	nop
 8008354:	0800ab7b 	.word	0x0800ab7b
 8008358:	0800ad94 	.word	0x0800ad94
 800835c:	0800ab73 	.word	0x0800ab73
 8008360:	0800abaa 	.word	0x0800abaa
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	0800af3d 	.word	0x0800af3d
 800836c:	0800acc8 	.word	0x0800acc8
 8008370:	0800aca0 	.word	0x0800aca0
 8008374:	7ca00000 	.word	0x7ca00000
 8008378:	7fefffff 	.word	0x7fefffff
 800837c:	f014 0310 	ands.w	r3, r4, #16
 8008380:	bf18      	it	ne
 8008382:	236a      	movne	r3, #106	@ 0x6a
 8008384:	4650      	mov	r0, sl
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	4659      	mov	r1, fp
 800838a:	2300      	movs	r3, #0
 800838c:	4ea9      	ldr	r6, [pc, #676]	@ (8008634 <_strtod_l+0x854>)
 800838e:	07e2      	lsls	r2, r4, #31
 8008390:	d504      	bpl.n	800839c <_strtod_l+0x5bc>
 8008392:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008396:	f7f8 f89f 	bl	80004d8 <__aeabi_dmul>
 800839a:	2301      	movs	r3, #1
 800839c:	1064      	asrs	r4, r4, #1
 800839e:	f106 0608 	add.w	r6, r6, #8
 80083a2:	d1f4      	bne.n	800838e <_strtod_l+0x5ae>
 80083a4:	b10b      	cbz	r3, 80083aa <_strtod_l+0x5ca>
 80083a6:	4682      	mov	sl, r0
 80083a8:	468b      	mov	fp, r1
 80083aa:	9b08      	ldr	r3, [sp, #32]
 80083ac:	b1b3      	cbz	r3, 80083dc <_strtod_l+0x5fc>
 80083ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80083b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	4659      	mov	r1, fp
 80083ba:	dd0f      	ble.n	80083dc <_strtod_l+0x5fc>
 80083bc:	2b1f      	cmp	r3, #31
 80083be:	dd57      	ble.n	8008470 <_strtod_l+0x690>
 80083c0:	2b34      	cmp	r3, #52	@ 0x34
 80083c2:	bfd8      	it	le
 80083c4:	f04f 33ff 	movle.w	r3, #4294967295
 80083c8:	f04f 0a00 	mov.w	sl, #0
 80083cc:	bfcf      	iteee	gt
 80083ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80083d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80083d6:	4093      	lslle	r3, r2
 80083d8:	ea03 0b01 	andle.w	fp, r3, r1
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f8 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d1a6      	bne.n	800833a <_strtod_l+0x55a>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	463a      	mov	r2, r7
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80083f4:	462b      	mov	r3, r5
 80083f6:	9805      	ldr	r0, [sp, #20]
 80083f8:	f7ff f8d0 	bl	800759c <__s2b>
 80083fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80083fe:	2800      	cmp	r0, #0
 8008400:	f43f af05 	beq.w	800820e <_strtod_l+0x42e>
 8008404:	2400      	movs	r4, #0
 8008406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008408:	eba9 0308 	sub.w	r3, r9, r8
 800840c:	2a00      	cmp	r2, #0
 800840e:	bfa8      	it	ge
 8008410:	2300      	movge	r3, #0
 8008412:	46a0      	mov	r8, r4
 8008414:	9312      	str	r3, [sp, #72]	@ 0x48
 8008416:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800841a:	9316      	str	r3, [sp, #88]	@ 0x58
 800841c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841e:	9805      	ldr	r0, [sp, #20]
 8008420:	6859      	ldr	r1, [r3, #4]
 8008422:	f7ff f813 	bl	800744c <_Balloc>
 8008426:	4681      	mov	r9, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	f43f aef4 	beq.w	8008216 <_strtod_l+0x436>
 800842e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008430:	300c      	adds	r0, #12
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	f103 010c 	add.w	r1, r3, #12
 8008438:	3202      	adds	r2, #2
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	f000 ff3a 	bl	80092b4 <memcpy>
 8008440:	ab1c      	add	r3, sp, #112	@ 0x70
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	9805      	ldr	r0, [sp, #20]
 800844e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008452:	f7ff fbd5 	bl	8007c00 <__d2b>
 8008456:	901a      	str	r0, [sp, #104]	@ 0x68
 8008458:	2800      	cmp	r0, #0
 800845a:	f43f aedc 	beq.w	8008216 <_strtod_l+0x436>
 800845e:	2101      	movs	r1, #1
 8008460:	9805      	ldr	r0, [sp, #20]
 8008462:	f7ff f931 	bl	80076c8 <__i2b>
 8008466:	4680      	mov	r8, r0
 8008468:	b948      	cbnz	r0, 800847e <_strtod_l+0x69e>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	e6d2      	b.n	8008216 <_strtod_l+0x436>
 8008470:	f04f 32ff 	mov.w	r2, #4294967295
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	ea03 0a0a 	and.w	sl, r3, sl
 800847c:	e7ae      	b.n	80083dc <_strtod_l+0x5fc>
 800847e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008480:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008482:	2d00      	cmp	r5, #0
 8008484:	bfab      	itete	ge
 8008486:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008488:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800848a:	18ef      	addge	r7, r5, r3
 800848c:	1b5e      	sublt	r6, r3, r5
 800848e:	9b08      	ldr	r3, [sp, #32]
 8008490:	bfa8      	it	ge
 8008492:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008494:	eba5 0503 	sub.w	r5, r5, r3
 8008498:	4415      	add	r5, r2
 800849a:	4b67      	ldr	r3, [pc, #412]	@ (8008638 <_strtod_l+0x858>)
 800849c:	f105 35ff 	add.w	r5, r5, #4294967295
 80084a0:	bfb8      	it	lt
 80084a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80084a4:	429d      	cmp	r5, r3
 80084a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80084aa:	da50      	bge.n	800854e <_strtod_l+0x76e>
 80084ac:	1b5b      	subs	r3, r3, r5
 80084ae:	2b1f      	cmp	r3, #31
 80084b0:	f04f 0101 	mov.w	r1, #1
 80084b4:	eba2 0203 	sub.w	r2, r2, r3
 80084b8:	dc3d      	bgt.n	8008536 <_strtod_l+0x756>
 80084ba:	fa01 f303 	lsl.w	r3, r1, r3
 80084be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084c0:	2300      	movs	r3, #0
 80084c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80084c4:	18bd      	adds	r5, r7, r2
 80084c6:	9b08      	ldr	r3, [sp, #32]
 80084c8:	42af      	cmp	r7, r5
 80084ca:	4416      	add	r6, r2
 80084cc:	441e      	add	r6, r3
 80084ce:	463b      	mov	r3, r7
 80084d0:	bfa8      	it	ge
 80084d2:	462b      	movge	r3, r5
 80084d4:	42b3      	cmp	r3, r6
 80084d6:	bfa8      	it	ge
 80084d8:	4633      	movge	r3, r6
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfc2      	ittt	gt
 80084de:	1aed      	subgt	r5, r5, r3
 80084e0:	1af6      	subgt	r6, r6, r3
 80084e2:	1aff      	subgt	r7, r7, r3
 80084e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dd16      	ble.n	8008518 <_strtod_l+0x738>
 80084ea:	4641      	mov	r1, r8
 80084ec:	461a      	mov	r2, r3
 80084ee:	9805      	ldr	r0, [sp, #20]
 80084f0:	f7ff f9a8 	bl	8007844 <__pow5mult>
 80084f4:	4680      	mov	r8, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d0b7      	beq.n	800846a <_strtod_l+0x68a>
 80084fa:	4601      	mov	r1, r0
 80084fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084fe:	9805      	ldr	r0, [sp, #20]
 8008500:	f7ff f8f8 	bl	80076f4 <__multiply>
 8008504:	900e      	str	r0, [sp, #56]	@ 0x38
 8008506:	2800      	cmp	r0, #0
 8008508:	f43f ae85 	beq.w	8008216 <_strtod_l+0x436>
 800850c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800850e:	9805      	ldr	r0, [sp, #20]
 8008510:	f7fe ffdc 	bl	80074cc <_Bfree>
 8008514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008516:	931a      	str	r3, [sp, #104]	@ 0x68
 8008518:	2d00      	cmp	r5, #0
 800851a:	dc1d      	bgt.n	8008558 <_strtod_l+0x778>
 800851c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd23      	ble.n	800856a <_strtod_l+0x78a>
 8008522:	4649      	mov	r1, r9
 8008524:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008526:	9805      	ldr	r0, [sp, #20]
 8008528:	f7ff f98c 	bl	8007844 <__pow5mult>
 800852c:	4681      	mov	r9, r0
 800852e:	b9e0      	cbnz	r0, 800856a <_strtod_l+0x78a>
 8008530:	f04f 0900 	mov.w	r9, #0
 8008534:	e66f      	b.n	8008216 <_strtod_l+0x436>
 8008536:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800853a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800853e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008542:	35e2      	adds	r5, #226	@ 0xe2
 8008544:	fa01 f305 	lsl.w	r3, r1, r5
 8008548:	9310      	str	r3, [sp, #64]	@ 0x40
 800854a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800854c:	e7ba      	b.n	80084c4 <_strtod_l+0x6e4>
 800854e:	2300      	movs	r3, #0
 8008550:	9310      	str	r3, [sp, #64]	@ 0x40
 8008552:	2301      	movs	r3, #1
 8008554:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008556:	e7b5      	b.n	80084c4 <_strtod_l+0x6e4>
 8008558:	462a      	mov	r2, r5
 800855a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800855c:	9805      	ldr	r0, [sp, #20]
 800855e:	f7ff f9cb 	bl	80078f8 <__lshift>
 8008562:	901a      	str	r0, [sp, #104]	@ 0x68
 8008564:	2800      	cmp	r0, #0
 8008566:	d1d9      	bne.n	800851c <_strtod_l+0x73c>
 8008568:	e655      	b.n	8008216 <_strtod_l+0x436>
 800856a:	2e00      	cmp	r6, #0
 800856c:	dd07      	ble.n	800857e <_strtod_l+0x79e>
 800856e:	4649      	mov	r1, r9
 8008570:	4632      	mov	r2, r6
 8008572:	9805      	ldr	r0, [sp, #20]
 8008574:	f7ff f9c0 	bl	80078f8 <__lshift>
 8008578:	4681      	mov	r9, r0
 800857a:	2800      	cmp	r0, #0
 800857c:	d0d8      	beq.n	8008530 <_strtod_l+0x750>
 800857e:	2f00      	cmp	r7, #0
 8008580:	dd08      	ble.n	8008594 <_strtod_l+0x7b4>
 8008582:	4641      	mov	r1, r8
 8008584:	463a      	mov	r2, r7
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f7ff f9b6 	bl	80078f8 <__lshift>
 800858c:	4680      	mov	r8, r0
 800858e:	2800      	cmp	r0, #0
 8008590:	f43f ae41 	beq.w	8008216 <_strtod_l+0x436>
 8008594:	464a      	mov	r2, r9
 8008596:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008598:	9805      	ldr	r0, [sp, #20]
 800859a:	f7ff fa35 	bl	8007a08 <__mdiff>
 800859e:	4604      	mov	r4, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f43f ae38 	beq.w	8008216 <_strtod_l+0x436>
 80085a6:	68c3      	ldr	r3, [r0, #12]
 80085a8:	4641      	mov	r1, r8
 80085aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ac:	2300      	movs	r3, #0
 80085ae:	60c3      	str	r3, [r0, #12]
 80085b0:	f7ff fa0e 	bl	80079d0 <__mcmp>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	da45      	bge.n	8008644 <_strtod_l+0x864>
 80085b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ba:	ea53 030a 	orrs.w	r3, r3, sl
 80085be:	d16b      	bne.n	8008698 <_strtod_l+0x8b8>
 80085c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d167      	bne.n	8008698 <_strtod_l+0x8b8>
 80085c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085cc:	0d1b      	lsrs	r3, r3, #20
 80085ce:	051b      	lsls	r3, r3, #20
 80085d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80085d4:	d960      	bls.n	8008698 <_strtod_l+0x8b8>
 80085d6:	6963      	ldr	r3, [r4, #20]
 80085d8:	b913      	cbnz	r3, 80085e0 <_strtod_l+0x800>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	dd5b      	ble.n	8008698 <_strtod_l+0x8b8>
 80085e0:	4621      	mov	r1, r4
 80085e2:	2201      	movs	r2, #1
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	f7ff f987 	bl	80078f8 <__lshift>
 80085ea:	4641      	mov	r1, r8
 80085ec:	4604      	mov	r4, r0
 80085ee:	f7ff f9ef 	bl	80079d0 <__mcmp>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	dd50      	ble.n	8008698 <_strtod_l+0x8b8>
 80085f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085fa:	9a08      	ldr	r2, [sp, #32]
 80085fc:	0d1b      	lsrs	r3, r3, #20
 80085fe:	051b      	lsls	r3, r3, #20
 8008600:	2a00      	cmp	r2, #0
 8008602:	d06a      	beq.n	80086da <_strtod_l+0x8fa>
 8008604:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008608:	d867      	bhi.n	80086da <_strtod_l+0x8fa>
 800860a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800860e:	f67f ae98 	bls.w	8008342 <_strtod_l+0x562>
 8008612:	4650      	mov	r0, sl
 8008614:	4659      	mov	r1, fp
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <_strtod_l+0x85c>)
 8008618:	2200      	movs	r2, #0
 800861a:	f7f7 ff5d 	bl	80004d8 <__aeabi_dmul>
 800861e:	4b08      	ldr	r3, [pc, #32]	@ (8008640 <_strtod_l+0x860>)
 8008620:	4682      	mov	sl, r0
 8008622:	400b      	ands	r3, r1
 8008624:	468b      	mov	fp, r1
 8008626:	2b00      	cmp	r3, #0
 8008628:	f47f ae00 	bne.w	800822c <_strtod_l+0x44c>
 800862c:	2322      	movs	r3, #34	@ 0x22
 800862e:	9a05      	ldr	r2, [sp, #20]
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e5fb      	b.n	800822c <_strtod_l+0x44c>
 8008634:	0800adc0 	.word	0x0800adc0
 8008638:	fffffc02 	.word	0xfffffc02
 800863c:	39500000 	.word	0x39500000
 8008640:	7ff00000 	.word	0x7ff00000
 8008644:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008648:	d165      	bne.n	8008716 <_strtod_l+0x936>
 800864a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800864c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008650:	b35a      	cbz	r2, 80086aa <_strtod_l+0x8ca>
 8008652:	4a99      	ldr	r2, [pc, #612]	@ (80088b8 <_strtod_l+0xad8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d12b      	bne.n	80086b0 <_strtod_l+0x8d0>
 8008658:	9b08      	ldr	r3, [sp, #32]
 800865a:	4651      	mov	r1, sl
 800865c:	b303      	cbz	r3, 80086a0 <_strtod_l+0x8c0>
 800865e:	465a      	mov	r2, fp
 8008660:	4b96      	ldr	r3, [pc, #600]	@ (80088bc <_strtod_l+0xadc>)
 8008662:	4013      	ands	r3, r2
 8008664:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	d81b      	bhi.n	80086a6 <_strtod_l+0x8c6>
 800866e:	0d1b      	lsrs	r3, r3, #20
 8008670:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	4299      	cmp	r1, r3
 800867a:	d119      	bne.n	80086b0 <_strtod_l+0x8d0>
 800867c:	4b90      	ldr	r3, [pc, #576]	@ (80088c0 <_strtod_l+0xae0>)
 800867e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008680:	429a      	cmp	r2, r3
 8008682:	d102      	bne.n	800868a <_strtod_l+0x8aa>
 8008684:	3101      	adds	r1, #1
 8008686:	f43f adc6 	beq.w	8008216 <_strtod_l+0x436>
 800868a:	f04f 0a00 	mov.w	sl, #0
 800868e:	4b8b      	ldr	r3, [pc, #556]	@ (80088bc <_strtod_l+0xadc>)
 8008690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008692:	401a      	ands	r2, r3
 8008694:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1b9      	bne.n	8008612 <_strtod_l+0x832>
 800869e:	e5c5      	b.n	800822c <_strtod_l+0x44c>
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295
 80086a4:	e7e8      	b.n	8008678 <_strtod_l+0x898>
 80086a6:	4613      	mov	r3, r2
 80086a8:	e7e6      	b.n	8008678 <_strtod_l+0x898>
 80086aa:	ea53 030a 	orrs.w	r3, r3, sl
 80086ae:	d0a2      	beq.n	80085f6 <_strtod_l+0x816>
 80086b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086b2:	b1db      	cbz	r3, 80086ec <_strtod_l+0x90c>
 80086b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086b6:	4213      	tst	r3, r2
 80086b8:	d0ee      	beq.n	8008698 <_strtod_l+0x8b8>
 80086ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086bc:	4650      	mov	r0, sl
 80086be:	4659      	mov	r1, fp
 80086c0:	9a08      	ldr	r2, [sp, #32]
 80086c2:	b1bb      	cbz	r3, 80086f4 <_strtod_l+0x914>
 80086c4:	f7ff fb68 	bl	8007d98 <sulp>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086d0:	f7f7 fd4c 	bl	800016c <__adddf3>
 80086d4:	4682      	mov	sl, r0
 80086d6:	468b      	mov	fp, r1
 80086d8:	e7de      	b.n	8008698 <_strtod_l+0x8b8>
 80086da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80086de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80086e2:	f04f 3aff 	mov.w	sl, #4294967295
 80086e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80086ea:	e7d5      	b.n	8008698 <_strtod_l+0x8b8>
 80086ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086ee:	ea13 0f0a 	tst.w	r3, sl
 80086f2:	e7e1      	b.n	80086b8 <_strtod_l+0x8d8>
 80086f4:	f7ff fb50 	bl	8007d98 <sulp>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008700:	f7f7 fd32 	bl	8000168 <__aeabi_dsub>
 8008704:	2200      	movs	r2, #0
 8008706:	2300      	movs	r3, #0
 8008708:	4682      	mov	sl, r0
 800870a:	468b      	mov	fp, r1
 800870c:	f7f8 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8008710:	2800      	cmp	r0, #0
 8008712:	d0c1      	beq.n	8008698 <_strtod_l+0x8b8>
 8008714:	e615      	b.n	8008342 <_strtod_l+0x562>
 8008716:	4641      	mov	r1, r8
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff fac9 	bl	8007cb0 <__ratio>
 800871e:	2200      	movs	r2, #0
 8008720:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	f7f8 f952 	bl	80009d0 <__aeabi_dcmple>
 800872c:	2800      	cmp	r0, #0
 800872e:	d06d      	beq.n	800880c <_strtod_l+0xa2c>
 8008730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d178      	bne.n	8008828 <_strtod_l+0xa48>
 8008736:	f1ba 0f00 	cmp.w	sl, #0
 800873a:	d156      	bne.n	80087ea <_strtod_l+0xa0a>
 800873c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800873e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008742:	2b00      	cmp	r3, #0
 8008744:	d158      	bne.n	80087f8 <_strtod_l+0xa18>
 8008746:	2200      	movs	r2, #0
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	4b5d      	ldr	r3, [pc, #372]	@ (80088c4 <_strtod_l+0xae4>)
 800874e:	f7f8 f935 	bl	80009bc <__aeabi_dcmplt>
 8008752:	2800      	cmp	r0, #0
 8008754:	d157      	bne.n	8008806 <_strtod_l+0xa26>
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	2200      	movs	r2, #0
 800875c:	4b5a      	ldr	r3, [pc, #360]	@ (80088c8 <_strtod_l+0xae8>)
 800875e:	f7f7 febb 	bl	80004d8 <__aeabi_dmul>
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800876a:	9606      	str	r6, [sp, #24]
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008772:	4d52      	ldr	r5, [pc, #328]	@ (80088bc <_strtod_l+0xadc>)
 8008774:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800877a:	401d      	ands	r5, r3
 800877c:	4b53      	ldr	r3, [pc, #332]	@ (80088cc <_strtod_l+0xaec>)
 800877e:	429d      	cmp	r5, r3
 8008780:	f040 80aa 	bne.w	80088d8 <_strtod_l+0xaf8>
 8008784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008786:	4650      	mov	r0, sl
 8008788:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800878c:	4659      	mov	r1, fp
 800878e:	f7ff f9cf 	bl	8007b30 <__ulp>
 8008792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008796:	f7f7 fe9f 	bl	80004d8 <__aeabi_dmul>
 800879a:	4652      	mov	r2, sl
 800879c:	465b      	mov	r3, fp
 800879e:	f7f7 fce5 	bl	800016c <__adddf3>
 80087a2:	460b      	mov	r3, r1
 80087a4:	4945      	ldr	r1, [pc, #276]	@ (80088bc <_strtod_l+0xadc>)
 80087a6:	4a4a      	ldr	r2, [pc, #296]	@ (80088d0 <_strtod_l+0xaf0>)
 80087a8:	4019      	ands	r1, r3
 80087aa:	4291      	cmp	r1, r2
 80087ac:	4682      	mov	sl, r0
 80087ae:	d942      	bls.n	8008836 <_strtod_l+0xa56>
 80087b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087b2:	4b43      	ldr	r3, [pc, #268]	@ (80088c0 <_strtod_l+0xae0>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d103      	bne.n	80087c0 <_strtod_l+0x9e0>
 80087b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087ba:	3301      	adds	r3, #1
 80087bc:	f43f ad2b 	beq.w	8008216 <_strtod_l+0x436>
 80087c0:	f04f 3aff 	mov.w	sl, #4294967295
 80087c4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80088c0 <_strtod_l+0xae0>
 80087c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087ca:	9805      	ldr	r0, [sp, #20]
 80087cc:	f7fe fe7e 	bl	80074cc <_Bfree>
 80087d0:	4649      	mov	r1, r9
 80087d2:	9805      	ldr	r0, [sp, #20]
 80087d4:	f7fe fe7a 	bl	80074cc <_Bfree>
 80087d8:	4641      	mov	r1, r8
 80087da:	9805      	ldr	r0, [sp, #20]
 80087dc:	f7fe fe76 	bl	80074cc <_Bfree>
 80087e0:	4621      	mov	r1, r4
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	f7fe fe72 	bl	80074cc <_Bfree>
 80087e8:	e618      	b.n	800841c <_strtod_l+0x63c>
 80087ea:	f1ba 0f01 	cmp.w	sl, #1
 80087ee:	d103      	bne.n	80087f8 <_strtod_l+0xa18>
 80087f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f43f ada5 	beq.w	8008342 <_strtod_l+0x562>
 80087f8:	2200      	movs	r2, #0
 80087fa:	4b36      	ldr	r3, [pc, #216]	@ (80088d4 <_strtod_l+0xaf4>)
 80087fc:	2600      	movs	r6, #0
 80087fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008802:	4f30      	ldr	r7, [pc, #192]	@ (80088c4 <_strtod_l+0xae4>)
 8008804:	e7b3      	b.n	800876e <_strtod_l+0x98e>
 8008806:	2600      	movs	r6, #0
 8008808:	4f2f      	ldr	r7, [pc, #188]	@ (80088c8 <_strtod_l+0xae8>)
 800880a:	e7ac      	b.n	8008766 <_strtod_l+0x986>
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	4b2d      	ldr	r3, [pc, #180]	@ (80088c8 <_strtod_l+0xae8>)
 8008812:	2200      	movs	r2, #0
 8008814:	f7f7 fe60 	bl	80004d8 <__aeabi_dmul>
 8008818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0a1      	beq.n	8008766 <_strtod_l+0x986>
 8008822:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008826:	e7a2      	b.n	800876e <_strtod_l+0x98e>
 8008828:	2200      	movs	r2, #0
 800882a:	4b26      	ldr	r3, [pc, #152]	@ (80088c4 <_strtod_l+0xae4>)
 800882c:	4616      	mov	r6, r2
 800882e:	461f      	mov	r7, r3
 8008830:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008834:	e79b      	b.n	800876e <_strtod_l+0x98e>
 8008836:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1c1      	bne.n	80087c8 <_strtod_l+0x9e8>
 8008844:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	051b      	lsls	r3, r3, #20
 800884c:	429d      	cmp	r5, r3
 800884e:	d1bb      	bne.n	80087c8 <_strtod_l+0x9e8>
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 fc2c 	bl	80010b0 <__aeabi_d2lz>
 8008858:	f7f7 fe10 	bl	800047c <__aeabi_l2d>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fc80 	bl	8000168 <__aeabi_dsub>
 8008868:	460b      	mov	r3, r1
 800886a:	4602      	mov	r2, r0
 800886c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008870:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008876:	ea46 060a 	orr.w	r6, r6, sl
 800887a:	431e      	orrs	r6, r3
 800887c:	d069      	beq.n	8008952 <_strtod_l+0xb72>
 800887e:	a30a      	add	r3, pc, #40	@ (adr r3, 80088a8 <_strtod_l+0xac8>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f8 f89a 	bl	80009bc <__aeabi_dcmplt>
 8008888:	2800      	cmp	r0, #0
 800888a:	f47f accf 	bne.w	800822c <_strtod_l+0x44c>
 800888e:	a308      	add	r3, pc, #32	@ (adr r3, 80088b0 <_strtod_l+0xad0>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008898:	f7f8 f8ae 	bl	80009f8 <__aeabi_dcmpgt>
 800889c:	2800      	cmp	r0, #0
 800889e:	d093      	beq.n	80087c8 <_strtod_l+0x9e8>
 80088a0:	e4c4      	b.n	800822c <_strtod_l+0x44c>
 80088a2:	bf00      	nop
 80088a4:	f3af 8000 	nop.w
 80088a8:	94a03595 	.word	0x94a03595
 80088ac:	3fdfffff 	.word	0x3fdfffff
 80088b0:	35afe535 	.word	0x35afe535
 80088b4:	3fe00000 	.word	0x3fe00000
 80088b8:	000fffff 	.word	0x000fffff
 80088bc:	7ff00000 	.word	0x7ff00000
 80088c0:	7fefffff 	.word	0x7fefffff
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	3fe00000 	.word	0x3fe00000
 80088cc:	7fe00000 	.word	0x7fe00000
 80088d0:	7c9fffff 	.word	0x7c9fffff
 80088d4:	bff00000 	.word	0xbff00000
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	b323      	cbz	r3, 8008926 <_strtod_l+0xb46>
 80088dc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80088e0:	d821      	bhi.n	8008926 <_strtod_l+0xb46>
 80088e2:	a327      	add	r3, pc, #156	@ (adr r3, 8008980 <_strtod_l+0xba0>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f8 f870 	bl	80009d0 <__aeabi_dcmple>
 80088f0:	b1a0      	cbz	r0, 800891c <_strtod_l+0xb3c>
 80088f2:	4639      	mov	r1, r7
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7f8 f8c7 	bl	8000a88 <__aeabi_d2uiz>
 80088fa:	2801      	cmp	r0, #1
 80088fc:	bf38      	it	cc
 80088fe:	2001      	movcc	r0, #1
 8008900:	f7f7 fd70 	bl	80003e4 <__aeabi_ui2d>
 8008904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	b9fb      	cbnz	r3, 800894c <_strtod_l+0xb6c>
 800890c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008910:	9014      	str	r0, [sp, #80]	@ 0x50
 8008912:	9315      	str	r3, [sp, #84]	@ 0x54
 8008914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008918:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800891c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800891e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008922:	1b5b      	subs	r3, r3, r5
 8008924:	9311      	str	r3, [sp, #68]	@ 0x44
 8008926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800892a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800892e:	f7ff f8ff 	bl	8007b30 <__ulp>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4650      	mov	r0, sl
 8008938:	4659      	mov	r1, fp
 800893a:	f7f7 fdcd 	bl	80004d8 <__aeabi_dmul>
 800893e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008942:	f7f7 fc13 	bl	800016c <__adddf3>
 8008946:	4682      	mov	sl, r0
 8008948:	468b      	mov	fp, r1
 800894a:	e776      	b.n	800883a <_strtod_l+0xa5a>
 800894c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008950:	e7e0      	b.n	8008914 <_strtod_l+0xb34>
 8008952:	a30d      	add	r3, pc, #52	@ (adr r3, 8008988 <_strtod_l+0xba8>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f8 f830 	bl	80009bc <__aeabi_dcmplt>
 800895c:	e79e      	b.n	800889c <_strtod_l+0xabc>
 800895e:	2300      	movs	r3, #0
 8008960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008964:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	f7ff ba77 	b.w	8007e5a <_strtod_l+0x7a>
 800896c:	2a65      	cmp	r2, #101	@ 0x65
 800896e:	f43f ab6e 	beq.w	800804e <_strtod_l+0x26e>
 8008972:	2a45      	cmp	r2, #69	@ 0x45
 8008974:	f43f ab6b 	beq.w	800804e <_strtod_l+0x26e>
 8008978:	2301      	movs	r3, #1
 800897a:	f7ff bba6 	b.w	80080ca <_strtod_l+0x2ea>
 800897e:	bf00      	nop
 8008980:	ffc00000 	.word	0xffc00000
 8008984:	41dfffff 	.word	0x41dfffff
 8008988:	94a03595 	.word	0x94a03595
 800898c:	3fcfffff 	.word	0x3fcfffff

08008990 <_strtod_r>:
 8008990:	4b01      	ldr	r3, [pc, #4]	@ (8008998 <_strtod_r+0x8>)
 8008992:	f7ff ba25 	b.w	8007de0 <_strtod_l>
 8008996:	bf00      	nop
 8008998:	20000070 	.word	0x20000070

0800899c <_strtol_l.constprop.0>:
 800899c:	2b24      	cmp	r3, #36	@ 0x24
 800899e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a2:	4686      	mov	lr, r0
 80089a4:	4690      	mov	r8, r2
 80089a6:	d801      	bhi.n	80089ac <_strtol_l.constprop.0+0x10>
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d106      	bne.n	80089ba <_strtol_l.constprop.0+0x1e>
 80089ac:	f7fd fdbe 	bl	800652c <__errno>
 80089b0:	2316      	movs	r3, #22
 80089b2:	6003      	str	r3, [r0, #0]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	460d      	mov	r5, r1
 80089bc:	4833      	ldr	r0, [pc, #204]	@ (8008a8c <_strtol_l.constprop.0+0xf0>)
 80089be:	462a      	mov	r2, r5
 80089c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c4:	5d06      	ldrb	r6, [r0, r4]
 80089c6:	f016 0608 	ands.w	r6, r6, #8
 80089ca:	d1f8      	bne.n	80089be <_strtol_l.constprop.0+0x22>
 80089cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80089ce:	d12d      	bne.n	8008a2c <_strtol_l.constprop.0+0x90>
 80089d0:	2601      	movs	r6, #1
 80089d2:	782c      	ldrb	r4, [r5, #0]
 80089d4:	1c95      	adds	r5, r2, #2
 80089d6:	f033 0210 	bics.w	r2, r3, #16
 80089da:	d109      	bne.n	80089f0 <_strtol_l.constprop.0+0x54>
 80089dc:	2c30      	cmp	r4, #48	@ 0x30
 80089de:	d12a      	bne.n	8008a36 <_strtol_l.constprop.0+0x9a>
 80089e0:	782a      	ldrb	r2, [r5, #0]
 80089e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089e6:	2a58      	cmp	r2, #88	@ 0x58
 80089e8:	d125      	bne.n	8008a36 <_strtol_l.constprop.0+0x9a>
 80089ea:	2310      	movs	r3, #16
 80089ec:	786c      	ldrb	r4, [r5, #1]
 80089ee:	3502      	adds	r5, #2
 80089f0:	2200      	movs	r2, #0
 80089f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80089f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80089fa:	fbbc f9f3 	udiv	r9, ip, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a08:	2f09      	cmp	r7, #9
 8008a0a:	d81b      	bhi.n	8008a44 <_strtol_l.constprop.0+0xa8>
 8008a0c:	463c      	mov	r4, r7
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	dd27      	ble.n	8008a62 <_strtol_l.constprop.0+0xc6>
 8008a12:	1c57      	adds	r7, r2, #1
 8008a14:	d007      	beq.n	8008a26 <_strtol_l.constprop.0+0x8a>
 8008a16:	4581      	cmp	r9, r0
 8008a18:	d320      	bcc.n	8008a5c <_strtol_l.constprop.0+0xc0>
 8008a1a:	d101      	bne.n	8008a20 <_strtol_l.constprop.0+0x84>
 8008a1c:	45a2      	cmp	sl, r4
 8008a1e:	db1d      	blt.n	8008a5c <_strtol_l.constprop.0+0xc0>
 8008a20:	2201      	movs	r2, #1
 8008a22:	fb00 4003 	mla	r0, r0, r3, r4
 8008a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a2a:	e7eb      	b.n	8008a04 <_strtol_l.constprop.0+0x68>
 8008a2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a2e:	bf04      	itt	eq
 8008a30:	782c      	ldrbeq	r4, [r5, #0]
 8008a32:	1c95      	addeq	r5, r2, #2
 8008a34:	e7cf      	b.n	80089d6 <_strtol_l.constprop.0+0x3a>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1da      	bne.n	80089f0 <_strtol_l.constprop.0+0x54>
 8008a3a:	2c30      	cmp	r4, #48	@ 0x30
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2308      	moveq	r3, #8
 8008a40:	230a      	movne	r3, #10
 8008a42:	e7d5      	b.n	80089f0 <_strtol_l.constprop.0+0x54>
 8008a44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a48:	2f19      	cmp	r7, #25
 8008a4a:	d801      	bhi.n	8008a50 <_strtol_l.constprop.0+0xb4>
 8008a4c:	3c37      	subs	r4, #55	@ 0x37
 8008a4e:	e7de      	b.n	8008a0e <_strtol_l.constprop.0+0x72>
 8008a50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a54:	2f19      	cmp	r7, #25
 8008a56:	d804      	bhi.n	8008a62 <_strtol_l.constprop.0+0xc6>
 8008a58:	3c57      	subs	r4, #87	@ 0x57
 8008a5a:	e7d8      	b.n	8008a0e <_strtol_l.constprop.0+0x72>
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	e7e1      	b.n	8008a26 <_strtol_l.constprop.0+0x8a>
 8008a62:	1c53      	adds	r3, r2, #1
 8008a64:	d108      	bne.n	8008a78 <_strtol_l.constprop.0+0xdc>
 8008a66:	2322      	movs	r3, #34	@ 0x22
 8008a68:	4660      	mov	r0, ip
 8008a6a:	f8ce 3000 	str.w	r3, [lr]
 8008a6e:	f1b8 0f00 	cmp.w	r8, #0
 8008a72:	d0a0      	beq.n	80089b6 <_strtol_l.constprop.0+0x1a>
 8008a74:	1e69      	subs	r1, r5, #1
 8008a76:	e006      	b.n	8008a86 <_strtol_l.constprop.0+0xea>
 8008a78:	b106      	cbz	r6, 8008a7c <_strtol_l.constprop.0+0xe0>
 8008a7a:	4240      	negs	r0, r0
 8008a7c:	f1b8 0f00 	cmp.w	r8, #0
 8008a80:	d099      	beq.n	80089b6 <_strtol_l.constprop.0+0x1a>
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	d1f6      	bne.n	8008a74 <_strtol_l.constprop.0+0xd8>
 8008a86:	f8c8 1000 	str.w	r1, [r8]
 8008a8a:	e794      	b.n	80089b6 <_strtol_l.constprop.0+0x1a>
 8008a8c:	0800ade9 	.word	0x0800ade9

08008a90 <_strtol_r>:
 8008a90:	f7ff bf84 	b.w	800899c <_strtol_l.constprop.0>

08008a94 <__ssputs_r>:
 8008a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	461f      	mov	r7, r3
 8008a9a:	688e      	ldr	r6, [r1, #8]
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	42be      	cmp	r6, r7
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4690      	mov	r8, r2
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	d82d      	bhi.n	8008b04 <__ssputs_r+0x70>
 8008aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ab0:	d026      	beq.n	8008b00 <__ssputs_r+0x6c>
 8008ab2:	6965      	ldr	r5, [r4, #20]
 8008ab4:	6909      	ldr	r1, [r1, #16]
 8008ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aba:	eba3 0901 	sub.w	r9, r3, r1
 8008abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ac2:	1c7b      	adds	r3, r7, #1
 8008ac4:	444b      	add	r3, r9
 8008ac6:	106d      	asrs	r5, r5, #1
 8008ac8:	429d      	cmp	r5, r3
 8008aca:	bf38      	it	cc
 8008acc:	461d      	movcc	r5, r3
 8008ace:	0553      	lsls	r3, r2, #21
 8008ad0:	d527      	bpl.n	8008b22 <__ssputs_r+0x8e>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7fe fc2e 	bl	8007334 <_malloc_r>
 8008ad8:	4606      	mov	r6, r0
 8008ada:	b360      	cbz	r0, 8008b36 <__ssputs_r+0xa2>
 8008adc:	464a      	mov	r2, r9
 8008ade:	6921      	ldr	r1, [r4, #16]
 8008ae0:	f000 fbe8 	bl	80092b4 <memcpy>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	6126      	str	r6, [r4, #16]
 8008af2:	444e      	add	r6, r9
 8008af4:	6026      	str	r6, [r4, #0]
 8008af6:	463e      	mov	r6, r7
 8008af8:	6165      	str	r5, [r4, #20]
 8008afa:	eba5 0509 	sub.w	r5, r5, r9
 8008afe:	60a5      	str	r5, [r4, #8]
 8008b00:	42be      	cmp	r6, r7
 8008b02:	d900      	bls.n	8008b06 <__ssputs_r+0x72>
 8008b04:	463e      	mov	r6, r7
 8008b06:	4632      	mov	r2, r6
 8008b08:	4641      	mov	r1, r8
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	f000 fb96 	bl	800923c <memmove>
 8008b10:	2000      	movs	r0, #0
 8008b12:	68a3      	ldr	r3, [r4, #8]
 8008b14:	1b9b      	subs	r3, r3, r6
 8008b16:	60a3      	str	r3, [r4, #8]
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	4433      	add	r3, r6
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b22:	462a      	mov	r2, r5
 8008b24:	f000 ff57 	bl	80099d6 <_realloc_r>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d1e0      	bne.n	8008af0 <__ssputs_r+0x5c>
 8008b2e:	4650      	mov	r0, sl
 8008b30:	6921      	ldr	r1, [r4, #16]
 8008b32:	f7fe fb8d 	bl	8007250 <_free_r>
 8008b36:	230c      	movs	r3, #12
 8008b38:	f8ca 3000 	str.w	r3, [sl]
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	e7e9      	b.n	8008b1e <__ssputs_r+0x8a>
	...

08008b4c <_svfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	4698      	mov	r8, r3
 8008b52:	898b      	ldrh	r3, [r1, #12]
 8008b54:	4607      	mov	r7, r0
 8008b56:	061b      	lsls	r3, r3, #24
 8008b58:	460d      	mov	r5, r1
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	b09d      	sub	sp, #116	@ 0x74
 8008b5e:	d510      	bpl.n	8008b82 <_svfiprintf_r+0x36>
 8008b60:	690b      	ldr	r3, [r1, #16]
 8008b62:	b973      	cbnz	r3, 8008b82 <_svfiprintf_r+0x36>
 8008b64:	2140      	movs	r1, #64	@ 0x40
 8008b66:	f7fe fbe5 	bl	8007334 <_malloc_r>
 8008b6a:	6028      	str	r0, [r5, #0]
 8008b6c:	6128      	str	r0, [r5, #16]
 8008b6e:	b930      	cbnz	r0, 8008b7e <_svfiprintf_r+0x32>
 8008b70:	230c      	movs	r3, #12
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295
 8008b78:	b01d      	add	sp, #116	@ 0x74
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	2340      	movs	r3, #64	@ 0x40
 8008b80:	616b      	str	r3, [r5, #20]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b86:	2320      	movs	r3, #32
 8008b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b8c:	2330      	movs	r3, #48	@ 0x30
 8008b8e:	f04f 0901 	mov.w	r9, #1
 8008b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008d30 <_svfiprintf_r+0x1e4>
 8008b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	469a      	mov	sl, r3
 8008ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba6:	b10a      	cbz	r2, 8008bac <_svfiprintf_r+0x60>
 8008ba8:	2a25      	cmp	r2, #37	@ 0x25
 8008baa:	d1f9      	bne.n	8008ba0 <_svfiprintf_r+0x54>
 8008bac:	ebba 0b04 	subs.w	fp, sl, r4
 8008bb0:	d00b      	beq.n	8008bca <_svfiprintf_r+0x7e>
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ff6b 	bl	8008a94 <__ssputs_r>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f000 80a7 	beq.w	8008d12 <_svfiprintf_r+0x1c6>
 8008bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc6:	445a      	add	r2, fp
 8008bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bca:	f89a 3000 	ldrb.w	r3, [sl]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 809f 	beq.w	8008d12 <_svfiprintf_r+0x1c6>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bde:	f10a 0a01 	add.w	sl, sl, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	9307      	str	r3, [sp, #28]
 8008be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bec:	4654      	mov	r4, sl
 8008bee:	2205      	movs	r2, #5
 8008bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf4:	484e      	ldr	r0, [pc, #312]	@ (8008d30 <_svfiprintf_r+0x1e4>)
 8008bf6:	f7fd fcc6 	bl	8006586 <memchr>
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	b9d8      	cbnz	r0, 8008c36 <_svfiprintf_r+0xea>
 8008bfe:	06d0      	lsls	r0, r2, #27
 8008c00:	bf44      	itt	mi
 8008c02:	2320      	movmi	r3, #32
 8008c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c08:	0711      	lsls	r1, r2, #28
 8008c0a:	bf44      	itt	mi
 8008c0c:	232b      	movmi	r3, #43	@ 0x2b
 8008c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c12:	f89a 3000 	ldrb.w	r3, [sl]
 8008c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c18:	d015      	beq.n	8008c46 <_svfiprintf_r+0xfa>
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f04f 0c0a 	mov.w	ip, #10
 8008c22:	9a07      	ldr	r2, [sp, #28]
 8008c24:	4621      	mov	r1, r4
 8008c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c2a:	3b30      	subs	r3, #48	@ 0x30
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	d94b      	bls.n	8008cc8 <_svfiprintf_r+0x17c>
 8008c30:	b1b0      	cbz	r0, 8008c60 <_svfiprintf_r+0x114>
 8008c32:	9207      	str	r2, [sp, #28]
 8008c34:	e014      	b.n	8008c60 <_svfiprintf_r+0x114>
 8008c36:	eba0 0308 	sub.w	r3, r0, r8
 8008c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	46a2      	mov	sl, r4
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	e7d2      	b.n	8008bec <_svfiprintf_r+0xa0>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	1d19      	adds	r1, r3, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	9103      	str	r1, [sp, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfbb      	ittet	lt
 8008c52:	425b      	neglt	r3, r3
 8008c54:	f042 0202 	orrlt.w	r2, r2, #2
 8008c58:	9307      	strge	r3, [sp, #28]
 8008c5a:	9307      	strlt	r3, [sp, #28]
 8008c5c:	bfb8      	it	lt
 8008c5e:	9204      	strlt	r2, [sp, #16]
 8008c60:	7823      	ldrb	r3, [r4, #0]
 8008c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c64:	d10a      	bne.n	8008c7c <_svfiprintf_r+0x130>
 8008c66:	7863      	ldrb	r3, [r4, #1]
 8008c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c6a:	d132      	bne.n	8008cd2 <_svfiprintf_r+0x186>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	3402      	adds	r4, #2
 8008c70:	1d1a      	adds	r2, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	9203      	str	r2, [sp, #12]
 8008c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008d34 <_svfiprintf_r+0x1e8>
 8008c80:	2203      	movs	r2, #3
 8008c82:	4650      	mov	r0, sl
 8008c84:	7821      	ldrb	r1, [r4, #0]
 8008c86:	f7fd fc7e 	bl	8006586 <memchr>
 8008c8a:	b138      	cbz	r0, 8008c9c <_svfiprintf_r+0x150>
 8008c8c:	2240      	movs	r2, #64	@ 0x40
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	eba0 000a 	sub.w	r0, r0, sl
 8008c94:	4082      	lsls	r2, r0
 8008c96:	4313      	orrs	r3, r2
 8008c98:	3401      	adds	r4, #1
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca0:	2206      	movs	r2, #6
 8008ca2:	4825      	ldr	r0, [pc, #148]	@ (8008d38 <_svfiprintf_r+0x1ec>)
 8008ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ca8:	f7fd fc6d 	bl	8006586 <memchr>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d036      	beq.n	8008d1e <_svfiprintf_r+0x1d2>
 8008cb0:	4b22      	ldr	r3, [pc, #136]	@ (8008d3c <_svfiprintf_r+0x1f0>)
 8008cb2:	bb1b      	cbnz	r3, 8008cfc <_svfiprintf_r+0x1b0>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	3307      	adds	r3, #7
 8008cb8:	f023 0307 	bic.w	r3, r3, #7
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	9303      	str	r3, [sp, #12]
 8008cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc2:	4433      	add	r3, r6
 8008cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc6:	e76a      	b.n	8008b9e <_svfiprintf_r+0x52>
 8008cc8:	460c      	mov	r4, r1
 8008cca:	2001      	movs	r0, #1
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	e7a8      	b.n	8008c24 <_svfiprintf_r+0xd8>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f04f 0c0a 	mov.w	ip, #10
 8008cd8:	4619      	mov	r1, r3
 8008cda:	3401      	adds	r4, #1
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce4:	3a30      	subs	r2, #48	@ 0x30
 8008ce6:	2a09      	cmp	r2, #9
 8008ce8:	d903      	bls.n	8008cf2 <_svfiprintf_r+0x1a6>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0c6      	beq.n	8008c7c <_svfiprintf_r+0x130>
 8008cee:	9105      	str	r1, [sp, #20]
 8008cf0:	e7c4      	b.n	8008c7c <_svfiprintf_r+0x130>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	e7f0      	b.n	8008cde <_svfiprintf_r+0x192>
 8008cfc:	ab03      	add	r3, sp, #12
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	462a      	mov	r2, r5
 8008d02:	4638      	mov	r0, r7
 8008d04:	4b0e      	ldr	r3, [pc, #56]	@ (8008d40 <_svfiprintf_r+0x1f4>)
 8008d06:	a904      	add	r1, sp, #16
 8008d08:	f7fc fc98 	bl	800563c <_printf_float>
 8008d0c:	1c42      	adds	r2, r0, #1
 8008d0e:	4606      	mov	r6, r0
 8008d10:	d1d6      	bne.n	8008cc0 <_svfiprintf_r+0x174>
 8008d12:	89ab      	ldrh	r3, [r5, #12]
 8008d14:	065b      	lsls	r3, r3, #25
 8008d16:	f53f af2d 	bmi.w	8008b74 <_svfiprintf_r+0x28>
 8008d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d1c:	e72c      	b.n	8008b78 <_svfiprintf_r+0x2c>
 8008d1e:	ab03      	add	r3, sp, #12
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	462a      	mov	r2, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <_svfiprintf_r+0x1f4>)
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	f7fc ff25 	bl	8005b78 <_printf_i>
 8008d2e:	e7ed      	b.n	8008d0c <_svfiprintf_r+0x1c0>
 8008d30:	0800aee9 	.word	0x0800aee9
 8008d34:	0800aeef 	.word	0x0800aeef
 8008d38:	0800aef3 	.word	0x0800aef3
 8008d3c:	0800563d 	.word	0x0800563d
 8008d40:	08008a95 	.word	0x08008a95

08008d44 <__sfputc_r>:
 8008d44:	6893      	ldr	r3, [r2, #8]
 8008d46:	b410      	push	{r4}
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	6093      	str	r3, [r2, #8]
 8008d4e:	da07      	bge.n	8008d60 <__sfputc_r+0x1c>
 8008d50:	6994      	ldr	r4, [r2, #24]
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	db01      	blt.n	8008d5a <__sfputc_r+0x16>
 8008d56:	290a      	cmp	r1, #10
 8008d58:	d102      	bne.n	8008d60 <__sfputc_r+0x1c>
 8008d5a:	bc10      	pop	{r4}
 8008d5c:	f000 b9da 	b.w	8009114 <__swbuf_r>
 8008d60:	6813      	ldr	r3, [r2, #0]
 8008d62:	1c58      	adds	r0, r3, #1
 8008d64:	6010      	str	r0, [r2, #0]
 8008d66:	7019      	strb	r1, [r3, #0]
 8008d68:	4608      	mov	r0, r1
 8008d6a:	bc10      	pop	{r4}
 8008d6c:	4770      	bx	lr

08008d6e <__sfputs_r>:
 8008d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	18d5      	adds	r5, r2, r3
 8008d78:	42ac      	cmp	r4, r5
 8008d7a:	d101      	bne.n	8008d80 <__sfputs_r+0x12>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e007      	b.n	8008d90 <__sfputs_r+0x22>
 8008d80:	463a      	mov	r2, r7
 8008d82:	4630      	mov	r0, r6
 8008d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d88:	f7ff ffdc 	bl	8008d44 <__sfputc_r>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d1f3      	bne.n	8008d78 <__sfputs_r+0xa>
 8008d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d94 <_vfiprintf_r>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	460d      	mov	r5, r1
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	4698      	mov	r8, r3
 8008d9e:	4606      	mov	r6, r0
 8008da0:	b09d      	sub	sp, #116	@ 0x74
 8008da2:	b118      	cbz	r0, 8008dac <_vfiprintf_r+0x18>
 8008da4:	6a03      	ldr	r3, [r0, #32]
 8008da6:	b90b      	cbnz	r3, 8008dac <_vfiprintf_r+0x18>
 8008da8:	f7fd faa2 	bl	80062f0 <__sinit>
 8008dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dae:	07d9      	lsls	r1, r3, #31
 8008db0:	d405      	bmi.n	8008dbe <_vfiprintf_r+0x2a>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	059a      	lsls	r2, r3, #22
 8008db6:	d402      	bmi.n	8008dbe <_vfiprintf_r+0x2a>
 8008db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dba:	f7fd fbe2 	bl	8006582 <__retarget_lock_acquire_recursive>
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	071b      	lsls	r3, r3, #28
 8008dc2:	d501      	bpl.n	8008dc8 <_vfiprintf_r+0x34>
 8008dc4:	692b      	ldr	r3, [r5, #16]
 8008dc6:	b99b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x5c>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f000 f9e0 	bl	8009190 <__swsetup_r>
 8008dd0:	b170      	cbz	r0, 8008df0 <_vfiprintf_r+0x5c>
 8008dd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd4:	07dc      	lsls	r4, r3, #31
 8008dd6:	d504      	bpl.n	8008de2 <_vfiprintf_r+0x4e>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b01d      	add	sp, #116	@ 0x74
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	0598      	lsls	r0, r3, #22
 8008de6:	d4f7      	bmi.n	8008dd8 <_vfiprintf_r+0x44>
 8008de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dea:	f7fd fbcb 	bl	8006584 <__retarget_lock_release_recursive>
 8008dee:	e7f3      	b.n	8008dd8 <_vfiprintf_r+0x44>
 8008df0:	2300      	movs	r3, #0
 8008df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df4:	2320      	movs	r3, #32
 8008df6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dfa:	2330      	movs	r3, #48	@ 0x30
 8008dfc:	f04f 0901 	mov.w	r9, #1
 8008e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008fb0 <_vfiprintf_r+0x21c>
 8008e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	469a      	mov	sl, r3
 8008e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e14:	b10a      	cbz	r2, 8008e1a <_vfiprintf_r+0x86>
 8008e16:	2a25      	cmp	r2, #37	@ 0x25
 8008e18:	d1f9      	bne.n	8008e0e <_vfiprintf_r+0x7a>
 8008e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e1e:	d00b      	beq.n	8008e38 <_vfiprintf_r+0xa4>
 8008e20:	465b      	mov	r3, fp
 8008e22:	4622      	mov	r2, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	4630      	mov	r0, r6
 8008e28:	f7ff ffa1 	bl	8008d6e <__sfputs_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f000 80a7 	beq.w	8008f80 <_vfiprintf_r+0x1ec>
 8008e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e34:	445a      	add	r2, fp
 8008e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e38:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 809f 	beq.w	8008f80 <_vfiprintf_r+0x1ec>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e4c:	f10a 0a01 	add.w	sl, sl, #1
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e58:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e5a:	4654      	mov	r4, sl
 8008e5c:	2205      	movs	r2, #5
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	4853      	ldr	r0, [pc, #332]	@ (8008fb0 <_vfiprintf_r+0x21c>)
 8008e64:	f7fd fb8f 	bl	8006586 <memchr>
 8008e68:	9a04      	ldr	r2, [sp, #16]
 8008e6a:	b9d8      	cbnz	r0, 8008ea4 <_vfiprintf_r+0x110>
 8008e6c:	06d1      	lsls	r1, r2, #27
 8008e6e:	bf44      	itt	mi
 8008e70:	2320      	movmi	r3, #32
 8008e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e76:	0713      	lsls	r3, r2, #28
 8008e78:	bf44      	itt	mi
 8008e7a:	232b      	movmi	r3, #43	@ 0x2b
 8008e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e80:	f89a 3000 	ldrb.w	r3, [sl]
 8008e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e86:	d015      	beq.n	8008eb4 <_vfiprintf_r+0x120>
 8008e88:	4654      	mov	r4, sl
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	f04f 0c0a 	mov.w	ip, #10
 8008e90:	9a07      	ldr	r2, [sp, #28]
 8008e92:	4621      	mov	r1, r4
 8008e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e98:	3b30      	subs	r3, #48	@ 0x30
 8008e9a:	2b09      	cmp	r3, #9
 8008e9c:	d94b      	bls.n	8008f36 <_vfiprintf_r+0x1a2>
 8008e9e:	b1b0      	cbz	r0, 8008ece <_vfiprintf_r+0x13a>
 8008ea0:	9207      	str	r2, [sp, #28]
 8008ea2:	e014      	b.n	8008ece <_vfiprintf_r+0x13a>
 8008ea4:	eba0 0308 	sub.w	r3, r0, r8
 8008ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8008eac:	4313      	orrs	r3, r2
 8008eae:	46a2      	mov	sl, r4
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	e7d2      	b.n	8008e5a <_vfiprintf_r+0xc6>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	1d19      	adds	r1, r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	9103      	str	r1, [sp, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bfbb      	ittet	lt
 8008ec0:	425b      	neglt	r3, r3
 8008ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec6:	9307      	strge	r3, [sp, #28]
 8008ec8:	9307      	strlt	r3, [sp, #28]
 8008eca:	bfb8      	it	lt
 8008ecc:	9204      	strlt	r2, [sp, #16]
 8008ece:	7823      	ldrb	r3, [r4, #0]
 8008ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed2:	d10a      	bne.n	8008eea <_vfiprintf_r+0x156>
 8008ed4:	7863      	ldrb	r3, [r4, #1]
 8008ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed8:	d132      	bne.n	8008f40 <_vfiprintf_r+0x1ac>
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	3402      	adds	r4, #2
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	9203      	str	r2, [sp, #12]
 8008ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ee8:	9305      	str	r3, [sp, #20]
 8008eea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008fb4 <_vfiprintf_r+0x220>
 8008eee:	2203      	movs	r2, #3
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	7821      	ldrb	r1, [r4, #0]
 8008ef4:	f7fd fb47 	bl	8006586 <memchr>
 8008ef8:	b138      	cbz	r0, 8008f0a <_vfiprintf_r+0x176>
 8008efa:	2240      	movs	r2, #64	@ 0x40
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	eba0 000a 	sub.w	r0, r0, sl
 8008f02:	4082      	lsls	r2, r0
 8008f04:	4313      	orrs	r3, r2
 8008f06:	3401      	adds	r4, #1
 8008f08:	9304      	str	r3, [sp, #16]
 8008f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0e:	2206      	movs	r2, #6
 8008f10:	4829      	ldr	r0, [pc, #164]	@ (8008fb8 <_vfiprintf_r+0x224>)
 8008f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f16:	f7fd fb36 	bl	8006586 <memchr>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d03f      	beq.n	8008f9e <_vfiprintf_r+0x20a>
 8008f1e:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <_vfiprintf_r+0x228>)
 8008f20:	bb1b      	cbnz	r3, 8008f6a <_vfiprintf_r+0x1d6>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	3307      	adds	r3, #7
 8008f26:	f023 0307 	bic.w	r3, r3, #7
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	443b      	add	r3, r7
 8008f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f34:	e76a      	b.n	8008e0c <_vfiprintf_r+0x78>
 8008f36:	460c      	mov	r4, r1
 8008f38:	2001      	movs	r0, #1
 8008f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f3e:	e7a8      	b.n	8008e92 <_vfiprintf_r+0xfe>
 8008f40:	2300      	movs	r3, #0
 8008f42:	f04f 0c0a 	mov.w	ip, #10
 8008f46:	4619      	mov	r1, r3
 8008f48:	3401      	adds	r4, #1
 8008f4a:	9305      	str	r3, [sp, #20]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f52:	3a30      	subs	r2, #48	@ 0x30
 8008f54:	2a09      	cmp	r2, #9
 8008f56:	d903      	bls.n	8008f60 <_vfiprintf_r+0x1cc>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0c6      	beq.n	8008eea <_vfiprintf_r+0x156>
 8008f5c:	9105      	str	r1, [sp, #20]
 8008f5e:	e7c4      	b.n	8008eea <_vfiprintf_r+0x156>
 8008f60:	4604      	mov	r4, r0
 8008f62:	2301      	movs	r3, #1
 8008f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f68:	e7f0      	b.n	8008f4c <_vfiprintf_r+0x1b8>
 8008f6a:	ab03      	add	r3, sp, #12
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	462a      	mov	r2, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	4b13      	ldr	r3, [pc, #76]	@ (8008fc0 <_vfiprintf_r+0x22c>)
 8008f74:	a904      	add	r1, sp, #16
 8008f76:	f7fc fb61 	bl	800563c <_printf_float>
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	1c78      	adds	r0, r7, #1
 8008f7e:	d1d6      	bne.n	8008f2e <_vfiprintf_r+0x19a>
 8008f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d405      	bmi.n	8008f92 <_vfiprintf_r+0x1fe>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_vfiprintf_r+0x1fe>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8e:	f7fd faf9 	bl	8006584 <__retarget_lock_release_recursive>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	065b      	lsls	r3, r3, #25
 8008f96:	f53f af1f 	bmi.w	8008dd8 <_vfiprintf_r+0x44>
 8008f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f9c:	e71e      	b.n	8008ddc <_vfiprintf_r+0x48>
 8008f9e:	ab03      	add	r3, sp, #12
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4b06      	ldr	r3, [pc, #24]	@ (8008fc0 <_vfiprintf_r+0x22c>)
 8008fa8:	a904      	add	r1, sp, #16
 8008faa:	f7fc fde5 	bl	8005b78 <_printf_i>
 8008fae:	e7e4      	b.n	8008f7a <_vfiprintf_r+0x1e6>
 8008fb0:	0800aee9 	.word	0x0800aee9
 8008fb4:	0800aeef 	.word	0x0800aeef
 8008fb8:	0800aef3 	.word	0x0800aef3
 8008fbc:	0800563d 	.word	0x0800563d
 8008fc0:	08008d6f 	.word	0x08008d6f

08008fc4 <__sflush_r>:
 8008fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	0716      	lsls	r6, r2, #28
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	d454      	bmi.n	800907c <__sflush_r+0xb8>
 8008fd2:	684b      	ldr	r3, [r1, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dc02      	bgt.n	8008fde <__sflush_r+0x1a>
 8008fd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dd48      	ble.n	8009070 <__sflush_r+0xac>
 8008fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	d045      	beq.n	8009070 <__sflush_r+0xac>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fea:	682f      	ldr	r7, [r5, #0]
 8008fec:	6a21      	ldr	r1, [r4, #32]
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	d030      	beq.n	8009054 <__sflush_r+0x90>
 8008ff2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	0759      	lsls	r1, r3, #29
 8008ff8:	d505      	bpl.n	8009006 <__sflush_r+0x42>
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	1ad2      	subs	r2, r2, r3
 8008ffe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009000:	b10b      	cbz	r3, 8009006 <__sflush_r+0x42>
 8009002:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009004:	1ad2      	subs	r2, r2, r3
 8009006:	2300      	movs	r3, #0
 8009008:	4628      	mov	r0, r5
 800900a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800900c:	6a21      	ldr	r1, [r4, #32]
 800900e:	47b0      	blx	r6
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	d106      	bne.n	8009024 <__sflush_r+0x60>
 8009016:	6829      	ldr	r1, [r5, #0]
 8009018:	291d      	cmp	r1, #29
 800901a:	d82b      	bhi.n	8009074 <__sflush_r+0xb0>
 800901c:	4a28      	ldr	r2, [pc, #160]	@ (80090c0 <__sflush_r+0xfc>)
 800901e:	410a      	asrs	r2, r1
 8009020:	07d6      	lsls	r6, r2, #31
 8009022:	d427      	bmi.n	8009074 <__sflush_r+0xb0>
 8009024:	2200      	movs	r2, #0
 8009026:	6062      	str	r2, [r4, #4]
 8009028:	6922      	ldr	r2, [r4, #16]
 800902a:	04d9      	lsls	r1, r3, #19
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	d504      	bpl.n	800903a <__sflush_r+0x76>
 8009030:	1c42      	adds	r2, r0, #1
 8009032:	d101      	bne.n	8009038 <__sflush_r+0x74>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b903      	cbnz	r3, 800903a <__sflush_r+0x76>
 8009038:	6560      	str	r0, [r4, #84]	@ 0x54
 800903a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903c:	602f      	str	r7, [r5, #0]
 800903e:	b1b9      	cbz	r1, 8009070 <__sflush_r+0xac>
 8009040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009044:	4299      	cmp	r1, r3
 8009046:	d002      	beq.n	800904e <__sflush_r+0x8a>
 8009048:	4628      	mov	r0, r5
 800904a:	f7fe f901 	bl	8007250 <_free_r>
 800904e:	2300      	movs	r3, #0
 8009050:	6363      	str	r3, [r4, #52]	@ 0x34
 8009052:	e00d      	b.n	8009070 <__sflush_r+0xac>
 8009054:	2301      	movs	r3, #1
 8009056:	4628      	mov	r0, r5
 8009058:	47b0      	blx	r6
 800905a:	4602      	mov	r2, r0
 800905c:	1c50      	adds	r0, r2, #1
 800905e:	d1c9      	bne.n	8008ff4 <__sflush_r+0x30>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0c6      	beq.n	8008ff4 <__sflush_r+0x30>
 8009066:	2b1d      	cmp	r3, #29
 8009068:	d001      	beq.n	800906e <__sflush_r+0xaa>
 800906a:	2b16      	cmp	r3, #22
 800906c:	d11d      	bne.n	80090aa <__sflush_r+0xe6>
 800906e:	602f      	str	r7, [r5, #0]
 8009070:	2000      	movs	r0, #0
 8009072:	e021      	b.n	80090b8 <__sflush_r+0xf4>
 8009074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009078:	b21b      	sxth	r3, r3
 800907a:	e01a      	b.n	80090b2 <__sflush_r+0xee>
 800907c:	690f      	ldr	r7, [r1, #16]
 800907e:	2f00      	cmp	r7, #0
 8009080:	d0f6      	beq.n	8009070 <__sflush_r+0xac>
 8009082:	0793      	lsls	r3, r2, #30
 8009084:	bf18      	it	ne
 8009086:	2300      	movne	r3, #0
 8009088:	680e      	ldr	r6, [r1, #0]
 800908a:	bf08      	it	eq
 800908c:	694b      	ldreq	r3, [r1, #20]
 800908e:	1bf6      	subs	r6, r6, r7
 8009090:	600f      	str	r7, [r1, #0]
 8009092:	608b      	str	r3, [r1, #8]
 8009094:	2e00      	cmp	r6, #0
 8009096:	ddeb      	ble.n	8009070 <__sflush_r+0xac>
 8009098:	4633      	mov	r3, r6
 800909a:	463a      	mov	r2, r7
 800909c:	4628      	mov	r0, r5
 800909e:	6a21      	ldr	r1, [r4, #32]
 80090a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80090a4:	47e0      	blx	ip
 80090a6:	2800      	cmp	r0, #0
 80090a8:	dc07      	bgt.n	80090ba <__sflush_r+0xf6>
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ba:	4407      	add	r7, r0
 80090bc:	1a36      	subs	r6, r6, r0
 80090be:	e7e9      	b.n	8009094 <__sflush_r+0xd0>
 80090c0:	dfbffffe 	.word	0xdfbffffe

080090c4 <_fflush_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b913      	cbnz	r3, 80090d4 <_fflush_r+0x10>
 80090ce:	2500      	movs	r5, #0
 80090d0:	4628      	mov	r0, r5
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	b118      	cbz	r0, 80090de <_fflush_r+0x1a>
 80090d6:	6a03      	ldr	r3, [r0, #32]
 80090d8:	b90b      	cbnz	r3, 80090de <_fflush_r+0x1a>
 80090da:	f7fd f909 	bl	80062f0 <__sinit>
 80090de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f3      	beq.n	80090ce <_fflush_r+0xa>
 80090e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090e8:	07d0      	lsls	r0, r2, #31
 80090ea:	d404      	bmi.n	80090f6 <_fflush_r+0x32>
 80090ec:	0599      	lsls	r1, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_fflush_r+0x32>
 80090f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f2:	f7fd fa46 	bl	8006582 <__retarget_lock_acquire_recursive>
 80090f6:	4628      	mov	r0, r5
 80090f8:	4621      	mov	r1, r4
 80090fa:	f7ff ff63 	bl	8008fc4 <__sflush_r>
 80090fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009100:	4605      	mov	r5, r0
 8009102:	07da      	lsls	r2, r3, #31
 8009104:	d4e4      	bmi.n	80090d0 <_fflush_r+0xc>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	059b      	lsls	r3, r3, #22
 800910a:	d4e1      	bmi.n	80090d0 <_fflush_r+0xc>
 800910c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800910e:	f7fd fa39 	bl	8006584 <__retarget_lock_release_recursive>
 8009112:	e7dd      	b.n	80090d0 <_fflush_r+0xc>

08009114 <__swbuf_r>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	460e      	mov	r6, r1
 8009118:	4614      	mov	r4, r2
 800911a:	4605      	mov	r5, r0
 800911c:	b118      	cbz	r0, 8009126 <__swbuf_r+0x12>
 800911e:	6a03      	ldr	r3, [r0, #32]
 8009120:	b90b      	cbnz	r3, 8009126 <__swbuf_r+0x12>
 8009122:	f7fd f8e5 	bl	80062f0 <__sinit>
 8009126:	69a3      	ldr	r3, [r4, #24]
 8009128:	60a3      	str	r3, [r4, #8]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	071a      	lsls	r2, r3, #28
 800912e:	d501      	bpl.n	8009134 <__swbuf_r+0x20>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	b943      	cbnz	r3, 8009146 <__swbuf_r+0x32>
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f82a 	bl	8009190 <__swsetup_r>
 800913c:	b118      	cbz	r0, 8009146 <__swbuf_r+0x32>
 800913e:	f04f 37ff 	mov.w	r7, #4294967295
 8009142:	4638      	mov	r0, r7
 8009144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6922      	ldr	r2, [r4, #16]
 800914a:	b2f6      	uxtb	r6, r6
 800914c:	1a98      	subs	r0, r3, r2
 800914e:	6963      	ldr	r3, [r4, #20]
 8009150:	4637      	mov	r7, r6
 8009152:	4283      	cmp	r3, r0
 8009154:	dc05      	bgt.n	8009162 <__swbuf_r+0x4e>
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	f7ff ffb3 	bl	80090c4 <_fflush_r>
 800915e:	2800      	cmp	r0, #0
 8009160:	d1ed      	bne.n	800913e <__swbuf_r+0x2a>
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	3b01      	subs	r3, #1
 8009166:	60a3      	str	r3, [r4, #8]
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	6022      	str	r2, [r4, #0]
 800916e:	701e      	strb	r6, [r3, #0]
 8009170:	6962      	ldr	r2, [r4, #20]
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	429a      	cmp	r2, r3
 8009176:	d004      	beq.n	8009182 <__swbuf_r+0x6e>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	07db      	lsls	r3, r3, #31
 800917c:	d5e1      	bpl.n	8009142 <__swbuf_r+0x2e>
 800917e:	2e0a      	cmp	r6, #10
 8009180:	d1df      	bne.n	8009142 <__swbuf_r+0x2e>
 8009182:	4621      	mov	r1, r4
 8009184:	4628      	mov	r0, r5
 8009186:	f7ff ff9d 	bl	80090c4 <_fflush_r>
 800918a:	2800      	cmp	r0, #0
 800918c:	d0d9      	beq.n	8009142 <__swbuf_r+0x2e>
 800918e:	e7d6      	b.n	800913e <__swbuf_r+0x2a>

08009190 <__swsetup_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4b29      	ldr	r3, [pc, #164]	@ (8009238 <__swsetup_r+0xa8>)
 8009194:	4605      	mov	r5, r0
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	460c      	mov	r4, r1
 800919a:	b118      	cbz	r0, 80091a4 <__swsetup_r+0x14>
 800919c:	6a03      	ldr	r3, [r0, #32]
 800919e:	b90b      	cbnz	r3, 80091a4 <__swsetup_r+0x14>
 80091a0:	f7fd f8a6 	bl	80062f0 <__sinit>
 80091a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a8:	0719      	lsls	r1, r3, #28
 80091aa:	d422      	bmi.n	80091f2 <__swsetup_r+0x62>
 80091ac:	06da      	lsls	r2, r3, #27
 80091ae:	d407      	bmi.n	80091c0 <__swsetup_r+0x30>
 80091b0:	2209      	movs	r2, #9
 80091b2:	602a      	str	r2, [r5, #0]
 80091b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	e033      	b.n	8009228 <__swsetup_r+0x98>
 80091c0:	0758      	lsls	r0, r3, #29
 80091c2:	d512      	bpl.n	80091ea <__swsetup_r+0x5a>
 80091c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091c6:	b141      	cbz	r1, 80091da <__swsetup_r+0x4a>
 80091c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <__swsetup_r+0x46>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f7fe f83d 	bl	8007250 <_free_r>
 80091d6:	2300      	movs	r3, #0
 80091d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	2300      	movs	r3, #0
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0308 	orr.w	r3, r3, #8
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	b94b      	cbnz	r3, 800920a <__swsetup_r+0x7a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009200:	d003      	beq.n	800920a <__swsetup_r+0x7a>
 8009202:	4621      	mov	r1, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f000 fc58 	bl	8009aba <__smakebuf_r>
 800920a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800920e:	f013 0201 	ands.w	r2, r3, #1
 8009212:	d00a      	beq.n	800922a <__swsetup_r+0x9a>
 8009214:	2200      	movs	r2, #0
 8009216:	60a2      	str	r2, [r4, #8]
 8009218:	6962      	ldr	r2, [r4, #20]
 800921a:	4252      	negs	r2, r2
 800921c:	61a2      	str	r2, [r4, #24]
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	b942      	cbnz	r2, 8009234 <__swsetup_r+0xa4>
 8009222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009226:	d1c5      	bne.n	80091b4 <__swsetup_r+0x24>
 8009228:	bd38      	pop	{r3, r4, r5, pc}
 800922a:	0799      	lsls	r1, r3, #30
 800922c:	bf58      	it	pl
 800922e:	6962      	ldrpl	r2, [r4, #20]
 8009230:	60a2      	str	r2, [r4, #8]
 8009232:	e7f4      	b.n	800921e <__swsetup_r+0x8e>
 8009234:	2000      	movs	r0, #0
 8009236:	e7f7      	b.n	8009228 <__swsetup_r+0x98>
 8009238:	20000020 	.word	0x20000020

0800923c <memmove>:
 800923c:	4288      	cmp	r0, r1
 800923e:	b510      	push	{r4, lr}
 8009240:	eb01 0402 	add.w	r4, r1, r2
 8009244:	d902      	bls.n	800924c <memmove+0x10>
 8009246:	4284      	cmp	r4, r0
 8009248:	4623      	mov	r3, r4
 800924a:	d807      	bhi.n	800925c <memmove+0x20>
 800924c:	1e43      	subs	r3, r0, #1
 800924e:	42a1      	cmp	r1, r4
 8009250:	d008      	beq.n	8009264 <memmove+0x28>
 8009252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800925a:	e7f8      	b.n	800924e <memmove+0x12>
 800925c:	4601      	mov	r1, r0
 800925e:	4402      	add	r2, r0
 8009260:	428a      	cmp	r2, r1
 8009262:	d100      	bne.n	8009266 <memmove+0x2a>
 8009264:	bd10      	pop	{r4, pc}
 8009266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926e:	e7f7      	b.n	8009260 <memmove+0x24>

08009270 <strncmp>:
 8009270:	b510      	push	{r4, lr}
 8009272:	b16a      	cbz	r2, 8009290 <strncmp+0x20>
 8009274:	3901      	subs	r1, #1
 8009276:	1884      	adds	r4, r0, r2
 8009278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009280:	429a      	cmp	r2, r3
 8009282:	d103      	bne.n	800928c <strncmp+0x1c>
 8009284:	42a0      	cmp	r0, r4
 8009286:	d001      	beq.n	800928c <strncmp+0x1c>
 8009288:	2a00      	cmp	r2, #0
 800928a:	d1f5      	bne.n	8009278 <strncmp+0x8>
 800928c:	1ad0      	subs	r0, r2, r3
 800928e:	bd10      	pop	{r4, pc}
 8009290:	4610      	mov	r0, r2
 8009292:	e7fc      	b.n	800928e <strncmp+0x1e>

08009294 <_sbrk_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	2300      	movs	r3, #0
 8009298:	4d05      	ldr	r5, [pc, #20]	@ (80092b0 <_sbrk_r+0x1c>)
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7f9 f99a 	bl	80025d8 <_sbrk>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_sbrk_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_sbrk_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	200008d0 	.word	0x200008d0

080092b4 <memcpy>:
 80092b4:	440a      	add	r2, r1
 80092b6:	4291      	cmp	r1, r2
 80092b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092bc:	d100      	bne.n	80092c0 <memcpy+0xc>
 80092be:	4770      	bx	lr
 80092c0:	b510      	push	{r4, lr}
 80092c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c6:	4291      	cmp	r1, r2
 80092c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092cc:	d1f9      	bne.n	80092c2 <memcpy+0xe>
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <nan>:
 80092d0:	2000      	movs	r0, #0
 80092d2:	4901      	ldr	r1, [pc, #4]	@ (80092d8 <nan+0x8>)
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	7ff80000 	.word	0x7ff80000

080092dc <__assert_func>:
 80092dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092de:	4614      	mov	r4, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4b09      	ldr	r3, [pc, #36]	@ (8009308 <__assert_func+0x2c>)
 80092e4:	4605      	mov	r5, r0
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68d8      	ldr	r0, [r3, #12]
 80092ea:	b954      	cbnz	r4, 8009302 <__assert_func+0x26>
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <__assert_func+0x30>)
 80092ee:	461c      	mov	r4, r3
 80092f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092f4:	9100      	str	r1, [sp, #0]
 80092f6:	462b      	mov	r3, r5
 80092f8:	4905      	ldr	r1, [pc, #20]	@ (8009310 <__assert_func+0x34>)
 80092fa:	f000 fba7 	bl	8009a4c <fiprintf>
 80092fe:	f000 fc3b 	bl	8009b78 <abort>
 8009302:	4b04      	ldr	r3, [pc, #16]	@ (8009314 <__assert_func+0x38>)
 8009304:	e7f4      	b.n	80092f0 <__assert_func+0x14>
 8009306:	bf00      	nop
 8009308:	20000020 	.word	0x20000020
 800930c:	0800af3d 	.word	0x0800af3d
 8009310:	0800af0f 	.word	0x0800af0f
 8009314:	0800af02 	.word	0x0800af02

08009318 <_calloc_r>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	fba1 5402 	umull	r5, r4, r1, r2
 800931e:	b93c      	cbnz	r4, 8009330 <_calloc_r+0x18>
 8009320:	4629      	mov	r1, r5
 8009322:	f7fe f807 	bl	8007334 <_malloc_r>
 8009326:	4606      	mov	r6, r0
 8009328:	b928      	cbnz	r0, 8009336 <_calloc_r+0x1e>
 800932a:	2600      	movs	r6, #0
 800932c:	4630      	mov	r0, r6
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	220c      	movs	r2, #12
 8009332:	6002      	str	r2, [r0, #0]
 8009334:	e7f9      	b.n	800932a <_calloc_r+0x12>
 8009336:	462a      	mov	r2, r5
 8009338:	4621      	mov	r1, r4
 800933a:	f7fd f8a5 	bl	8006488 <memset>
 800933e:	e7f5      	b.n	800932c <_calloc_r+0x14>

08009340 <rshift>:
 8009340:	6903      	ldr	r3, [r0, #16]
 8009342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009346:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800934a:	f100 0414 	add.w	r4, r0, #20
 800934e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009352:	dd46      	ble.n	80093e2 <rshift+0xa2>
 8009354:	f011 011f 	ands.w	r1, r1, #31
 8009358:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800935c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009360:	d10c      	bne.n	800937c <rshift+0x3c>
 8009362:	4629      	mov	r1, r5
 8009364:	f100 0710 	add.w	r7, r0, #16
 8009368:	42b1      	cmp	r1, r6
 800936a:	d335      	bcc.n	80093d8 <rshift+0x98>
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	1eea      	subs	r2, r5, #3
 8009372:	4296      	cmp	r6, r2
 8009374:	bf38      	it	cc
 8009376:	2300      	movcc	r3, #0
 8009378:	4423      	add	r3, r4
 800937a:	e015      	b.n	80093a8 <rshift+0x68>
 800937c:	46a1      	mov	r9, r4
 800937e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009382:	f1c1 0820 	rsb	r8, r1, #32
 8009386:	40cf      	lsrs	r7, r1
 8009388:	f105 0e04 	add.w	lr, r5, #4
 800938c:	4576      	cmp	r6, lr
 800938e:	46f4      	mov	ip, lr
 8009390:	d816      	bhi.n	80093c0 <rshift+0x80>
 8009392:	1a9a      	subs	r2, r3, r2
 8009394:	0092      	lsls	r2, r2, #2
 8009396:	3a04      	subs	r2, #4
 8009398:	3501      	adds	r5, #1
 800939a:	42ae      	cmp	r6, r5
 800939c:	bf38      	it	cc
 800939e:	2200      	movcc	r2, #0
 80093a0:	18a3      	adds	r3, r4, r2
 80093a2:	50a7      	str	r7, [r4, r2]
 80093a4:	b107      	cbz	r7, 80093a8 <rshift+0x68>
 80093a6:	3304      	adds	r3, #4
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	eba3 0204 	sub.w	r2, r3, r4
 80093ae:	bf08      	it	eq
 80093b0:	2300      	moveq	r3, #0
 80093b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093b6:	6102      	str	r2, [r0, #16]
 80093b8:	bf08      	it	eq
 80093ba:	6143      	streq	r3, [r0, #20]
 80093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c0:	f8dc c000 	ldr.w	ip, [ip]
 80093c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80093c8:	ea4c 0707 	orr.w	r7, ip, r7
 80093cc:	f849 7b04 	str.w	r7, [r9], #4
 80093d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093d4:	40cf      	lsrs	r7, r1
 80093d6:	e7d9      	b.n	800938c <rshift+0x4c>
 80093d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80093dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80093e0:	e7c2      	b.n	8009368 <rshift+0x28>
 80093e2:	4623      	mov	r3, r4
 80093e4:	e7e0      	b.n	80093a8 <rshift+0x68>

080093e6 <__hexdig_fun>:
 80093e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d802      	bhi.n	80093f4 <__hexdig_fun+0xe>
 80093ee:	3820      	subs	r0, #32
 80093f0:	b2c0      	uxtb	r0, r0
 80093f2:	4770      	bx	lr
 80093f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80093f8:	2b05      	cmp	r3, #5
 80093fa:	d801      	bhi.n	8009400 <__hexdig_fun+0x1a>
 80093fc:	3847      	subs	r0, #71	@ 0x47
 80093fe:	e7f7      	b.n	80093f0 <__hexdig_fun+0xa>
 8009400:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009404:	2b05      	cmp	r3, #5
 8009406:	d801      	bhi.n	800940c <__hexdig_fun+0x26>
 8009408:	3827      	subs	r0, #39	@ 0x27
 800940a:	e7f1      	b.n	80093f0 <__hexdig_fun+0xa>
 800940c:	2000      	movs	r0, #0
 800940e:	4770      	bx	lr

08009410 <__gethex>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	468a      	mov	sl, r1
 8009416:	4690      	mov	r8, r2
 8009418:	b085      	sub	sp, #20
 800941a:	9302      	str	r3, [sp, #8]
 800941c:	680b      	ldr	r3, [r1, #0]
 800941e:	9001      	str	r0, [sp, #4]
 8009420:	1c9c      	adds	r4, r3, #2
 8009422:	46a1      	mov	r9, r4
 8009424:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009428:	2830      	cmp	r0, #48	@ 0x30
 800942a:	d0fa      	beq.n	8009422 <__gethex+0x12>
 800942c:	eba9 0303 	sub.w	r3, r9, r3
 8009430:	f1a3 0b02 	sub.w	fp, r3, #2
 8009434:	f7ff ffd7 	bl	80093e6 <__hexdig_fun>
 8009438:	4605      	mov	r5, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	d168      	bne.n	8009510 <__gethex+0x100>
 800943e:	2201      	movs	r2, #1
 8009440:	4648      	mov	r0, r9
 8009442:	499f      	ldr	r1, [pc, #636]	@ (80096c0 <__gethex+0x2b0>)
 8009444:	f7ff ff14 	bl	8009270 <strncmp>
 8009448:	4607      	mov	r7, r0
 800944a:	2800      	cmp	r0, #0
 800944c:	d167      	bne.n	800951e <__gethex+0x10e>
 800944e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009452:	4626      	mov	r6, r4
 8009454:	f7ff ffc7 	bl	80093e6 <__hexdig_fun>
 8009458:	2800      	cmp	r0, #0
 800945a:	d062      	beq.n	8009522 <__gethex+0x112>
 800945c:	4623      	mov	r3, r4
 800945e:	7818      	ldrb	r0, [r3, #0]
 8009460:	4699      	mov	r9, r3
 8009462:	2830      	cmp	r0, #48	@ 0x30
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	d0f9      	beq.n	800945e <__gethex+0x4e>
 800946a:	f7ff ffbc 	bl	80093e6 <__hexdig_fun>
 800946e:	fab0 f580 	clz	r5, r0
 8009472:	f04f 0b01 	mov.w	fp, #1
 8009476:	096d      	lsrs	r5, r5, #5
 8009478:	464a      	mov	r2, r9
 800947a:	4616      	mov	r6, r2
 800947c:	7830      	ldrb	r0, [r6, #0]
 800947e:	3201      	adds	r2, #1
 8009480:	f7ff ffb1 	bl	80093e6 <__hexdig_fun>
 8009484:	2800      	cmp	r0, #0
 8009486:	d1f8      	bne.n	800947a <__gethex+0x6a>
 8009488:	2201      	movs	r2, #1
 800948a:	4630      	mov	r0, r6
 800948c:	498c      	ldr	r1, [pc, #560]	@ (80096c0 <__gethex+0x2b0>)
 800948e:	f7ff feef 	bl	8009270 <strncmp>
 8009492:	2800      	cmp	r0, #0
 8009494:	d13f      	bne.n	8009516 <__gethex+0x106>
 8009496:	b944      	cbnz	r4, 80094aa <__gethex+0x9a>
 8009498:	1c74      	adds	r4, r6, #1
 800949a:	4622      	mov	r2, r4
 800949c:	4616      	mov	r6, r2
 800949e:	7830      	ldrb	r0, [r6, #0]
 80094a0:	3201      	adds	r2, #1
 80094a2:	f7ff ffa0 	bl	80093e6 <__hexdig_fun>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d1f8      	bne.n	800949c <__gethex+0x8c>
 80094aa:	1ba4      	subs	r4, r4, r6
 80094ac:	00a7      	lsls	r7, r4, #2
 80094ae:	7833      	ldrb	r3, [r6, #0]
 80094b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80094b4:	2b50      	cmp	r3, #80	@ 0x50
 80094b6:	d13e      	bne.n	8009536 <__gethex+0x126>
 80094b8:	7873      	ldrb	r3, [r6, #1]
 80094ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80094bc:	d033      	beq.n	8009526 <__gethex+0x116>
 80094be:	2b2d      	cmp	r3, #45	@ 0x2d
 80094c0:	d034      	beq.n	800952c <__gethex+0x11c>
 80094c2:	2400      	movs	r4, #0
 80094c4:	1c71      	adds	r1, r6, #1
 80094c6:	7808      	ldrb	r0, [r1, #0]
 80094c8:	f7ff ff8d 	bl	80093e6 <__hexdig_fun>
 80094cc:	1e43      	subs	r3, r0, #1
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b18      	cmp	r3, #24
 80094d2:	d830      	bhi.n	8009536 <__gethex+0x126>
 80094d4:	f1a0 0210 	sub.w	r2, r0, #16
 80094d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094dc:	f7ff ff83 	bl	80093e6 <__hexdig_fun>
 80094e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80094e4:	fa5f fc8c 	uxtb.w	ip, ip
 80094e8:	f1bc 0f18 	cmp.w	ip, #24
 80094ec:	f04f 030a 	mov.w	r3, #10
 80094f0:	d91e      	bls.n	8009530 <__gethex+0x120>
 80094f2:	b104      	cbz	r4, 80094f6 <__gethex+0xe6>
 80094f4:	4252      	negs	r2, r2
 80094f6:	4417      	add	r7, r2
 80094f8:	f8ca 1000 	str.w	r1, [sl]
 80094fc:	b1ed      	cbz	r5, 800953a <__gethex+0x12a>
 80094fe:	f1bb 0f00 	cmp.w	fp, #0
 8009502:	bf0c      	ite	eq
 8009504:	2506      	moveq	r5, #6
 8009506:	2500      	movne	r5, #0
 8009508:	4628      	mov	r0, r5
 800950a:	b005      	add	sp, #20
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	2500      	movs	r5, #0
 8009512:	462c      	mov	r4, r5
 8009514:	e7b0      	b.n	8009478 <__gethex+0x68>
 8009516:	2c00      	cmp	r4, #0
 8009518:	d1c7      	bne.n	80094aa <__gethex+0x9a>
 800951a:	4627      	mov	r7, r4
 800951c:	e7c7      	b.n	80094ae <__gethex+0x9e>
 800951e:	464e      	mov	r6, r9
 8009520:	462f      	mov	r7, r5
 8009522:	2501      	movs	r5, #1
 8009524:	e7c3      	b.n	80094ae <__gethex+0x9e>
 8009526:	2400      	movs	r4, #0
 8009528:	1cb1      	adds	r1, r6, #2
 800952a:	e7cc      	b.n	80094c6 <__gethex+0xb6>
 800952c:	2401      	movs	r4, #1
 800952e:	e7fb      	b.n	8009528 <__gethex+0x118>
 8009530:	fb03 0002 	mla	r0, r3, r2, r0
 8009534:	e7ce      	b.n	80094d4 <__gethex+0xc4>
 8009536:	4631      	mov	r1, r6
 8009538:	e7de      	b.n	80094f8 <__gethex+0xe8>
 800953a:	4629      	mov	r1, r5
 800953c:	eba6 0309 	sub.w	r3, r6, r9
 8009540:	3b01      	subs	r3, #1
 8009542:	2b07      	cmp	r3, #7
 8009544:	dc0a      	bgt.n	800955c <__gethex+0x14c>
 8009546:	9801      	ldr	r0, [sp, #4]
 8009548:	f7fd ff80 	bl	800744c <_Balloc>
 800954c:	4604      	mov	r4, r0
 800954e:	b940      	cbnz	r0, 8009562 <__gethex+0x152>
 8009550:	4602      	mov	r2, r0
 8009552:	21e4      	movs	r1, #228	@ 0xe4
 8009554:	4b5b      	ldr	r3, [pc, #364]	@ (80096c4 <__gethex+0x2b4>)
 8009556:	485c      	ldr	r0, [pc, #368]	@ (80096c8 <__gethex+0x2b8>)
 8009558:	f7ff fec0 	bl	80092dc <__assert_func>
 800955c:	3101      	adds	r1, #1
 800955e:	105b      	asrs	r3, r3, #1
 8009560:	e7ef      	b.n	8009542 <__gethex+0x132>
 8009562:	2300      	movs	r3, #0
 8009564:	f100 0a14 	add.w	sl, r0, #20
 8009568:	4655      	mov	r5, sl
 800956a:	469b      	mov	fp, r3
 800956c:	45b1      	cmp	r9, r6
 800956e:	d337      	bcc.n	80095e0 <__gethex+0x1d0>
 8009570:	f845 bb04 	str.w	fp, [r5], #4
 8009574:	eba5 050a 	sub.w	r5, r5, sl
 8009578:	10ad      	asrs	r5, r5, #2
 800957a:	6125      	str	r5, [r4, #16]
 800957c:	4658      	mov	r0, fp
 800957e:	f7fe f857 	bl	8007630 <__hi0bits>
 8009582:	016d      	lsls	r5, r5, #5
 8009584:	f8d8 6000 	ldr.w	r6, [r8]
 8009588:	1a2d      	subs	r5, r5, r0
 800958a:	42b5      	cmp	r5, r6
 800958c:	dd54      	ble.n	8009638 <__gethex+0x228>
 800958e:	1bad      	subs	r5, r5, r6
 8009590:	4629      	mov	r1, r5
 8009592:	4620      	mov	r0, r4
 8009594:	f7fe fbdf 	bl	8007d56 <__any_on>
 8009598:	4681      	mov	r9, r0
 800959a:	b178      	cbz	r0, 80095bc <__gethex+0x1ac>
 800959c:	f04f 0901 	mov.w	r9, #1
 80095a0:	1e6b      	subs	r3, r5, #1
 80095a2:	1159      	asrs	r1, r3, #5
 80095a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095a8:	f003 021f 	and.w	r2, r3, #31
 80095ac:	fa09 f202 	lsl.w	r2, r9, r2
 80095b0:	420a      	tst	r2, r1
 80095b2:	d003      	beq.n	80095bc <__gethex+0x1ac>
 80095b4:	454b      	cmp	r3, r9
 80095b6:	dc36      	bgt.n	8009626 <__gethex+0x216>
 80095b8:	f04f 0902 	mov.w	r9, #2
 80095bc:	4629      	mov	r1, r5
 80095be:	4620      	mov	r0, r4
 80095c0:	f7ff febe 	bl	8009340 <rshift>
 80095c4:	442f      	add	r7, r5
 80095c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ca:	42bb      	cmp	r3, r7
 80095cc:	da42      	bge.n	8009654 <__gethex+0x244>
 80095ce:	4621      	mov	r1, r4
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	f7fd ff7b 	bl	80074cc <_Bfree>
 80095d6:	2300      	movs	r3, #0
 80095d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095da:	25a3      	movs	r5, #163	@ 0xa3
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	e793      	b.n	8009508 <__gethex+0xf8>
 80095e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80095e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80095e6:	d012      	beq.n	800960e <__gethex+0x1fe>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d104      	bne.n	80095f6 <__gethex+0x1e6>
 80095ec:	f845 bb04 	str.w	fp, [r5], #4
 80095f0:	f04f 0b00 	mov.w	fp, #0
 80095f4:	465b      	mov	r3, fp
 80095f6:	7830      	ldrb	r0, [r6, #0]
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	f7ff fef4 	bl	80093e6 <__hexdig_fun>
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	f000 000f 	and.w	r0, r0, #15
 8009604:	4098      	lsls	r0, r3
 8009606:	ea4b 0b00 	orr.w	fp, fp, r0
 800960a:	3304      	adds	r3, #4
 800960c:	e7ae      	b.n	800956c <__gethex+0x15c>
 800960e:	45b1      	cmp	r9, r6
 8009610:	d8ea      	bhi.n	80095e8 <__gethex+0x1d8>
 8009612:	2201      	movs	r2, #1
 8009614:	4630      	mov	r0, r6
 8009616:	492a      	ldr	r1, [pc, #168]	@ (80096c0 <__gethex+0x2b0>)
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	f7ff fe29 	bl	8009270 <strncmp>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	2800      	cmp	r0, #0
 8009622:	d1e1      	bne.n	80095e8 <__gethex+0x1d8>
 8009624:	e7a2      	b.n	800956c <__gethex+0x15c>
 8009626:	4620      	mov	r0, r4
 8009628:	1ea9      	subs	r1, r5, #2
 800962a:	f7fe fb94 	bl	8007d56 <__any_on>
 800962e:	2800      	cmp	r0, #0
 8009630:	d0c2      	beq.n	80095b8 <__gethex+0x1a8>
 8009632:	f04f 0903 	mov.w	r9, #3
 8009636:	e7c1      	b.n	80095bc <__gethex+0x1ac>
 8009638:	da09      	bge.n	800964e <__gethex+0x23e>
 800963a:	1b75      	subs	r5, r6, r5
 800963c:	4621      	mov	r1, r4
 800963e:	462a      	mov	r2, r5
 8009640:	9801      	ldr	r0, [sp, #4]
 8009642:	f7fe f959 	bl	80078f8 <__lshift>
 8009646:	4604      	mov	r4, r0
 8009648:	1b7f      	subs	r7, r7, r5
 800964a:	f100 0a14 	add.w	sl, r0, #20
 800964e:	f04f 0900 	mov.w	r9, #0
 8009652:	e7b8      	b.n	80095c6 <__gethex+0x1b6>
 8009654:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009658:	42bd      	cmp	r5, r7
 800965a:	dd6f      	ble.n	800973c <__gethex+0x32c>
 800965c:	1bed      	subs	r5, r5, r7
 800965e:	42ae      	cmp	r6, r5
 8009660:	dc34      	bgt.n	80096cc <__gethex+0x2bc>
 8009662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d022      	beq.n	80096b0 <__gethex+0x2a0>
 800966a:	2b03      	cmp	r3, #3
 800966c:	d024      	beq.n	80096b8 <__gethex+0x2a8>
 800966e:	2b01      	cmp	r3, #1
 8009670:	d115      	bne.n	800969e <__gethex+0x28e>
 8009672:	42ae      	cmp	r6, r5
 8009674:	d113      	bne.n	800969e <__gethex+0x28e>
 8009676:	2e01      	cmp	r6, #1
 8009678:	d10b      	bne.n	8009692 <__gethex+0x282>
 800967a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800967e:	9a02      	ldr	r2, [sp, #8]
 8009680:	2562      	movs	r5, #98	@ 0x62
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	2301      	movs	r3, #1
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	f8ca 3000 	str.w	r3, [sl]
 800968c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968e:	601c      	str	r4, [r3, #0]
 8009690:	e73a      	b.n	8009508 <__gethex+0xf8>
 8009692:	4620      	mov	r0, r4
 8009694:	1e71      	subs	r1, r6, #1
 8009696:	f7fe fb5e 	bl	8007d56 <__any_on>
 800969a:	2800      	cmp	r0, #0
 800969c:	d1ed      	bne.n	800967a <__gethex+0x26a>
 800969e:	4621      	mov	r1, r4
 80096a0:	9801      	ldr	r0, [sp, #4]
 80096a2:	f7fd ff13 	bl	80074cc <_Bfree>
 80096a6:	2300      	movs	r3, #0
 80096a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096aa:	2550      	movs	r5, #80	@ 0x50
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	e72b      	b.n	8009508 <__gethex+0xf8>
 80096b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f3      	bne.n	800969e <__gethex+0x28e>
 80096b6:	e7e0      	b.n	800967a <__gethex+0x26a>
 80096b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1dd      	bne.n	800967a <__gethex+0x26a>
 80096be:	e7ee      	b.n	800969e <__gethex+0x28e>
 80096c0:	0800ad90 	.word	0x0800ad90
 80096c4:	0800ac23 	.word	0x0800ac23
 80096c8:	0800af3e 	.word	0x0800af3e
 80096cc:	1e6f      	subs	r7, r5, #1
 80096ce:	f1b9 0f00 	cmp.w	r9, #0
 80096d2:	d130      	bne.n	8009736 <__gethex+0x326>
 80096d4:	b127      	cbz	r7, 80096e0 <__gethex+0x2d0>
 80096d6:	4639      	mov	r1, r7
 80096d8:	4620      	mov	r0, r4
 80096da:	f7fe fb3c 	bl	8007d56 <__any_on>
 80096de:	4681      	mov	r9, r0
 80096e0:	2301      	movs	r3, #1
 80096e2:	4629      	mov	r1, r5
 80096e4:	1b76      	subs	r6, r6, r5
 80096e6:	2502      	movs	r5, #2
 80096e8:	117a      	asrs	r2, r7, #5
 80096ea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096ee:	f007 071f 	and.w	r7, r7, #31
 80096f2:	40bb      	lsls	r3, r7
 80096f4:	4213      	tst	r3, r2
 80096f6:	4620      	mov	r0, r4
 80096f8:	bf18      	it	ne
 80096fa:	f049 0902 	orrne.w	r9, r9, #2
 80096fe:	f7ff fe1f 	bl	8009340 <rshift>
 8009702:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009706:	f1b9 0f00 	cmp.w	r9, #0
 800970a:	d047      	beq.n	800979c <__gethex+0x38c>
 800970c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d015      	beq.n	8009740 <__gethex+0x330>
 8009714:	2b03      	cmp	r3, #3
 8009716:	d017      	beq.n	8009748 <__gethex+0x338>
 8009718:	2b01      	cmp	r3, #1
 800971a:	d109      	bne.n	8009730 <__gethex+0x320>
 800971c:	f019 0f02 	tst.w	r9, #2
 8009720:	d006      	beq.n	8009730 <__gethex+0x320>
 8009722:	f8da 3000 	ldr.w	r3, [sl]
 8009726:	ea49 0903 	orr.w	r9, r9, r3
 800972a:	f019 0f01 	tst.w	r9, #1
 800972e:	d10e      	bne.n	800974e <__gethex+0x33e>
 8009730:	f045 0510 	orr.w	r5, r5, #16
 8009734:	e032      	b.n	800979c <__gethex+0x38c>
 8009736:	f04f 0901 	mov.w	r9, #1
 800973a:	e7d1      	b.n	80096e0 <__gethex+0x2d0>
 800973c:	2501      	movs	r5, #1
 800973e:	e7e2      	b.n	8009706 <__gethex+0x2f6>
 8009740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009742:	f1c3 0301 	rsb	r3, r3, #1
 8009746:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0f0      	beq.n	8009730 <__gethex+0x320>
 800974e:	f04f 0c00 	mov.w	ip, #0
 8009752:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009756:	f104 0314 	add.w	r3, r4, #20
 800975a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800975e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009762:	4618      	mov	r0, r3
 8009764:	f853 2b04 	ldr.w	r2, [r3], #4
 8009768:	f1b2 3fff 	cmp.w	r2, #4294967295
 800976c:	d01b      	beq.n	80097a6 <__gethex+0x396>
 800976e:	3201      	adds	r2, #1
 8009770:	6002      	str	r2, [r0, #0]
 8009772:	2d02      	cmp	r5, #2
 8009774:	f104 0314 	add.w	r3, r4, #20
 8009778:	d13c      	bne.n	80097f4 <__gethex+0x3e4>
 800977a:	f8d8 2000 	ldr.w	r2, [r8]
 800977e:	3a01      	subs	r2, #1
 8009780:	42b2      	cmp	r2, r6
 8009782:	d109      	bne.n	8009798 <__gethex+0x388>
 8009784:	2201      	movs	r2, #1
 8009786:	1171      	asrs	r1, r6, #5
 8009788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800978c:	f006 061f 	and.w	r6, r6, #31
 8009790:	fa02 f606 	lsl.w	r6, r2, r6
 8009794:	421e      	tst	r6, r3
 8009796:	d13a      	bne.n	800980e <__gethex+0x3fe>
 8009798:	f045 0520 	orr.w	r5, r5, #32
 800979c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800979e:	601c      	str	r4, [r3, #0]
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	601f      	str	r7, [r3, #0]
 80097a4:	e6b0      	b.n	8009508 <__gethex+0xf8>
 80097a6:	4299      	cmp	r1, r3
 80097a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80097ac:	d8d9      	bhi.n	8009762 <__gethex+0x352>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	459b      	cmp	fp, r3
 80097b2:	db17      	blt.n	80097e4 <__gethex+0x3d4>
 80097b4:	6861      	ldr	r1, [r4, #4]
 80097b6:	9801      	ldr	r0, [sp, #4]
 80097b8:	3101      	adds	r1, #1
 80097ba:	f7fd fe47 	bl	800744c <_Balloc>
 80097be:	4681      	mov	r9, r0
 80097c0:	b918      	cbnz	r0, 80097ca <__gethex+0x3ba>
 80097c2:	4602      	mov	r2, r0
 80097c4:	2184      	movs	r1, #132	@ 0x84
 80097c6:	4b19      	ldr	r3, [pc, #100]	@ (800982c <__gethex+0x41c>)
 80097c8:	e6c5      	b.n	8009556 <__gethex+0x146>
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	f104 010c 	add.w	r1, r4, #12
 80097d0:	3202      	adds	r2, #2
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	300c      	adds	r0, #12
 80097d6:	f7ff fd6d 	bl	80092b4 <memcpy>
 80097da:	4621      	mov	r1, r4
 80097dc:	9801      	ldr	r0, [sp, #4]
 80097de:	f7fd fe75 	bl	80074cc <_Bfree>
 80097e2:	464c      	mov	r4, r9
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	6122      	str	r2, [r4, #16]
 80097ea:	2201      	movs	r2, #1
 80097ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097f0:	615a      	str	r2, [r3, #20]
 80097f2:	e7be      	b.n	8009772 <__gethex+0x362>
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	455a      	cmp	r2, fp
 80097f8:	dd0b      	ble.n	8009812 <__gethex+0x402>
 80097fa:	2101      	movs	r1, #1
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7ff fd9f 	bl	8009340 <rshift>
 8009802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009806:	3701      	adds	r7, #1
 8009808:	42bb      	cmp	r3, r7
 800980a:	f6ff aee0 	blt.w	80095ce <__gethex+0x1be>
 800980e:	2501      	movs	r5, #1
 8009810:	e7c2      	b.n	8009798 <__gethex+0x388>
 8009812:	f016 061f 	ands.w	r6, r6, #31
 8009816:	d0fa      	beq.n	800980e <__gethex+0x3fe>
 8009818:	4453      	add	r3, sl
 800981a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800981e:	f7fd ff07 	bl	8007630 <__hi0bits>
 8009822:	f1c6 0620 	rsb	r6, r6, #32
 8009826:	42b0      	cmp	r0, r6
 8009828:	dbe7      	blt.n	80097fa <__gethex+0x3ea>
 800982a:	e7f0      	b.n	800980e <__gethex+0x3fe>
 800982c:	0800ac23 	.word	0x0800ac23

08009830 <L_shift>:
 8009830:	f1c2 0208 	rsb	r2, r2, #8
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	f1c2 0620 	rsb	r6, r2, #32
 800983c:	6843      	ldr	r3, [r0, #4]
 800983e:	6804      	ldr	r4, [r0, #0]
 8009840:	fa03 f506 	lsl.w	r5, r3, r6
 8009844:	432c      	orrs	r4, r5
 8009846:	40d3      	lsrs	r3, r2
 8009848:	6004      	str	r4, [r0, #0]
 800984a:	f840 3f04 	str.w	r3, [r0, #4]!
 800984e:	4288      	cmp	r0, r1
 8009850:	d3f4      	bcc.n	800983c <L_shift+0xc>
 8009852:	bd70      	pop	{r4, r5, r6, pc}

08009854 <__match>:
 8009854:	b530      	push	{r4, r5, lr}
 8009856:	6803      	ldr	r3, [r0, #0]
 8009858:	3301      	adds	r3, #1
 800985a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800985e:	b914      	cbnz	r4, 8009866 <__match+0x12>
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	2001      	movs	r0, #1
 8009864:	bd30      	pop	{r4, r5, pc}
 8009866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800986e:	2d19      	cmp	r5, #25
 8009870:	bf98      	it	ls
 8009872:	3220      	addls	r2, #32
 8009874:	42a2      	cmp	r2, r4
 8009876:	d0f0      	beq.n	800985a <__match+0x6>
 8009878:	2000      	movs	r0, #0
 800987a:	e7f3      	b.n	8009864 <__match+0x10>

0800987c <__hexnan>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	2500      	movs	r5, #0
 8009882:	680b      	ldr	r3, [r1, #0]
 8009884:	4682      	mov	sl, r0
 8009886:	115e      	asrs	r6, r3, #5
 8009888:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800988c:	f013 031f 	ands.w	r3, r3, #31
 8009890:	bf18      	it	ne
 8009892:	3604      	addne	r6, #4
 8009894:	1f37      	subs	r7, r6, #4
 8009896:	4690      	mov	r8, r2
 8009898:	46b9      	mov	r9, r7
 800989a:	463c      	mov	r4, r7
 800989c:	46ab      	mov	fp, r5
 800989e:	b087      	sub	sp, #28
 80098a0:	6801      	ldr	r1, [r0, #0]
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80098a8:	9502      	str	r5, [sp, #8]
 80098aa:	784a      	ldrb	r2, [r1, #1]
 80098ac:	1c4b      	adds	r3, r1, #1
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	b342      	cbz	r2, 8009904 <__hexnan+0x88>
 80098b2:	4610      	mov	r0, r2
 80098b4:	9105      	str	r1, [sp, #20]
 80098b6:	9204      	str	r2, [sp, #16]
 80098b8:	f7ff fd95 	bl	80093e6 <__hexdig_fun>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d151      	bne.n	8009964 <__hexnan+0xe8>
 80098c0:	9a04      	ldr	r2, [sp, #16]
 80098c2:	9905      	ldr	r1, [sp, #20]
 80098c4:	2a20      	cmp	r2, #32
 80098c6:	d818      	bhi.n	80098fa <__hexnan+0x7e>
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	459b      	cmp	fp, r3
 80098cc:	dd13      	ble.n	80098f6 <__hexnan+0x7a>
 80098ce:	454c      	cmp	r4, r9
 80098d0:	d206      	bcs.n	80098e0 <__hexnan+0x64>
 80098d2:	2d07      	cmp	r5, #7
 80098d4:	dc04      	bgt.n	80098e0 <__hexnan+0x64>
 80098d6:	462a      	mov	r2, r5
 80098d8:	4649      	mov	r1, r9
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff ffa8 	bl	8009830 <L_shift>
 80098e0:	4544      	cmp	r4, r8
 80098e2:	d952      	bls.n	800998a <__hexnan+0x10e>
 80098e4:	2300      	movs	r3, #0
 80098e6:	f1a4 0904 	sub.w	r9, r4, #4
 80098ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80098ee:	461d      	mov	r5, r3
 80098f0:	464c      	mov	r4, r9
 80098f2:	f8cd b008 	str.w	fp, [sp, #8]
 80098f6:	9903      	ldr	r1, [sp, #12]
 80098f8:	e7d7      	b.n	80098aa <__hexnan+0x2e>
 80098fa:	2a29      	cmp	r2, #41	@ 0x29
 80098fc:	d157      	bne.n	80099ae <__hexnan+0x132>
 80098fe:	3102      	adds	r1, #2
 8009900:	f8ca 1000 	str.w	r1, [sl]
 8009904:	f1bb 0f00 	cmp.w	fp, #0
 8009908:	d051      	beq.n	80099ae <__hexnan+0x132>
 800990a:	454c      	cmp	r4, r9
 800990c:	d206      	bcs.n	800991c <__hexnan+0xa0>
 800990e:	2d07      	cmp	r5, #7
 8009910:	dc04      	bgt.n	800991c <__hexnan+0xa0>
 8009912:	462a      	mov	r2, r5
 8009914:	4649      	mov	r1, r9
 8009916:	4620      	mov	r0, r4
 8009918:	f7ff ff8a 	bl	8009830 <L_shift>
 800991c:	4544      	cmp	r4, r8
 800991e:	d936      	bls.n	800998e <__hexnan+0x112>
 8009920:	4623      	mov	r3, r4
 8009922:	f1a8 0204 	sub.w	r2, r8, #4
 8009926:	f853 1b04 	ldr.w	r1, [r3], #4
 800992a:	429f      	cmp	r7, r3
 800992c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009930:	d2f9      	bcs.n	8009926 <__hexnan+0xaa>
 8009932:	1b3b      	subs	r3, r7, r4
 8009934:	f023 0303 	bic.w	r3, r3, #3
 8009938:	3304      	adds	r3, #4
 800993a:	3401      	adds	r4, #1
 800993c:	3e03      	subs	r6, #3
 800993e:	42b4      	cmp	r4, r6
 8009940:	bf88      	it	hi
 8009942:	2304      	movhi	r3, #4
 8009944:	2200      	movs	r2, #0
 8009946:	4443      	add	r3, r8
 8009948:	f843 2b04 	str.w	r2, [r3], #4
 800994c:	429f      	cmp	r7, r3
 800994e:	d2fb      	bcs.n	8009948 <__hexnan+0xcc>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	b91b      	cbnz	r3, 800995c <__hexnan+0xe0>
 8009954:	4547      	cmp	r7, r8
 8009956:	d128      	bne.n	80099aa <__hexnan+0x12e>
 8009958:	2301      	movs	r3, #1
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	2005      	movs	r0, #5
 800995e:	b007      	add	sp, #28
 8009960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009964:	3501      	adds	r5, #1
 8009966:	2d08      	cmp	r5, #8
 8009968:	f10b 0b01 	add.w	fp, fp, #1
 800996c:	dd06      	ble.n	800997c <__hexnan+0x100>
 800996e:	4544      	cmp	r4, r8
 8009970:	d9c1      	bls.n	80098f6 <__hexnan+0x7a>
 8009972:	2300      	movs	r3, #0
 8009974:	2501      	movs	r5, #1
 8009976:	f844 3c04 	str.w	r3, [r4, #-4]
 800997a:	3c04      	subs	r4, #4
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	f000 000f 	and.w	r0, r0, #15
 8009982:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	e7b5      	b.n	80098f6 <__hexnan+0x7a>
 800998a:	2508      	movs	r5, #8
 800998c:	e7b3      	b.n	80098f6 <__hexnan+0x7a>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0dd      	beq.n	8009950 <__hexnan+0xd4>
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	f1c3 0320 	rsb	r3, r3, #32
 800999c:	40da      	lsrs	r2, r3
 800999e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80099a2:	4013      	ands	r3, r2
 80099a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80099a8:	e7d2      	b.n	8009950 <__hexnan+0xd4>
 80099aa:	3f04      	subs	r7, #4
 80099ac:	e7d0      	b.n	8009950 <__hexnan+0xd4>
 80099ae:	2004      	movs	r0, #4
 80099b0:	e7d5      	b.n	800995e <__hexnan+0xe2>

080099b2 <__ascii_mbtowc>:
 80099b2:	b082      	sub	sp, #8
 80099b4:	b901      	cbnz	r1, 80099b8 <__ascii_mbtowc+0x6>
 80099b6:	a901      	add	r1, sp, #4
 80099b8:	b142      	cbz	r2, 80099cc <__ascii_mbtowc+0x1a>
 80099ba:	b14b      	cbz	r3, 80099d0 <__ascii_mbtowc+0x1e>
 80099bc:	7813      	ldrb	r3, [r2, #0]
 80099be:	600b      	str	r3, [r1, #0]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	1e10      	subs	r0, r2, #0
 80099c4:	bf18      	it	ne
 80099c6:	2001      	movne	r0, #1
 80099c8:	b002      	add	sp, #8
 80099ca:	4770      	bx	lr
 80099cc:	4610      	mov	r0, r2
 80099ce:	e7fb      	b.n	80099c8 <__ascii_mbtowc+0x16>
 80099d0:	f06f 0001 	mvn.w	r0, #1
 80099d4:	e7f8      	b.n	80099c8 <__ascii_mbtowc+0x16>

080099d6 <_realloc_r>:
 80099d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099da:	4680      	mov	r8, r0
 80099dc:	4615      	mov	r5, r2
 80099de:	460c      	mov	r4, r1
 80099e0:	b921      	cbnz	r1, 80099ec <_realloc_r+0x16>
 80099e2:	4611      	mov	r1, r2
 80099e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	f7fd bca4 	b.w	8007334 <_malloc_r>
 80099ec:	b92a      	cbnz	r2, 80099fa <_realloc_r+0x24>
 80099ee:	f7fd fc2f 	bl	8007250 <_free_r>
 80099f2:	2400      	movs	r4, #0
 80099f4:	4620      	mov	r0, r4
 80099f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fa:	f000 f8c4 	bl	8009b86 <_malloc_usable_size_r>
 80099fe:	4285      	cmp	r5, r0
 8009a00:	4606      	mov	r6, r0
 8009a02:	d802      	bhi.n	8009a0a <_realloc_r+0x34>
 8009a04:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a08:	d8f4      	bhi.n	80099f4 <_realloc_r+0x1e>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	f7fd fc91 	bl	8007334 <_malloc_r>
 8009a12:	4607      	mov	r7, r0
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0ec      	beq.n	80099f2 <_realloc_r+0x1c>
 8009a18:	42b5      	cmp	r5, r6
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	bf28      	it	cs
 8009a20:	4632      	movcs	r2, r6
 8009a22:	f7ff fc47 	bl	80092b4 <memcpy>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4640      	mov	r0, r8
 8009a2a:	f7fd fc11 	bl	8007250 <_free_r>
 8009a2e:	463c      	mov	r4, r7
 8009a30:	e7e0      	b.n	80099f4 <_realloc_r+0x1e>

08009a32 <__ascii_wctomb>:
 8009a32:	4603      	mov	r3, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	b141      	cbz	r1, 8009a4a <__ascii_wctomb+0x18>
 8009a38:	2aff      	cmp	r2, #255	@ 0xff
 8009a3a:	d904      	bls.n	8009a46 <__ascii_wctomb+0x14>
 8009a3c:	228a      	movs	r2, #138	@ 0x8a
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	4770      	bx	lr
 8009a46:	2001      	movs	r0, #1
 8009a48:	700a      	strb	r2, [r1, #0]
 8009a4a:	4770      	bx	lr

08009a4c <fiprintf>:
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	b503      	push	{r0, r1, lr}
 8009a50:	4601      	mov	r1, r0
 8009a52:	ab03      	add	r3, sp, #12
 8009a54:	4805      	ldr	r0, [pc, #20]	@ (8009a6c <fiprintf+0x20>)
 8009a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	f7ff f999 	bl	8008d94 <_vfiprintf_r>
 8009a62:	b002      	add	sp, #8
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b003      	add	sp, #12
 8009a6a:	4770      	bx	lr
 8009a6c:	20000020 	.word	0x20000020

08009a70 <__swhatbuf_r>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	4615      	mov	r5, r2
 8009a7a:	2900      	cmp	r1, #0
 8009a7c:	461e      	mov	r6, r3
 8009a7e:	b096      	sub	sp, #88	@ 0x58
 8009a80:	da0c      	bge.n	8009a9c <__swhatbuf_r+0x2c>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	2100      	movs	r1, #0
 8009a86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a8a:	bf14      	ite	ne
 8009a8c:	2340      	movne	r3, #64	@ 0x40
 8009a8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a92:	2000      	movs	r0, #0
 8009a94:	6031      	str	r1, [r6, #0]
 8009a96:	602b      	str	r3, [r5, #0]
 8009a98:	b016      	add	sp, #88	@ 0x58
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	466a      	mov	r2, sp
 8009a9e:	f000 f849 	bl	8009b34 <_fstat_r>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	dbed      	blt.n	8009a82 <__swhatbuf_r+0x12>
 8009aa6:	9901      	ldr	r1, [sp, #4]
 8009aa8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009aac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ab0:	4259      	negs	r1, r3
 8009ab2:	4159      	adcs	r1, r3
 8009ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ab8:	e7eb      	b.n	8009a92 <__swhatbuf_r+0x22>

08009aba <__smakebuf_r>:
 8009aba:	898b      	ldrh	r3, [r1, #12]
 8009abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009abe:	079d      	lsls	r5, r3, #30
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	d507      	bpl.n	8009ad6 <__smakebuf_r+0x1c>
 8009ac6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	6123      	str	r3, [r4, #16]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	6163      	str	r3, [r4, #20]
 8009ad2:	b003      	add	sp, #12
 8009ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad6:	466a      	mov	r2, sp
 8009ad8:	ab01      	add	r3, sp, #4
 8009ada:	f7ff ffc9 	bl	8009a70 <__swhatbuf_r>
 8009ade:	9f00      	ldr	r7, [sp, #0]
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7fd fc25 	bl	8007334 <_malloc_r>
 8009aea:	b948      	cbnz	r0, 8009b00 <__smakebuf_r+0x46>
 8009aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af0:	059a      	lsls	r2, r3, #22
 8009af2:	d4ee      	bmi.n	8009ad2 <__smakebuf_r+0x18>
 8009af4:	f023 0303 	bic.w	r3, r3, #3
 8009af8:	f043 0302 	orr.w	r3, r3, #2
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	e7e2      	b.n	8009ac6 <__smakebuf_r+0xc>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	6020      	str	r0, [r4, #0]
 8009b10:	b15b      	cbz	r3, 8009b2a <__smakebuf_r+0x70>
 8009b12:	4630      	mov	r0, r6
 8009b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b18:	f000 f81e 	bl	8009b58 <_isatty_r>
 8009b1c:	b128      	cbz	r0, 8009b2a <__smakebuf_r+0x70>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f023 0303 	bic.w	r3, r3, #3
 8009b24:	f043 0301 	orr.w	r3, r3, #1
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	431d      	orrs	r5, r3
 8009b2e:	81a5      	strh	r5, [r4, #12]
 8009b30:	e7cf      	b.n	8009ad2 <__smakebuf_r+0x18>
	...

08009b34 <_fstat_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	2300      	movs	r3, #0
 8009b38:	4d06      	ldr	r5, [pc, #24]	@ (8009b54 <_fstat_r+0x20>)
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f7f8 fd23 	bl	800258c <_fstat>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d102      	bne.n	8009b50 <_fstat_r+0x1c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b103      	cbz	r3, 8009b50 <_fstat_r+0x1c>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	200008d0 	.word	0x200008d0

08009b58 <_isatty_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4d05      	ldr	r5, [pc, #20]	@ (8009b74 <_isatty_r+0x1c>)
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f8 fd21 	bl	80025aa <_isatty>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_isatty_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_isatty_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	200008d0 	.word	0x200008d0

08009b78 <abort>:
 8009b78:	2006      	movs	r0, #6
 8009b7a:	b508      	push	{r3, lr}
 8009b7c:	f000 f834 	bl	8009be8 <raise>
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7f8 fcb4 	bl	80024ee <_exit>

08009b86 <_malloc_usable_size_r>:
 8009b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8a:	1f18      	subs	r0, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbc      	itt	lt
 8009b90:	580b      	ldrlt	r3, [r1, r0]
 8009b92:	18c0      	addlt	r0, r0, r3
 8009b94:	4770      	bx	lr

08009b96 <_raise_r>:
 8009b96:	291f      	cmp	r1, #31
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	d904      	bls.n	8009baa <_raise_r+0x14>
 8009ba0:	2316      	movs	r3, #22
 8009ba2:	6003      	str	r3, [r0, #0]
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bac:	b112      	cbz	r2, 8009bb4 <_raise_r+0x1e>
 8009bae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bb2:	b94b      	cbnz	r3, 8009bc8 <_raise_r+0x32>
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f831 	bl	8009c1c <_getpid_r>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bc4:	f000 b818 	b.w	8009bf8 <_kill_r>
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d00a      	beq.n	8009be2 <_raise_r+0x4c>
 8009bcc:	1c59      	adds	r1, r3, #1
 8009bce:	d103      	bne.n	8009bd8 <_raise_r+0x42>
 8009bd0:	2316      	movs	r3, #22
 8009bd2:	6003      	str	r3, [r0, #0]
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	e7e7      	b.n	8009ba8 <_raise_r+0x12>
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009be0:	4798      	blx	r3
 8009be2:	2000      	movs	r0, #0
 8009be4:	e7e0      	b.n	8009ba8 <_raise_r+0x12>
	...

08009be8 <raise>:
 8009be8:	4b02      	ldr	r3, [pc, #8]	@ (8009bf4 <raise+0xc>)
 8009bea:	4601      	mov	r1, r0
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	f7ff bfd2 	b.w	8009b96 <_raise_r>
 8009bf2:	bf00      	nop
 8009bf4:	20000020 	.word	0x20000020

08009bf8 <_kill_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_kill_r+0x20>)
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	f7f8 fc62 	bl	80024ce <_kill>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d102      	bne.n	8009c14 <_kill_r+0x1c>
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	b103      	cbz	r3, 8009c14 <_kill_r+0x1c>
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	200008d0 	.word	0x200008d0

08009c1c <_getpid_r>:
 8009c1c:	f7f8 bc50 	b.w	80024c0 <_getpid>

08009c20 <atan2>:
 8009c20:	f000 b8fa 	b.w	8009e18 <__ieee754_atan2>

08009c24 <sqrt>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	f000 f81f 	bl	8009c6c <__ieee754_sqrt>
 8009c2e:	4632      	mov	r2, r6
 8009c30:	4604      	mov	r4, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	463b      	mov	r3, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 fee7 	bl	8000a0c <__aeabi_dcmpun>
 8009c3e:	b990      	cbnz	r0, 8009c66 <sqrt+0x42>
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 feb8 	bl	80009bc <__aeabi_dcmplt>
 8009c4c:	b158      	cbz	r0, 8009c66 <sqrt+0x42>
 8009c4e:	f7fc fc6d 	bl	800652c <__errno>
 8009c52:	2321      	movs	r3, #33	@ 0x21
 8009c54:	2200      	movs	r2, #0
 8009c56:	6003      	str	r3, [r0, #0]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f7f6 fd65 	bl	800072c <__aeabi_ddiv>
 8009c62:	4604      	mov	r4, r0
 8009c64:	460d      	mov	r5, r1
 8009c66:	4620      	mov	r0, r4
 8009c68:	4629      	mov	r1, r5
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c6c <__ieee754_sqrt>:
 8009c6c:	4a67      	ldr	r2, [pc, #412]	@ (8009e0c <__ieee754_sqrt+0x1a0>)
 8009c6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c72:	438a      	bics	r2, r1
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	d10e      	bne.n	8009c9c <__ieee754_sqrt+0x30>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	f7f6 fc2a 	bl	80004d8 <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4630      	mov	r0, r6
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	f7f6 fa6e 	bl	800016c <__adddf3>
 8009c90:	4606      	mov	r6, r0
 8009c92:	460f      	mov	r7, r1
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	dc0c      	bgt.n	8009cba <__ieee754_sqrt+0x4e>
 8009ca0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009ca4:	4302      	orrs	r2, r0
 8009ca6:	d0f5      	beq.n	8009c94 <__ieee754_sqrt+0x28>
 8009ca8:	b189      	cbz	r1, 8009cce <__ieee754_sqrt+0x62>
 8009caa:	4602      	mov	r2, r0
 8009cac:	f7f6 fa5c 	bl	8000168 <__aeabi_dsub>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	f7f6 fd3a 	bl	800072c <__aeabi_ddiv>
 8009cb8:	e7ea      	b.n	8009c90 <__ieee754_sqrt+0x24>
 8009cba:	150a      	asrs	r2, r1, #20
 8009cbc:	d115      	bne.n	8009cea <__ieee754_sqrt+0x7e>
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	e009      	b.n	8009cd6 <__ieee754_sqrt+0x6a>
 8009cc2:	0ae3      	lsrs	r3, r4, #11
 8009cc4:	3a15      	subs	r2, #21
 8009cc6:	0564      	lsls	r4, r4, #21
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0fa      	beq.n	8009cc2 <__ieee754_sqrt+0x56>
 8009ccc:	e7f7      	b.n	8009cbe <__ieee754_sqrt+0x52>
 8009cce:	460a      	mov	r2, r1
 8009cd0:	e7fa      	b.n	8009cc8 <__ieee754_sqrt+0x5c>
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	3101      	adds	r1, #1
 8009cd6:	02d8      	lsls	r0, r3, #11
 8009cd8:	d5fb      	bpl.n	8009cd2 <__ieee754_sqrt+0x66>
 8009cda:	1e48      	subs	r0, r1, #1
 8009cdc:	1a12      	subs	r2, r2, r0
 8009cde:	f1c1 0020 	rsb	r0, r1, #32
 8009ce2:	fa24 f000 	lsr.w	r0, r4, r0
 8009ce6:	4303      	orrs	r3, r0
 8009ce8:	408c      	lsls	r4, r1
 8009cea:	2600      	movs	r6, #0
 8009cec:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009cf0:	2116      	movs	r1, #22
 8009cf2:	07d2      	lsls	r2, r2, #31
 8009cf4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009cf8:	4632      	mov	r2, r6
 8009cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d02:	bf5c      	itt	pl
 8009d04:	005b      	lslpl	r3, r3, #1
 8009d06:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009d0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d0e:	bf58      	it	pl
 8009d10:	0064      	lslpl	r4, r4, #1
 8009d12:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009d16:	107f      	asrs	r7, r7, #1
 8009d18:	0064      	lsls	r4, r4, #1
 8009d1a:	1815      	adds	r5, r2, r0
 8009d1c:	429d      	cmp	r5, r3
 8009d1e:	bfde      	ittt	le
 8009d20:	182a      	addle	r2, r5, r0
 8009d22:	1b5b      	suble	r3, r3, r5
 8009d24:	1836      	addle	r6, r6, r0
 8009d26:	0fe5      	lsrs	r5, r4, #31
 8009d28:	3901      	subs	r1, #1
 8009d2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009d2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009d32:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009d36:	d1f0      	bne.n	8009d1a <__ieee754_sqrt+0xae>
 8009d38:	460d      	mov	r5, r1
 8009d3a:	f04f 0a20 	mov.w	sl, #32
 8009d3e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009d42:	429a      	cmp	r2, r3
 8009d44:	eb01 0c00 	add.w	ip, r1, r0
 8009d48:	db02      	blt.n	8009d50 <__ieee754_sqrt+0xe4>
 8009d4a:	d113      	bne.n	8009d74 <__ieee754_sqrt+0x108>
 8009d4c:	45a4      	cmp	ip, r4
 8009d4e:	d811      	bhi.n	8009d74 <__ieee754_sqrt+0x108>
 8009d50:	f1bc 0f00 	cmp.w	ip, #0
 8009d54:	eb0c 0100 	add.w	r1, ip, r0
 8009d58:	da42      	bge.n	8009de0 <__ieee754_sqrt+0x174>
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	db40      	blt.n	8009de0 <__ieee754_sqrt+0x174>
 8009d5e:	f102 0e01 	add.w	lr, r2, #1
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	4672      	mov	r2, lr
 8009d66:	45a4      	cmp	ip, r4
 8009d68:	bf88      	it	hi
 8009d6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009d6e:	eba4 040c 	sub.w	r4, r4, ip
 8009d72:	4405      	add	r5, r0
 8009d74:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009d78:	f1ba 0a01 	subs.w	sl, sl, #1
 8009d7c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009d80:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009d84:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009d88:	d1db      	bne.n	8009d42 <__ieee754_sqrt+0xd6>
 8009d8a:	431c      	orrs	r4, r3
 8009d8c:	d01a      	beq.n	8009dc4 <__ieee754_sqrt+0x158>
 8009d8e:	4c20      	ldr	r4, [pc, #128]	@ (8009e10 <__ieee754_sqrt+0x1a4>)
 8009d90:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009e14 <__ieee754_sqrt+0x1a8>
 8009d94:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009d98:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d9c:	f7f6 f9e4 	bl	8000168 <__aeabi_dsub>
 8009da0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 fe10 	bl	80009d0 <__aeabi_dcmple>
 8009db0:	b140      	cbz	r0, 8009dc4 <__ieee754_sqrt+0x158>
 8009db2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009db6:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009dbe:	d111      	bne.n	8009de4 <__ieee754_sqrt+0x178>
 8009dc0:	4655      	mov	r5, sl
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	1072      	asrs	r2, r6, #1
 8009dc6:	086b      	lsrs	r3, r5, #1
 8009dc8:	07f1      	lsls	r1, r6, #31
 8009dca:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009dce:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009dd2:	bf48      	it	mi
 8009dd4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009dd8:	4618      	mov	r0, r3
 8009dda:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009dde:	e757      	b.n	8009c90 <__ieee754_sqrt+0x24>
 8009de0:	4696      	mov	lr, r2
 8009de2:	e7be      	b.n	8009d62 <__ieee754_sqrt+0xf6>
 8009de4:	f7f6 f9c2 	bl	800016c <__adddf3>
 8009de8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4640      	mov	r0, r8
 8009df2:	4649      	mov	r1, r9
 8009df4:	f7f6 fde2 	bl	80009bc <__aeabi_dcmplt>
 8009df8:	b120      	cbz	r0, 8009e04 <__ieee754_sqrt+0x198>
 8009dfa:	1ca8      	adds	r0, r5, #2
 8009dfc:	bf08      	it	eq
 8009dfe:	3601      	addeq	r6, #1
 8009e00:	3502      	adds	r5, #2
 8009e02:	e7df      	b.n	8009dc4 <__ieee754_sqrt+0x158>
 8009e04:	1c6b      	adds	r3, r5, #1
 8009e06:	f023 0501 	bic.w	r5, r3, #1
 8009e0a:	e7db      	b.n	8009dc4 <__ieee754_sqrt+0x158>
 8009e0c:	7ff00000 	.word	0x7ff00000
 8009e10:	200001e8 	.word	0x200001e8
 8009e14:	200001e0 	.word	0x200001e0

08009e18 <__ieee754_atan2>:
 8009e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	4617      	mov	r7, r2
 8009e1e:	4690      	mov	r8, r2
 8009e20:	4699      	mov	r9, r3
 8009e22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e26:	427b      	negs	r3, r7
 8009e28:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009fb0 <__ieee754_atan2+0x198>
 8009e2c:	433b      	orrs	r3, r7
 8009e2e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009e32:	4553      	cmp	r3, sl
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	d809      	bhi.n	8009e4e <__ieee754_atan2+0x36>
 8009e3a:	4246      	negs	r6, r0
 8009e3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009e40:	4306      	orrs	r6, r0
 8009e42:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009e46:	4556      	cmp	r6, sl
 8009e48:	468e      	mov	lr, r1
 8009e4a:	4683      	mov	fp, r0
 8009e4c:	d908      	bls.n	8009e60 <__ieee754_atan2+0x48>
 8009e4e:	4642      	mov	r2, r8
 8009e50:	464b      	mov	r3, r9
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 f989 	bl	800016c <__adddf3>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	e016      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009e60:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009e64:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009e68:	433e      	orrs	r6, r7
 8009e6a:	d103      	bne.n	8009e74 <__ieee754_atan2+0x5c>
 8009e6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	f000 b8a6 	b.w	8009fc0 <atan>
 8009e74:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009e78:	f006 0602 	and.w	r6, r6, #2
 8009e7c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009e80:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009e84:	d107      	bne.n	8009e96 <__ieee754_atan2+0x7e>
 8009e86:	2e02      	cmp	r6, #2
 8009e88:	d064      	beq.n	8009f54 <__ieee754_atan2+0x13c>
 8009e8a:	2e03      	cmp	r6, #3
 8009e8c:	d066      	beq.n	8009f5c <__ieee754_atan2+0x144>
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e96:	4317      	orrs	r7, r2
 8009e98:	d106      	bne.n	8009ea8 <__ieee754_atan2+0x90>
 8009e9a:	f1be 0f00 	cmp.w	lr, #0
 8009e9e:	da68      	bge.n	8009f72 <__ieee754_atan2+0x15a>
 8009ea0:	a537      	add	r5, pc, #220	@ (adr r5, 8009f80 <__ieee754_atan2+0x168>)
 8009ea2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ea6:	e7f2      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009ea8:	4552      	cmp	r2, sl
 8009eaa:	d10f      	bne.n	8009ecc <__ieee754_atan2+0xb4>
 8009eac:	4293      	cmp	r3, r2
 8009eae:	f106 36ff 	add.w	r6, r6, #4294967295
 8009eb2:	d107      	bne.n	8009ec4 <__ieee754_atan2+0xac>
 8009eb4:	2e02      	cmp	r6, #2
 8009eb6:	d855      	bhi.n	8009f64 <__ieee754_atan2+0x14c>
 8009eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fb4 <__ieee754_atan2+0x19c>)
 8009eba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ebe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ec2:	e7e4      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009ec4:	2e02      	cmp	r6, #2
 8009ec6:	d851      	bhi.n	8009f6c <__ieee754_atan2+0x154>
 8009ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8009fb8 <__ieee754_atan2+0x1a0>)
 8009eca:	e7f6      	b.n	8009eba <__ieee754_atan2+0xa2>
 8009ecc:	4553      	cmp	r3, sl
 8009ece:	d0e4      	beq.n	8009e9a <__ieee754_atan2+0x82>
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009ed6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eda:	da21      	bge.n	8009f20 <__ieee754_atan2+0x108>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	da01      	bge.n	8009ee6 <__ieee754_atan2+0xce>
 8009ee2:	323c      	adds	r2, #60	@ 0x3c
 8009ee4:	db20      	blt.n	8009f28 <__ieee754_atan2+0x110>
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	464b      	mov	r3, r9
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 fc1d 	bl	800072c <__aeabi_ddiv>
 8009ef2:	f000 f9f5 	bl	800a2e0 <fabs>
 8009ef6:	f000 f863 	bl	8009fc0 <atan>
 8009efa:	4604      	mov	r4, r0
 8009efc:	460d      	mov	r5, r1
 8009efe:	2e01      	cmp	r6, #1
 8009f00:	d015      	beq.n	8009f2e <__ieee754_atan2+0x116>
 8009f02:	2e02      	cmp	r6, #2
 8009f04:	d017      	beq.n	8009f36 <__ieee754_atan2+0x11e>
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	d0c1      	beq.n	8009e8e <__ieee754_atan2+0x76>
 8009f0a:	a31f      	add	r3, pc, #124	@ (adr r3, 8009f88 <__ieee754_atan2+0x170>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	4620      	mov	r0, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7f6 f928 	bl	8000168 <__aeabi_dsub>
 8009f18:	a31d      	add	r3, pc, #116	@ (adr r3, 8009f90 <__ieee754_atan2+0x178>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	e016      	b.n	8009f4e <__ieee754_atan2+0x136>
 8009f20:	a51d      	add	r5, pc, #116	@ (adr r5, 8009f98 <__ieee754_atan2+0x180>)
 8009f22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f26:	e7ea      	b.n	8009efe <__ieee754_atan2+0xe6>
 8009f28:	2400      	movs	r4, #0
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	e7e7      	b.n	8009efe <__ieee754_atan2+0xe6>
 8009f2e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009f32:	461d      	mov	r5, r3
 8009f34:	e7ab      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f36:	a314      	add	r3, pc, #80	@ (adr r3, 8009f88 <__ieee754_atan2+0x170>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 f912 	bl	8000168 <__aeabi_dsub>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	a111      	add	r1, pc, #68	@ (adr r1, 8009f90 <__ieee754_atan2+0x178>)
 8009f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f4e:	f7f6 f90b 	bl	8000168 <__aeabi_dsub>
 8009f52:	e782      	b.n	8009e5a <__ieee754_atan2+0x42>
 8009f54:	a50e      	add	r5, pc, #56	@ (adr r5, 8009f90 <__ieee754_atan2+0x178>)
 8009f56:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f5a:	e798      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f5c:	a510      	add	r5, pc, #64	@ (adr r5, 8009fa0 <__ieee754_atan2+0x188>)
 8009f5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f62:	e794      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f64:	a510      	add	r5, pc, #64	@ (adr r5, 8009fa8 <__ieee754_atan2+0x190>)
 8009f66:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f6a:	e790      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f6c:	2400      	movs	r4, #0
 8009f6e:	2500      	movs	r5, #0
 8009f70:	e78d      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f72:	a509      	add	r5, pc, #36	@ (adr r5, 8009f98 <__ieee754_atan2+0x180>)
 8009f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f78:	e789      	b.n	8009e8e <__ieee754_atan2+0x76>
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w
 8009f80:	54442d18 	.word	0x54442d18
 8009f84:	bff921fb 	.word	0xbff921fb
 8009f88:	33145c07 	.word	0x33145c07
 8009f8c:	3ca1a626 	.word	0x3ca1a626
 8009f90:	54442d18 	.word	0x54442d18
 8009f94:	400921fb 	.word	0x400921fb
 8009f98:	54442d18 	.word	0x54442d18
 8009f9c:	3ff921fb 	.word	0x3ff921fb
 8009fa0:	54442d18 	.word	0x54442d18
 8009fa4:	c00921fb 	.word	0xc00921fb
 8009fa8:	54442d18 	.word	0x54442d18
 8009fac:	3fe921fb 	.word	0x3fe921fb
 8009fb0:	7ff00000 	.word	0x7ff00000
 8009fb4:	0800afb8 	.word	0x0800afb8
 8009fb8:	0800afa0 	.word	0x0800afa0
 8009fbc:	00000000 	.word	0x00000000

08009fc0 <atan>:
 8009fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4bbc      	ldr	r3, [pc, #752]	@ (800a2b8 <atan+0x2f8>)
 8009fc6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009fca:	429e      	cmp	r6, r3
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	d918      	bls.n	800a006 <atan+0x46>
 8009fd4:	4bb9      	ldr	r3, [pc, #740]	@ (800a2bc <atan+0x2fc>)
 8009fd6:	429e      	cmp	r6, r3
 8009fd8:	d801      	bhi.n	8009fde <atan+0x1e>
 8009fda:	d109      	bne.n	8009ff0 <atan+0x30>
 8009fdc:	b140      	cbz	r0, 8009ff0 <atan+0x30>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 f8c1 	bl	800016c <__adddf3>
 8009fea:	4604      	mov	r4, r0
 8009fec:	460d      	mov	r5, r1
 8009fee:	e006      	b.n	8009ffe <atan+0x3e>
 8009ff0:	f1bb 0f00 	cmp.w	fp, #0
 8009ff4:	f340 8123 	ble.w	800a23e <atan+0x27e>
 8009ff8:	a593      	add	r5, pc, #588	@ (adr r5, 800a248 <atan+0x288>)
 8009ffa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	4bae      	ldr	r3, [pc, #696]	@ (800a2c0 <atan+0x300>)
 800a008:	429e      	cmp	r6, r3
 800a00a:	d811      	bhi.n	800a030 <atan+0x70>
 800a00c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a010:	429e      	cmp	r6, r3
 800a012:	d80a      	bhi.n	800a02a <atan+0x6a>
 800a014:	a38e      	add	r3, pc, #568	@ (adr r3, 800a250 <atan+0x290>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f7f6 f8a7 	bl	800016c <__adddf3>
 800a01e:	2200      	movs	r2, #0
 800a020:	4ba8      	ldr	r3, [pc, #672]	@ (800a2c4 <atan+0x304>)
 800a022:	f7f6 fce9 	bl	80009f8 <__aeabi_dcmpgt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d1e9      	bne.n	8009ffe <atan+0x3e>
 800a02a:	f04f 3aff 	mov.w	sl, #4294967295
 800a02e:	e027      	b.n	800a080 <atan+0xc0>
 800a030:	f000 f956 	bl	800a2e0 <fabs>
 800a034:	4ba4      	ldr	r3, [pc, #656]	@ (800a2c8 <atan+0x308>)
 800a036:	4604      	mov	r4, r0
 800a038:	429e      	cmp	r6, r3
 800a03a:	460d      	mov	r5, r1
 800a03c:	f200 80b8 	bhi.w	800a1b0 <atan+0x1f0>
 800a040:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a044:	429e      	cmp	r6, r3
 800a046:	f200 809c 	bhi.w	800a182 <atan+0x1c2>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	f7f6 f88d 	bl	800016c <__adddf3>
 800a052:	2200      	movs	r2, #0
 800a054:	4b9b      	ldr	r3, [pc, #620]	@ (800a2c4 <atan+0x304>)
 800a056:	f7f6 f887 	bl	8000168 <__aeabi_dsub>
 800a05a:	2200      	movs	r2, #0
 800a05c:	4606      	mov	r6, r0
 800a05e:	460f      	mov	r7, r1
 800a060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a064:	4620      	mov	r0, r4
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 f880 	bl	800016c <__adddf3>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fb5a 	bl	800072c <__aeabi_ddiv>
 800a078:	f04f 0a00 	mov.w	sl, #0
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	4622      	mov	r2, r4
 800a082:	462b      	mov	r3, r5
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 fa26 	bl	80004d8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4680      	mov	r8, r0
 800a092:	4689      	mov	r9, r1
 800a094:	f7f6 fa20 	bl	80004d8 <__aeabi_dmul>
 800a098:	a36f      	add	r3, pc, #444	@ (adr r3, 800a258 <atan+0x298>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f7f6 fa19 	bl	80004d8 <__aeabi_dmul>
 800a0a6:	a36e      	add	r3, pc, #440	@ (adr r3, 800a260 <atan+0x2a0>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 f85e 	bl	800016c <__adddf3>
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	f7f6 fa10 	bl	80004d8 <__aeabi_dmul>
 800a0b8:	a36b      	add	r3, pc, #428	@ (adr r3, 800a268 <atan+0x2a8>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f855 	bl	800016c <__adddf3>
 800a0c2:	4632      	mov	r2, r6
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	f7f6 fa07 	bl	80004d8 <__aeabi_dmul>
 800a0ca:	a369      	add	r3, pc, #420	@ (adr r3, 800a270 <atan+0x2b0>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f84c 	bl	800016c <__adddf3>
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	f7f6 f9fe 	bl	80004d8 <__aeabi_dmul>
 800a0dc:	a366      	add	r3, pc, #408	@ (adr r3, 800a278 <atan+0x2b8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f843 	bl	800016c <__adddf3>
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	463b      	mov	r3, r7
 800a0ea:	f7f6 f9f5 	bl	80004d8 <__aeabi_dmul>
 800a0ee:	a364      	add	r3, pc, #400	@ (adr r3, 800a280 <atan+0x2c0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f83a 	bl	800016c <__adddf3>
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	f7f6 f9ec 	bl	80004d8 <__aeabi_dmul>
 800a100:	a361      	add	r3, pc, #388	@ (adr r3, 800a288 <atan+0x2c8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	4680      	mov	r8, r0
 800a108:	4689      	mov	r9, r1
 800a10a:	4630      	mov	r0, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	f7f6 f9e3 	bl	80004d8 <__aeabi_dmul>
 800a112:	a35f      	add	r3, pc, #380	@ (adr r3, 800a290 <atan+0x2d0>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f826 	bl	8000168 <__aeabi_dsub>
 800a11c:	4632      	mov	r2, r6
 800a11e:	463b      	mov	r3, r7
 800a120:	f7f6 f9da 	bl	80004d8 <__aeabi_dmul>
 800a124:	a35c      	add	r3, pc, #368	@ (adr r3, 800a298 <atan+0x2d8>)
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f7f6 f81d 	bl	8000168 <__aeabi_dsub>
 800a12e:	4632      	mov	r2, r6
 800a130:	463b      	mov	r3, r7
 800a132:	f7f6 f9d1 	bl	80004d8 <__aeabi_dmul>
 800a136:	a35a      	add	r3, pc, #360	@ (adr r3, 800a2a0 <atan+0x2e0>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f814 	bl	8000168 <__aeabi_dsub>
 800a140:	4632      	mov	r2, r6
 800a142:	463b      	mov	r3, r7
 800a144:	f7f6 f9c8 	bl	80004d8 <__aeabi_dmul>
 800a148:	a357      	add	r3, pc, #348	@ (adr r3, 800a2a8 <atan+0x2e8>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 f80b 	bl	8000168 <__aeabi_dsub>
 800a152:	4632      	mov	r2, r6
 800a154:	463b      	mov	r3, r7
 800a156:	f7f6 f9bf 	bl	80004d8 <__aeabi_dmul>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4640      	mov	r0, r8
 800a160:	4649      	mov	r1, r9
 800a162:	f7f6 f803 	bl	800016c <__adddf3>
 800a166:	4622      	mov	r2, r4
 800a168:	462b      	mov	r3, r5
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	d144      	bne.n	800a202 <atan+0x242>
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7f5 fff4 	bl	8000168 <__aeabi_dsub>
 800a180:	e733      	b.n	8009fea <atan+0x2a>
 800a182:	2200      	movs	r2, #0
 800a184:	4b4f      	ldr	r3, [pc, #316]	@ (800a2c4 <atan+0x304>)
 800a186:	f7f5 ffef 	bl	8000168 <__aeabi_dsub>
 800a18a:	2200      	movs	r2, #0
 800a18c:	4606      	mov	r6, r0
 800a18e:	460f      	mov	r7, r1
 800a190:	4620      	mov	r0, r4
 800a192:	4629      	mov	r1, r5
 800a194:	4b4b      	ldr	r3, [pc, #300]	@ (800a2c4 <atan+0x304>)
 800a196:	f7f5 ffe9 	bl	800016c <__adddf3>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 fac3 	bl	800072c <__aeabi_ddiv>
 800a1a6:	f04f 0a01 	mov.w	sl, #1
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	e767      	b.n	800a080 <atan+0xc0>
 800a1b0:	4b46      	ldr	r3, [pc, #280]	@ (800a2cc <atan+0x30c>)
 800a1b2:	429e      	cmp	r6, r3
 800a1b4:	d21a      	bcs.n	800a1ec <atan+0x22c>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4b45      	ldr	r3, [pc, #276]	@ (800a2d0 <atan+0x310>)
 800a1ba:	f7f5 ffd5 	bl	8000168 <__aeabi_dsub>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	460f      	mov	r7, r1
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4b41      	ldr	r3, [pc, #260]	@ (800a2d0 <atan+0x310>)
 800a1ca:	f7f6 f985 	bl	80004d8 <__aeabi_dmul>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b3c      	ldr	r3, [pc, #240]	@ (800a2c4 <atan+0x304>)
 800a1d2:	f7f5 ffcb 	bl	800016c <__adddf3>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 faa5 	bl	800072c <__aeabi_ddiv>
 800a1e2:	f04f 0a02 	mov.w	sl, #2
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	e749      	b.n	800a080 <atan+0xc0>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4938      	ldr	r1, [pc, #224]	@ (800a2d4 <atan+0x314>)
 800a1f4:	f7f6 fa9a 	bl	800072c <__aeabi_ddiv>
 800a1f8:	f04f 0a03 	mov.w	sl, #3
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	e73e      	b.n	800a080 <atan+0xc0>
 800a202:	4b35      	ldr	r3, [pc, #212]	@ (800a2d8 <atan+0x318>)
 800a204:	4e35      	ldr	r6, [pc, #212]	@ (800a2dc <atan+0x31c>)
 800a206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffab 	bl	8000168 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f5 ffa7 	bl	8000168 <__aeabi_dsub>
 800a21a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a226:	f7f5 ff9f 	bl	8000168 <__aeabi_dsub>
 800a22a:	f1bb 0f00 	cmp.w	fp, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	f6bf aee4 	bge.w	8009ffe <atan+0x3e>
 800a236:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a23a:	461d      	mov	r5, r3
 800a23c:	e6df      	b.n	8009ffe <atan+0x3e>
 800a23e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a2b0 <atan+0x2f0>)
 800a240:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a244:	e6db      	b.n	8009ffe <atan+0x3e>
 800a246:	bf00      	nop
 800a248:	54442d18 	.word	0x54442d18
 800a24c:	3ff921fb 	.word	0x3ff921fb
 800a250:	8800759c 	.word	0x8800759c
 800a254:	7e37e43c 	.word	0x7e37e43c
 800a258:	e322da11 	.word	0xe322da11
 800a25c:	3f90ad3a 	.word	0x3f90ad3a
 800a260:	24760deb 	.word	0x24760deb
 800a264:	3fa97b4b 	.word	0x3fa97b4b
 800a268:	a0d03d51 	.word	0xa0d03d51
 800a26c:	3fb10d66 	.word	0x3fb10d66
 800a270:	c54c206e 	.word	0xc54c206e
 800a274:	3fb745cd 	.word	0x3fb745cd
 800a278:	920083ff 	.word	0x920083ff
 800a27c:	3fc24924 	.word	0x3fc24924
 800a280:	5555550d 	.word	0x5555550d
 800a284:	3fd55555 	.word	0x3fd55555
 800a288:	2c6a6c2f 	.word	0x2c6a6c2f
 800a28c:	bfa2b444 	.word	0xbfa2b444
 800a290:	52defd9a 	.word	0x52defd9a
 800a294:	3fadde2d 	.word	0x3fadde2d
 800a298:	af749a6d 	.word	0xaf749a6d
 800a29c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a2a0:	fe231671 	.word	0xfe231671
 800a2a4:	3fbc71c6 	.word	0x3fbc71c6
 800a2a8:	9998ebc4 	.word	0x9998ebc4
 800a2ac:	3fc99999 	.word	0x3fc99999
 800a2b0:	54442d18 	.word	0x54442d18
 800a2b4:	bff921fb 	.word	0xbff921fb
 800a2b8:	440fffff 	.word	0x440fffff
 800a2bc:	7ff00000 	.word	0x7ff00000
 800a2c0:	3fdbffff 	.word	0x3fdbffff
 800a2c4:	3ff00000 	.word	0x3ff00000
 800a2c8:	3ff2ffff 	.word	0x3ff2ffff
 800a2cc:	40038000 	.word	0x40038000
 800a2d0:	3ff80000 	.word	0x3ff80000
 800a2d4:	bff00000 	.word	0xbff00000
 800a2d8:	0800afd0 	.word	0x0800afd0
 800a2dc:	0800aff0 	.word	0x0800aff0

0800a2e0 <fabs>:
 800a2e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4770      	bx	lr

0800a2e8 <_init>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr

0800a2f4 <_fini>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr
